REPORT GP006NZKH45RLMZ0DDBKQFQ6SMP220 MESSAGE-ID GR
                NO STANDARD PAGE HEADING
                LINE-SIZE 160 LINE-COUNT 65.
*----------------------------------------------------------------------*
*         selections for report(s) of library ZFM                      *
*         01 -> Z302FCPY  Ejer Fd/CG/PP/PP                             *
*         02 -> Z302YCPX  Ejercicio ProgPres/CeGe/PosPre               *
*         03 -> Z302YPXX  Ejercicio ProgPres/PosPre                    *
*----------------------------------------------------------------------*
*         report group   : Z302 Disponibilidad                         *
*         program class  : RW_SELECTION                                *
*         program version: 00000001                                    *
*         client         : 220                                         *
*----------------------------------------------------------------------*
*         user      :  VPADILLAA                                       *
*         date      :  19.06.19                                        *
*         time      :  17:46.15                                        *
*         release   :  740                                             *
*----------------------------------------------------------------------*

* eject
*----------------------------------------------------------------------*
*.........DATA-DEFINITIONS.............................................*
*----------------------------------------------------------------------*

* eject
*----------------------------------------------------------------------*
*.........copy of include FGRWFDS0.....................................*
*----------------------------------------------------------------------*

INCLUDE fgrwfdtp.
INCLUDE fgrwsdt0.                      "Type definitions for SAPFGRWS
INCLUDE fgrwfdmx.

*......... ATAB-Tables ................................................*

TABLES: t804a,
        t800,                          "report directory
        t800t,                         "report texts
        t801m, t801d,                  "row, columns, selection
        t801r,                         "system defaults
        t803l,                         "reports in report group
        t803j,                         "report group
        t803t,                         "report group texts
        t801k,                         "library
        t890,                          "boolean formulas
        t006, t006a,                   "quantity units
        tcurx.                         "currency units

TABLES: rgrwa.

TYPES:
    t_seqnr3(3) TYPE n,                "sequence number with 3 digits
    xflag(1)    TYPE c.                "flag

TYPES:
    BEGIN OF t_table_field,            "field with name "table-field"
    table   LIKE dfies-tabname,
    dash(1) TYPE c,
    field   LIKE dfies-fieldname,
    END   OF t_table_field.

*......... Interfaces .................................................*

INCLUDE fgsb0d00.                      "Interface to SAPFGSB0

INCLUDE fgrwsd01.                      "Interface to SAPFGRWS

*....... macro JOBTABLES .............................................*

INCLUDE fgrwfdjt.

*----------------------------------------------------------------------*
*    common data of selection reports JjjjjmmS                         *
*----------------------------------------------------------------------*

DATA: subrc           LIKE sy-subrc,   "return code
      bool_result(1)  TYPE c,          "result of RGBOOL00-call
      xcount          TYPE i,
      xcount1         TYPE i,
      xcount2         TYPE i,
      xcount3         TYPE i,
      xcount4         TYPE i,
      p_period        TYPE i,
      p_period_min    TYPE i,
      p_period_max    TYPE i,
      p_pitype        TYPE i,
      pos(2)          TYPE c,
      string(255)     TYPE c,
      time_start      LIKE fstat-proc_time,
      time_end        LIKE fstat-proc_time,
      time_sel_0      LIKE cstat-time_selection,
      time_sel_1      LIKE cstat-time_selection,
      save_index(5)   TYPE c,
      save_col_idx(5) TYPE c,
      amount_length   TYPE i,          "number of bytes of amounts
      lv_year         TYPE gjahr,      "for data aging
      lv_year1        TYPE gjahr,      "for data aging
      lv_year2        TYPE gjahr,      "for data aging
      lv_bukrs        TYPE bukrs,      "for data aging
      lv_bukrs1       TYPE bukrs,      "for data aging
      lv_bukrs2       TYPE bukrs,      "for data aging
      ls_seltab       LIKE LINE OF s_seltab, "for data aging
      count_entry     TYPE i,
      count_entry_max0 TYPE i VALUE 10000. "maximum number of entries
                                       "in COLLECT_tab

*....... current state ...............................................*

DATA: BEGIN OF cur,
        tab      LIKE c-tmsb-table,    "current table
        field    LIKE c-tmsb-field,    "current field
      END   OF cur.

*....... size and number of INDX-blocks for table OUT2 ...............*

DATA: indx_block_size   TYPE  i        "size of INDX-blocks
                        VALUE 100000,  "in bytes
      max_n_indx_blocks TYPE  i        "maximum number of
                        VALUE 999.     "INDX-blocks

*....... global variables ............................................*

DATA: report_group LIKE t803j-rgjnr,   "report group
      rwtab_class  LIKE t804a-fclas,   "table class (T804A)
      rep_table    LIKE t804a-tab.     "reporting table

DATA: additional_table LIKE t804a-addtt.

*.........print parameters.............................................*

DATA: print_parameters   LIKE pri_params,
      archive_parameters LIKE arc_params.

*....... field for dataset in report selection .......................*

DATA: datafield(04) TYPE c.   "number of datafield in table DATA_FIELDS

*....... fields for keep-level totals ................................*

DATA: BEGIN OF keep,
        status(1)    TYPE c,           "status of kept dimension
                                       "_ = no dimension is kept
                                "1 = dimension is kept in last dimension
                                       "2 = keep dimension
        dimension(2) TYPE c,           "sort index
        si           TYPE rwpsetm,     "sort index
        r            LIKE rgsmv-line,  "row in TMSB/TVAL
        s            TYPE setvalmin,   "sort field
        i            LIKE sy-tabix,    "index in TMSB/TVAL
        t            LIKE c-tmsb-ptdown, "type of entry (V=Value,S=Set)
      END   OF keep.

DATA: BEGIN OF backup,                 "data of overwritten dimension
        si     TYPE rwpsetm,           "sort index
        r      LIKE rgsmv-line,        "row in TMSB/TVAL
        s      TYPE setvalmin,         "sort field
        l(3)   TYPE c,                 "level in set
        i      LIKE sy-tabix,          "index in TMSB/TVAL
        t      LIKE c-tmsb-ptdown,     "type of entry (V=Value,S=Set)
      END   OF backup.

*....... highest and lowest value of a field .........................*

DATA: BEGIN OF hexff,
               x1(12) TYPE x VALUE 'FFFFFFFFFFFFFFFFFFFFFFFF',
               x2(12) TYPE x VALUE 'FFFFFFFFFFFFFFFFFFFFFFFF',
               x3(12) TYPE x VALUE 'FFFFFFFFFFFFFFFFFFFFFFFF',
      END   OF hexff.
DATA: BEGIN OF hex00,
               x1(12) TYPE x VALUE '000000000000000000000000',
               x2(12) TYPE x VALUE '000000000000000000000000',
               x3(12) TYPE x VALUE '000000000000000000000000',
      END   OF hex00.

DATA: BEGIN OF iv,                     "intervall-sign
               x(1) TYPE x VALUE 'FE',
      END   OF iv.


DATA: flag-used(1) TYPE c.             "flag for used database-record

DATA: s_on   VALUE 'X',
      s_off  VALUE ' '.

DATA: formprint_flag(1) TYPE c.        "flag for active form print

DATA: sel_period(1)    TYPE c.         "flag for period in selectionset

*....... data for report/report interface ............................*

DATA: rc_call  LIKE sy-subrc VALUE '0004',"0: report is receiver-report
                                       "4: RC-Interface not used
      rc_no_mesg            TYPE flag,
      rc_subrc              LIKE sy-subrc,"return code for RC-functions
      rc_period_field_found LIKE sy-subrc,"database has period-field
      rc_dim_count          TYPE i.    "number of sender dimensions

DATA: BEGIN OF rc_dim_data.
        INCLUDE STRUCTURE rgcdi.       "structure for dimension data
DATA: END   OF rc_dim_data.

DATA: BEGIN OF rc_dim_data_tab OCCURS 25.
        INCLUDE STRUCTURE rgcdi.       "table for dimension data
DATA: END   OF rc_dim_data_tab.

DATA: count_rc_dim_data_tab LIKE sy-tabix.

DATA: BEGIN OF rc_check_table OCCURS 10.
        INCLUDE STRUCTURE rgcct.       "table for value check
DATA: END   OF rc_check_table.

FIELD-SYMBOLS: <rc_dim_value>.

*....... data for key-conversion .....................................*

DATA: key_conversion(1) TYPE c.        "='X' if key field is converted

DATA: BEGIN OF key_conv OCCURS 1,      "table of converted fields
        field  LIKE t804c-fname,
      END   OF key_conv.

*....... data for alias fields .......................................*

DATA: alias_flag TYPE c.

DATA: BEGIN OF alias_fields OCCURS 5,
      table        LIKE dfies-tabname,
      field        LIKE dfies-fieldname,
      assign_field TYPE t_table_field,
      END   OF alias_fields.

*.......structure for info about fields in variation..................*

DATA: attr LIKE dfies.

DATA: BEGIN OF varitab OCCURS 5.
        INCLUDE STRUCTURE vartab.
DATA: END OF varitab.

*.......structure to maintain indeces of reports......................*

DATA: BEGIN OF reptab OCCURS 5.
        INCLUDE STRUCTURE t803l.
DATA: END OF reptab.

*....... field symbols to address OUT2 and SUM .......................*

FIELD-SYMBOLS: <out2_key>,             "report line address key for OUT2
               <out2_c>,               "OUT2-Cnnnnn
               <out2_p_ut>,            "OUT2-P_UTnnnnn
               <out2_wrk_key>,         "logical key of OUT2_WRK
               <out2_wrk_c>,           "OUT2_WRK-Cnnnnn
               <out2_wrk_p_ut>,        "OUT2_WRK-P_UTnnnnn
               <out2_collect_key>,     "collect key for OUT2
               <sum_key>,              "report line address key for SUM
               <sum_collect_key>.      "collect key for SUM

*....... handling of data for popups on selection-screen .............*

DATA: BEGIN OF subinfo.
        INCLUDE STRUCTURE rssubinfo.
DATA: END OF subinfo.

DATA: variant_processed TYPE c VALUE ' '.

DATA: rw_flag(1).

* -------------------------------------------------------------------- *
*                        extract management                            *
* -------------------------------------------------------------------- *

DATA: grep_block_size   TYPE  i        "size of GREP-blocks
                        VALUE 100000,  "in bytes
      max_n_grep_blocks TYPE  i        "maximum number of
                        VALUE 999.     "GREP-blocks

DATA: flag_print  TYPE c,
      flag_select TYPE c,
      flag_batch  TYPE c.

*....... data declarations for FB 'SELECT_OPTIONS_RESTRICT' ..........*

DATA: restrict TYPE sscr_restrict,
      opt_list TYPE sscr_opt_list,
      ass      TYPE sscr_ass.

*....... Call mode ...................................................*

DATA: call_mode TYPE i.                "0 = Called by SUBMIT (default)
                                       "1 = Called by external PERFORM

*....... Import ID for run time data .................................*

DATA: g_s_grrt_key LIKE grrt_key.

*.........end of include FGRWFDS0......................................*

TABLES GRRT.
TABLES GREP.
TABLES FMRBCS                        .
DATA BEGIN OF I_FMRBCS OCCURS 0.
     INCLUDE STRUCTURE FMRBCS .
     DATA END OF I_FMRBCS.

DATA: BEGIN OF $RWTAB_KEY,
        RFUND                          LIKE FMRBCS-RFUND,
        RFUNDSCTR                      LIKE FMRBCS-RFUNDSCTR,
        RCMMTITEM                      LIKE FMRBCS-RCMMTITEM,
        RMEASURE                       LIKE FMRBCS-RMEASURE,
        RHCUR                          LIKE FMRBCS-RHCUR,
        BUDTYPE_9                      LIKE FMRBCS-BUDTYPE_9,
        PROCESS_9                      LIKE FMRBCS-PROCESS_9,
        RCFLEV                         LIKE FMRBCS-RCFLEV,
        RFIKRS                         LIKE FMRBCS-RFIKRS,
        RLDNR                          LIKE FMRBCS-RLDNR,
        RPMAX                          LIKE FMRBCS-RPMAX,
        RSTATS                         LIKE FMRBCS-RSTATS,
        RVERS                          LIKE FMRBCS-RVERS,
        RYEAR                          LIKE FMRBCS-RYEAR,
        VALTYPE_9                      LIKE FMRBCS-VALTYPE_9,
        WFSTATE_9                      LIKE FMRBCS-WFSTATE_9,
      END   OF $RWTAB_KEY.

DATA: BEGIN OF $RWTAB.
         INCLUDE STRUCTURE $RWTAB_KEY.
DATA:    $$COUNTER      TYPE I,  "statistics
         $$AUTH_COUNTER TYPE I,  "auth. stat.
      END   OF $RWTAB.

DATA: BEGIN OF FMRBCS_DATA.
         DATA HSL01 LIKE FMRBCS-HSL01.
         DATA HSL02 LIKE FMRBCS-HSL02.
         DATA HSL03 LIKE FMRBCS-HSL03.
         DATA HSL04 LIKE FMRBCS-HSL04.
         DATA HSL05 LIKE FMRBCS-HSL05.
         DATA HSL06 LIKE FMRBCS-HSL06.
         DATA HSL07 LIKE FMRBCS-HSL07.
         DATA HSL08 LIKE FMRBCS-HSL08.
         DATA HSL09 LIKE FMRBCS-HSL09.
         DATA HSL10 LIKE FMRBCS-HSL10.
         DATA HSL11 LIKE FMRBCS-HSL11.
         DATA HSL12 LIKE FMRBCS-HSL12.
         DATA HSL13 LIKE FMRBCS-HSL13.
         DATA HSL14 LIKE FMRBCS-HSL14.
         DATA HSL15 LIKE FMRBCS-HSL15.
         DATA HSL16 LIKE FMRBCS-HSL16.
DATA: END   OF FMRBCS_DATA.

DATA: BEGIN OF COLLECT_FMRBCS     OCCURS 0.
         INCLUDE STRUCTURE $RWTAB_KEY.
DATA:    $$COUNTER      TYPE I,  "statistics
         $$AUTH_COUNTER TYPE I.  "authority statistics
         INCLUDE STRUCTURE FMRBCS_DATA.
DATA: END   OF COLLECT_FMRBCS    .

DATA: BEGIN OF VALID,
         BUDTYPE_9(1) TYPE C VALUE 'X',
         PROCESS_9(1) TYPE C VALUE 'X',
         RCFLEV(1) TYPE C VALUE 'X',
         RCMMTITEM(1) TYPE C VALUE 'X',
         RFIKRS(1) TYPE C VALUE 'X',
         RFUND(1) TYPE C VALUE 'X',
         RFUNDSCTR(1) TYPE C VALUE 'X',
         RLDNR(1) TYPE C VALUE 'X',
         RMEASURE(1) TYPE C VALUE 'X',
         RPMAX(1) TYPE C VALUE 'X',
         RSTATS(1) TYPE C VALUE 'X',
         RVERS(1) TYPE C VALUE 'X',
         RYEAR(1) TYPE C VALUE 'X',
         VALTYPE_9(1) TYPE C VALUE 'X',
         WFSTATE_9(1) TYPE C VALUE 'X',
      END   OF VALID.

*.........VALID-flags for additional fields............................*

DATA: BEGIN OF VALID_ADDFIELDS,
         $$DUMMY$$,
      END   OF VALID_ADDFIELDS.

*.........table for external perform...................................*

DATA BEGIN OF INT_FMRBCS     OCCURS 1.
INCLUDE STRUCTURE FMRBCS                        .
DATA END OF INT_FMRBCS    .

*.........transport structure..........................................*

DATA: BEGIN OF FTAB OCCURS 20,
         FIELD LIKE C-TMSB-FIELD,
         MIN LIKE C-TMSB-MIN,
         MAX LIKE C-TMSB-MAX,
      END OF FTAB.

*.........RANGES declarations for additional sets of data fields.......*

RANGES R_0000000032 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0010
RANGES R_0000000033 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0013
RANGES R_0000000034 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0016
RANGES R_0000000035 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0019
RANGES R_0000000036 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0022
RANGES R_0000000038 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0025
RANGES R_0000000039 FOR $RWTAB-PROCESS_9 . " 0002$Z302#######VAL0028
RANGES R_0000000040 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0031
RANGES R_0000000041 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0034
RANGES R_0000000042 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0037
RANGES R_0000000043 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0040
RANGES R_0000000045 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0043
RANGES R_0000000046 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0046
RANGES R_0000000047 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0049
RANGES R_0000000048 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0052
RANGES R_0000000049 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0055
RANGES R_0000000051 FOR $RWTAB-PROCESS_9 . " 0002$Z302#######VAL0058
RANGES R_0000000052 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0061
RANGES R_0000000053 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0064
RANGES R_0000000054 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0067
RANGES R_0000000055 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0070
RANGES R_0000000057 FOR $RWTAB-RCFLEV . " 0002$Z302#######VAL0073
RANGES R_0000000058 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0076
RANGES R_0000000059 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0079
RANGES R_0000000061 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0082
RANGES R_0000000062 FOR $RWTAB-PROCESS_9 . " 0002$Z302#######VAL0085
RANGES R_0000000063 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0088
RANGES R_0000000064 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0091
RANGES R_0000000065 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0094
RANGES R_0000000066 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0097
RANGES R_0000000068 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0100
RANGES R_0000000069 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0103
RANGES R_0000000070 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0106
RANGES R_0000000071 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0109
RANGES R_0000000072 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0112
RANGES R_0000000074 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0115
RANGES R_0000000075 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0118
RANGES R_0000000076 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0121
RANGES R_0000000077 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0124
RANGES R_0000000079 FOR $RWTAB-RCFLEV . " 0002$Z302#######VAL0127
RANGES R_0000000080 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0130
RANGES R_0000000081 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0133
RANGES R_0000000083 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0144
RANGES R_0000000084 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0147
RANGES R_0000000085 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0150
RANGES R_0000000086 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0153
RANGES R_0000000087 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0156
RANGES R_0000000089 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0159
RANGES R_0000000090 FOR $RWTAB-PROCESS_9 . " 0002$Z302#######VAL0162
RANGES R_0000000091 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0165
RANGES R_0000000092 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0168
RANGES R_0000000093 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0171
RANGES R_0000000094 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0174
RANGES R_0000000096 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0177
RANGES R_0000000097 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0180
RANGES R_0000000098 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0183
RANGES R_0000000099 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0186
RANGES R_0000000100 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0189
RANGES R_0000000102 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0192
RANGES R_0000000103 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0195
RANGES R_0000000104 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0198
RANGES R_0000000105 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0201
RANGES R_0000000107 FOR $RWTAB-RCFLEV . " 0002$Z302#######VAL0204
RANGES R_0000000108 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0207
RANGES R_0000000109 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0210
RANGES R_0000000111 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0213
RANGES R_0000000112 FOR $RWTAB-PROCESS_9 . " 0002$Z302#######VAL0216
RANGES R_0000000113 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0219
RANGES R_0000000114 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0222
RANGES R_0000000115 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0225
RANGES R_0000000116 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0228
RANGES R_0000000118 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0231
RANGES R_0000000119 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0234
RANGES R_0000000120 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0237
RANGES R_0000000121 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0240
RANGES R_0000000122 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0243
RANGES R_0000000124 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0246
RANGES R_0000000125 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0249
RANGES R_0000000126 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0252
RANGES R_0000000127 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0255
RANGES R_0000000129 FOR $RWTAB-RCFLEV . " 0002$Z302#######VAL0258
RANGES R_0000000130 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0261
RANGES R_0000000131 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0264
RANGES R_0000000133 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0275
RANGES R_0000000134 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0278
RANGES R_0000000135 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0281
RANGES R_0000000136 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0284
RANGES R_0000000137 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0287
RANGES R_0000000139 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0290
RANGES R_0000000140 FOR $RWTAB-PROCESS_9 . " 0002$Z302#######VAL0293
RANGES R_0000000141 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0296
RANGES R_0000000142 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0299
RANGES R_0000000143 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0302
RANGES R_0000000144 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0305
RANGES R_0000000146 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0308
RANGES R_0000000147 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0311
RANGES R_0000000148 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0314
RANGES R_0000000149 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0317
RANGES R_0000000150 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0320
RANGES R_0000000152 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0323
RANGES R_0000000153 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0326
RANGES R_0000000154 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0329
RANGES R_0000000155 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0332
RANGES R_0000000157 FOR $RWTAB-RCFLEV . " 0002$Z302#######VAL0335
RANGES R_0000000158 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0338
RANGES R_0000000159 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0341
RANGES R_0000000161 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0344
RANGES R_0000000162 FOR $RWTAB-PROCESS_9 . " 0002$Z302#######VAL0347
RANGES R_0000000163 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0350
RANGES R_0000000164 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0353
RANGES R_0000000165 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0356
RANGES R_0000000166 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0359
RANGES R_0000000168 FOR $RWTAB-BUDTYPE_9 . " 0002$Z302#######VAL0362
RANGES R_0000000169 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0365
RANGES R_0000000170 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0368
RANGES R_0000000171 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0371
RANGES R_0000000172 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0374
RANGES R_0000000174 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0377
RANGES R_0000000175 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0380
RANGES R_0000000176 FOR $RWTAB-VALTYPE_9 . " 0002$Z302#######VAL0383
RANGES R_0000000177 FOR $RWTAB-WFSTATE_9 . " 0002$Z302#######VAL0386
RANGES R_0000000179 FOR $RWTAB-RCFLEV . " 0002$Z302#######VAL0389
RANGES R_0000000180 FOR $RWTAB-RLDNR . " 0002$Z302#######VAL0392
RANGES R_0000000181 FOR $RWTAB-RPMAX . " 0002$Z302#######VAL0395


*......... define check tables for selection ..........................*

*         field: RFIKRS / set: 0002$Z302#######VAL0001 ZFMZ302FCPY Sel *
DATA: BEGIN OF CHECK_RSD00001 OCCURS 0,
        TO       LIKE $RWTAB-RFIKRS                        ,
        FROM     LIKE $RWTAB-RFIKRS                        ,
        VALID    TYPE C,
      END   OF CHECK_RSD00001.
DATA: CHECK_RSD00001_INDEX LIKE SY-TABIX.

*         field: RVERS / set: 0002$Z302#######VAL0005 ZFMZ302FCPY Sele *
DATA: BEGIN OF CHECK_RSD00002 OCCURS 0,
        TO       LIKE $RWTAB-RVERS                         ,
        FROM     LIKE $RWTAB-RVERS                         ,
        VALID    TYPE C,
      END   OF CHECK_RSD00002.
DATA: CHECK_RSD00002_INDEX LIKE SY-TABIX.

*         field: RYEAR / set: 0002$Z302#######VAL0007 ZFMZ302FCPY Sele *
DATA: BEGIN OF CHECK_RSD00003 OCCURS 0,
        TO       LIKE $RWTAB-RYEAR                         ,
        FROM     LIKE $RWTAB-RYEAR                         ,
        VALID    TYPE C,
      END   OF CHECK_RSD00003.
DATA: CHECK_RSD00003_INDEX LIKE SY-TABIX.

*         field: RSTATS / set: 0002$Z302#######VAL0003 ZFMZ302FCPY Sel *
DATA: BEGIN OF CHECK_RSD00004 OCCURS 0,
        TO       LIKE $RWTAB-RSTATS                        ,
        FROM     LIKE $RWTAB-RSTATS                        ,
        VALID    TYPE C,
      END   OF CHECK_RSD00004.
DATA: CHECK_RSD00004_INDEX LIKE SY-TABIX.

*         field: RFIKRS / set: 0002$Z302#######VAL0135 ZFMZ302YCPX Sel *
DATA: BEGIN OF CHECK_RSD00005 OCCURS 0,
        TO       LIKE $RWTAB-RFIKRS                        ,
        FROM     LIKE $RWTAB-RFIKRS                        ,
        VALID    TYPE C,
      END   OF CHECK_RSD00005.
DATA: CHECK_RSD00005_INDEX LIKE SY-TABIX.

*         field: RVERS / set: 0002$Z302#######VAL0139 ZFMZ302YCPX Sele *
DATA: BEGIN OF CHECK_RSD00006 OCCURS 0,
        TO       LIKE $RWTAB-RVERS                         ,
        FROM     LIKE $RWTAB-RVERS                         ,
        VALID    TYPE C,
      END   OF CHECK_RSD00006.
DATA: CHECK_RSD00006_INDEX LIKE SY-TABIX.

*         field: RYEAR / set: 0002$Z302#######VAL0141 ZFMZ302YCPX Sele *
DATA: BEGIN OF CHECK_RSD00007 OCCURS 0,
        TO       LIKE $RWTAB-RYEAR                         ,
        FROM     LIKE $RWTAB-RYEAR                         ,
        VALID    TYPE C,
      END   OF CHECK_RSD00007.
DATA: CHECK_RSD00007_INDEX LIKE SY-TABIX.

*         field: RSTATS / set: 0002$Z302#######VAL0137 ZFMZ302YCPX Sel *
DATA: BEGIN OF CHECK_RSD00008 OCCURS 0,
        TO       LIKE $RWTAB-RSTATS                        ,
        FROM     LIKE $RWTAB-RSTATS                        ,
        VALID    TYPE C,
      END   OF CHECK_RSD00008.
DATA: CHECK_RSD00008_INDEX LIKE SY-TABIX.

*         field: RFIKRS / set: 0002$Z302#######VAL0266 ZFMZ302YPXX Sel *
DATA: BEGIN OF CHECK_RSD00009 OCCURS 0,
        TO       LIKE $RWTAB-RFIKRS                        ,
        FROM     LIKE $RWTAB-RFIKRS                        ,
        VALID    TYPE C,
      END   OF CHECK_RSD00009.
DATA: CHECK_RSD00009_INDEX LIKE SY-TABIX.

*         field: RVERS / set: 0002$Z302#######VAL0270 ZFMZ302YPXX Sele *
DATA: BEGIN OF CHECK_RSD00010 OCCURS 0,
        TO       LIKE $RWTAB-RVERS                         ,
        FROM     LIKE $RWTAB-RVERS                         ,
        VALID    TYPE C,
      END   OF CHECK_RSD00010.
DATA: CHECK_RSD00010_INDEX LIKE SY-TABIX.

*         field: RYEAR / set: 0002$Z302#######VAL0272 ZFMZ302YPXX Sele *
DATA: BEGIN OF CHECK_RSD00011 OCCURS 0,
        TO       LIKE $RWTAB-RYEAR                         ,
        FROM     LIKE $RWTAB-RYEAR                         ,
        VALID    TYPE C,
      END   OF CHECK_RSD00011.
DATA: CHECK_RSD00011_INDEX LIKE SY-TABIX.

*         field: RSTATS / set: 0002$Z302#######VAL0268 ZFMZ302YPXX Sel *
DATA: BEGIN OF CHECK_RSD00012 OCCURS 0,
        TO       LIKE $RWTAB-RSTATS                        ,
        FROM     LIKE $RWTAB-RSTATS                        ,
        VALID    TYPE C,
      END   OF CHECK_RSD00012.
DATA: CHECK_RSD00012_INDEX LIKE SY-TABIX.


*.........bounds for max. table entries................................*

DATA: MAX_SUM TYPE I VALUE 007500,
      MAX_OUT TYPE I VALUE 005000.

*.........statistical data for reports.................................*

DATA: STAT_USED_R01 TYPE I.
DATA: STAT_AUTH_R01 TYPE I.
DATA: STAT_USED_R02 TYPE I.
DATA: STAT_AUTH_R02 TYPE I.
DATA: STAT_USED_R03 TYPE I.
DATA: STAT_AUTH_R03 TYPE I.

*.........DATA for optimized select....................................*


*.........Declare ranges for SELECT....................................*

RANGES: WTAB_RCMMTITEM FOR FMRBCS-RCMMTITEM,
WTAB_RFIKRS FOR FMRBCS-RFIKRS,
WTAB_RFUND FOR FMRBCS-RFUND,
WTAB_RFUNDSCTR FOR FMRBCS-RFUNDSCTR,
WTAB_RLDNR FOR FMRBCS-RLDNR,
WTAB_RMEASURE FOR FMRBCS-RMEASURE,
WTAB_RPMAX FOR FMRBCS-RPMAX,
WTAB_RSTATS FOR FMRBCS-RSTATS,
WTAB_RVERS FOR FMRBCS-RVERS,
WTAB_RYEAR FOR FMRBCS-RYEAR.
RANGES: SELR_RCMMTITEM FOR $RWTAB-RCMMTITEM,
SELR_RFIKRS FOR $RWTAB-RFIKRS,
SELR_RFUND FOR $RWTAB-RFUND,
SELR_RFUNDSCTR FOR $RWTAB-RFUNDSCTR,
SELR_RLDNR FOR $RWTAB-RLDNR,
SELR_RMEASURE FOR $RWTAB-RMEASURE,
SELR_RPMAX FOR $RWTAB-RPMAX,
SELR_RSTATS FOR $RWTAB-RSTATS,
SELR_RVERS FOR $RWTAB-RVERS,
SELR_RYEAR FOR $RWTAB-RYEAR.
DATA: BEGIN OF EMPTY_FLAGS,
        RCMMTITEM TYPE C,
        RFIKRS TYPE C,
        RFUND TYPE C,
        RFUNDSCTR TYPE C,
        RLDNR TYPE C,
        RMEASURE TYPE C,
        RPMAX TYPE C,
        RSTATS TYPE C,
        RVERS TYPE C,
        RYEAR TYPE C,
      END OF EMPTY_FLAGS.

DATA: BEGIN OF RC_INDEX,
        RCMMTITEM                      LIKE SY-TABIX,
        RFIKRS                         LIKE SY-TABIX,
        RFUND                          LIKE SY-TABIX,
        RFUNDSCTR                      LIKE SY-TABIX,
        RLDNR                          LIKE SY-TABIX,
        RMEASURE                       LIKE SY-TABIX,
        RPMAX                          LIKE SY-TABIX,
        RSTATS                         LIKE SY-TABIX,
        RVERS                          LIKE SY-TABIX,
        RYEAR                          LIKE SY-TABIX,
      END   OF RC_INDEX.

*.........Constants....................................................*

CONSTANTS: MPOOL LIKE T804A-MPOOL VALUE 'SAPFFMRBCS'.

*.........DATA for R/R interface.......................................*

DATA: RC_VALID_PERIODS(016)  TYPE C.

*.........Row-Dimension-table..........................................*

DATA: BEGIN OF L_LEV OCCURS 10,
        LSEQNR(3)    TYPE C,
        SUPPRESS(1)  TYPE C,
        IBV_FLAG(1)  TYPE C,
        L001_I    LIKE SY-TABIX,
        L001_T(1),
        L001_L(3),
        L001_R(3), L001_S(024),
        L001_SI   TYPE RWPSETM,
        L001_IBV_LEVEL(3),
        TOTAL_LEVEL001    TYPE I,
        L002_I    LIKE SY-TABIX,
        L002_T(1),
        L002_L(3),
        L002_R(3), L002_S(024),
        L002_SI   TYPE RWPSETM,
        L002_IBV_LEVEL(3),
        TOTAL_LEVEL002    TYPE I,
        L003_I    LIKE SY-TABIX,
        L003_T(1),
        L003_L(3),
        L003_R(3), L003_S(024),
        L003_SI   TYPE RWPSETM,
        L003_IBV_LEVEL(3),
        TOTAL_LEVEL003    TYPE I,
        L004_I    LIKE SY-TABIX,
        L004_T(1),
        L004_L(3),
        L004_R(3), L004_S(024),
        L004_SI   TYPE RWPSETM,
        L004_IBV_LEVEL(3),
        TOTAL_LEVEL004    TYPE I,
        LFLAGP(1),
        LFROMP           TYPE I,
        LTOP             TYPE I,
        LFLAGD(1)        TYPE C,
        LFIELD(4)        TYPE C,
        FORMULA_INDEX    TYPE RWPSETM,
        DIM_F(2)         TYPE C,
        POS(2)           TYPE C,
      END OF L_LEV.
DATA: COUNT_L_LEV TYPE I.

*.........Column-Dimension-Table.......................................*

DATA: BEGIN OF C_LEV OCCURS 10,
        CSEQNR(3),
        C001_I          TYPE RWPSETM,
        C001_T(1),
        C001_L(3),
        C001_R(3), C001_S(024),
        C001_SI         TYPE RWPSETM,
        C001_IBV_LEVEL(3),
        CFLAGP(1) TYPE C,
        CFROMP    TYPE I,
        CTOP      TYPE I,
        CFLAGD(1) TYPE C,
        CFIELD(4) TYPE C,
      END OF C_LEV.
DATA: COUNT_C_LEV TYPE I.

*.........Dimension.Tables.............................................*

DATA: BEGIN OF D001 OCCURS 3,
      R(3), S(024),
      I                TYPE I,
      T(1)             TYPE C,
      L                TYPE I,
      SI               TYPE I,
      TOTAL_LEVEL      TYPE I,
      FLAGP(1)         TYPE C,
      FROMP            TYPE I,
      TOP              TYPE I,
      FLAGD(1)         TYPE C,
      FIELD(4)         TYPE C,
      FORMULA_INDEX    TYPE RWPSETM,
      DIM_F(2)         TYPE C,
      POS(2)           TYPE C,
      SUPPRESS(1)      TYPE C,
      IBV_LEVEL        TYPE I,
      IBV_FLAG(1)      TYPE C,
      END OF D001.

DATA: BEGIN OF D002 OCCURS 3,
      R(3), S(024),
      I                TYPE I,
      T(1)             TYPE C,
      L                TYPE I,
      SI               TYPE I,
      TOTAL_LEVEL      TYPE I,
      FLAGP(1)         TYPE C,
      FROMP            TYPE I,
      TOP              TYPE I,
      FLAGD(1)         TYPE C,
      FIELD(4)         TYPE C,
      FORMULA_INDEX    TYPE RWPSETM,
      DIM_F(2)         TYPE C,
      POS(2)           TYPE C,
      SUPPRESS(1)      TYPE C,
      IBV_LEVEL        TYPE I,
      IBV_FLAG(1)      TYPE C,
      END OF D002.

DATA: BEGIN OF D003 OCCURS 3,
      R(3), S(024),
      I                TYPE I,
      T(1)             TYPE C,
      L                TYPE I,
      SI               TYPE I,
      TOTAL_LEVEL      TYPE I,
      FLAGP(1)         TYPE C,
      FROMP            TYPE I,
      TOP              TYPE I,
      FLAGD(1)         TYPE C,
      FIELD(4)         TYPE C,
      FORMULA_INDEX    TYPE RWPSETM,
      DIM_F(2)         TYPE C,
      POS(2)           TYPE C,
      SUPPRESS(1)      TYPE C,
      IBV_LEVEL        TYPE I,
      IBV_FLAG(1)      TYPE C,
      END OF D003.

DATA: BEGIN OF D004 OCCURS 3,
      R(3), S(024),
      I                TYPE I,
      T(1)             TYPE C,
      L                TYPE I,
      SI               TYPE I,
      TOTAL_LEVEL      TYPE I,
      FLAGP(1)         TYPE C,
      FROMP            TYPE I,
      TOP              TYPE I,
      FLAGD(1)         TYPE C,
      FIELD(4)         TYPE C,
      FORMULA_INDEX    TYPE RWPSETM,
      DIM_F(2)         TYPE C,
      POS(2)           TYPE C,
      SUPPRESS(1)      TYPE C,
      IBV_LEVEL        TYPE I,
      IBV_FLAG(1)      TYPE C,
      END OF D004.

DATA: BEGIN OF R01_L001_RFUND_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R01_L001_RFUND_S.
DATA: BEGIN OF R01_L001_RFUND_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(010),
        INIT(1)  VALUE 'X',
      END OF R01_L001_RFUND_V.
DATA: BEGIN OF R01_L001_RFUNDSCTR_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R01_L001_RFUNDSCTR_S.
DATA: BEGIN OF R01_L001_RFUNDSCTR_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(016),
        INIT(1)  VALUE 'X',
      END OF R01_L001_RFUNDSCTR_V.
DATA: BEGIN OF R01_L001_RCMMTITEM_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R01_L001_RCMMTITEM_S.
DATA: BEGIN OF R01_L001_RCMMTITEM_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(024),
        INIT(1)  VALUE 'X',
      END OF R01_L001_RCMMTITEM_V.
DATA: BEGIN OF R01_L001_RMEASURE_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R01_L001_RMEASURE_S.
DATA: BEGIN OF R01_L001_RMEASURE_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(024),
        INIT(1)  VALUE 'X',
      END OF R01_L001_RMEASURE_V.
DATA: BEGIN OF R02_L001_RFUND_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R02_L001_RFUND_S.
DATA: BEGIN OF R02_L001_RFUND_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(010),
        INIT(1)  VALUE 'X',
      END OF R02_L001_RFUND_V.
DATA: BEGIN OF R02_L001_RMEASURE_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R02_L001_RMEASURE_S.
DATA: BEGIN OF R02_L001_RMEASURE_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(024),
        INIT(1)  VALUE 'X',
      END OF R02_L001_RMEASURE_V.
DATA: BEGIN OF R02_L001_RFUNDSCTR_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R02_L001_RFUNDSCTR_S.
DATA: BEGIN OF R02_L001_RFUNDSCTR_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(016),
        INIT(1)  VALUE 'X',
      END OF R02_L001_RFUNDSCTR_V.
DATA: BEGIN OF R02_L001_RCMMTITEM_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R02_L001_RCMMTITEM_S.
DATA: BEGIN OF R02_L001_RCMMTITEM_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(024),
        INIT(1)  VALUE 'X',
      END OF R02_L001_RCMMTITEM_V.
DATA: BEGIN OF R03_L001_RMEASURE_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R03_L001_RMEASURE_S.
DATA: BEGIN OF R03_L001_RMEASURE_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(024),
        INIT(1)  VALUE 'X',
      END OF R03_L001_RMEASURE_V.
DATA: BEGIN OF R03_L001_RCMMTITEM_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R03_L001_RCMMTITEM_S.
DATA: BEGIN OF R03_L001_RCMMTITEM_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(024),
        INIT(1)  VALUE 'X',
      END OF R03_L001_RCMMTITEM_V.
DATA: BEGIN OF R03_L001_RFUNDSCTR_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R03_L001_RFUNDSCTR_S.
DATA: BEGIN OF R03_L001_RFUNDSCTR_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(016),
        INIT(1)  VALUE 'X',
      END OF R03_L001_RFUNDSCTR_V.
DATA: BEGIN OF R03_L001_RFUND_S,
        SEQNR    LIKE C-TMSB-SEQNR,
        LEVEL    LIKE C-TMSB-LEVEL,
        FLAG     LIKE C-TMSB-FLAG ,
        PUP      LIKE C-TMSB-PUP,
      END OF R03_L001_RFUND_S.
DATA: BEGIN OF R03_L001_RFUND_V,
        SEQNR    LIKE C-TVAL-SEQNR,
        LINE     LIKE C-TVAL-LINE,
        LEVEL    LIKE C-TVAL-LEVEL,
        FLAG     LIKE C-TVAL-FLAG ,
        PUP      LIKE C-TVAL-PUP,
        INTERVAL,
        ZPFLAG   LIKE C-TVAL-ZPFLAG,
        VALUE(010),
        INIT(1)  VALUE 'X',
      END OF R03_L001_RFUND_V.
INCLUDE GP006NZKH45RLMZ0DDBKQFQ759T220.

*.........variation key................................................*

DATA: BEGIN OF VAR_SORT_KEY,
$$DUMMY$$,
      END   OF VAR_SORT_KEY.

*.........row key......................................................*

DATA: BEGIN OF ROW_SORT_KEY,
      LSEQNR(3),
      L001_SI TYPE RWPSETM, L001_R(3), L001_S(24), L001_L(3),
      L002_SI TYPE RWPSETM, L002_R(3), L002_S(24), L002_L(3),
      L003_SI TYPE RWPSETM, L003_R(3), L003_S(24), L003_L(3),
      L004_SI TYPE RWPSETM, L004_R(3), L004_S(24), L004_L(3),
      L001_IBV_LEVEL(3),
      L002_IBV_LEVEL(3),
      L003_IBV_LEVEL(3),
      L004_IBV_LEVEL(3),
      END   OF ROW_SORT_KEY.

*.........column key...................................................*

DATA: BEGIN OF COL_SORT_KEY,
      CINDEX(4),
      END   OF COL_SORT_KEY.

*.........attributes of out record (can be derived from key values)....*

DATA: BEGIN OF OUT_ATTR,
      L001_I TYPE I, L001_T(1), TOTAL_LEVEL001(3),
      L002_I TYPE I, L002_T(1), TOTAL_LEVEL002(3),
      L003_I TYPE I, L003_T(1), TOTAL_LEVEL003(3),
      L004_I TYPE I, L004_T(1), TOTAL_LEVEL004(3),
      KEEP_DIM(2),
      ZSF(1),
      FORMULA_INDEX TYPE RWPSETM,
      DIM_F(2),
      SUPPRESS(1),
      END   OF OUT_ATTR.

*.........amounts and units............................................*

DATA: BEGIN OF OUT_AMOUNTS,
      C00001    LIKE RGRWA-MATRIXCELL,
      C00002    LIKE RGRWA-MATRIXCELL,
      C00003    LIKE RGRWA-MATRIXCELL,
      C00004    LIKE RGRWA-MATRIXCELL,
      C00005    LIKE RGRWA-MATRIXCELL,
      C00006    LIKE RGRWA-MATRIXCELL,
      C00007    LIKE RGRWA-MATRIXCELL,
      C00008    LIKE RGRWA-MATRIXCELL,
      C00009    LIKE RGRWA-MATRIXCELL,
      END   OF OUT_AMOUNTS.

DATA: BEGIN OF OUT_UNITS,
      P_UT00001 LIKE RGRWA-P_UNIT_TAB,
      P_UT00002 LIKE RGRWA-P_UNIT_TAB,
      P_UT00003 LIKE RGRWA-P_UNIT_TAB,
      P_UT00004 LIKE RGRWA-P_UNIT_TAB,
      P_UT00005 LIKE RGRWA-P_UNIT_TAB,
      P_UT00006 LIKE RGRWA-P_UNIT_TAB,
      P_UT00007 LIKE RGRWA-P_UNIT_TAB,
      P_UT00008 LIKE RGRWA-P_UNIT_TAB,
      P_UT00009 LIKE RGRWA-P_UNIT_TAB,
      END   OF OUT_UNITS.
DATA: BEGIN OF OUT_KEY,
      REPORT(2).
      INCLUDE STRUCTURE VAR_SORT_KEY.
      INCLUDE STRUCTURE ROW_SORT_KEY.
      INCLUDE STRUCTURE COL_SORT_KEY.
DATA: END   OF OUT_KEY.
TYPES: BEGIN OF OUTC.
       INCLUDE STRUCTURE OUT_KEY.
TYPES: P_OUTA LIKE SY-TABIX,
       P_OUTD LIKE SY-TABIX,
       END   OF OUTC.
DATA:  OUTC TYPE STANDARD TABLE OF OUTC
            WITH DEFAULT KEY
            INITIAL SIZE 100 WITH HEADER LINE.
DATA: BEGIN OF OUTA OCCURS 0.
      INCLUDE STRUCTURE OUT_ATTR.
DATA: END OF OUTA.

DATA: BEGIN OF OUTD OCCURS 0.
      INCLUDE STRUCTURE OUT_UNITS.
      INCLUDE STRUCTURE OUT_AMOUNTS.
DATA: X_DETAIL TYPE C.
DATA: END   OF OUTD.

*.........output-table.................................................*

DATA: BEGIN OF OUT OCCURS 50.
DATA: REPORT(2),
      LSEQNR(3),
      L001_SI TYPE RWPSETM, L001_R(3), L001_S(24), L001_L(3),
      L002_SI TYPE RWPSETM, L002_R(3), L002_S(24), L002_L(3),
      L003_SI TYPE RWPSETM, L003_R(3), L003_S(24), L003_L(3),
      L004_SI TYPE RWPSETM, L004_R(3), L004_S(24), L004_L(3),
      CINDEX(4),
      L001_I TYPE I, L001_T(1), TOTAL_LEVEL001(3), L001_IBV_LEVEL(3),
      L002_I TYPE I, L002_T(1), TOTAL_LEVEL002(3), L002_IBV_LEVEL(3),
      L003_I TYPE I, L003_T(1), TOTAL_LEVEL003(3), L003_IBV_LEVEL(3),
      L004_I TYPE I, L004_T(1), TOTAL_LEVEL004(3), L004_IBV_LEVEL(3),
      KEEP_DIM(2),
      ZSF(1),
      FORMULA_INDEX TYPE RWPSETM,
      DIM_F(2),
      SUPPRESS(1),
      FIELD(4)    TYPE C,
      FROMP       TYPE I,
      TOP         TYPE I,
      POS(2)      TYPE C,
      IBV_FLAG(1) TYPE C,
      AMOUNT      LIKE RGRWA-MATRIXCELL,
      P_UNIT_TAB  LIKE RGRWA-P_UNIT_TAB,
      C00001    LIKE RGRWA-MATRIXCELL,
      P_UT00001 LIKE RGRWA-P_UNIT_TAB,
      END OF OUT.

*.........Output-Table-2...............................................*

DATA: BEGIN OF OUT2 OCCURS 0.
DATA: REPORT(2),
      LSEQNR(3),
      L001_SI TYPE RWPSETM, L001_R(3), L001_S(24), L001_L(3),
      L002_SI TYPE RWPSETM, L002_R(3), L002_S(24), L002_L(3),
      L003_SI TYPE RWPSETM, L003_R(3), L003_S(24), L003_L(3),
      L004_SI TYPE RWPSETM, L004_R(3), L004_S(24), L004_L(3),
      CINDEX(4),
*         end of report row address key                                *
      L001_I TYPE I, L001_T(1), TOTAL_LEVEL001(3), L001_IBV_LEVEL(3),
      L002_I TYPE I, L002_T(1), TOTAL_LEVEL002(3), L002_IBV_LEVEL(3),
      L003_I TYPE I, L003_T(1), TOTAL_LEVEL003(3), L003_IBV_LEVEL(3),
      L004_I TYPE I, L004_T(1), TOTAL_LEVEL004(3), L004_IBV_LEVEL(3),
      KEEP_DIM(2),
      ZSF(1),
      FORMULA_INDEX TYPE RWPSETM,
      DIM_F(2),
      SUPPRESS(1),
*         end of collect key                                           *
      C00001       LIKE RGRWA-MATRIXCELL,
      P_UT00001    LIKE RGRWA-P_UNIT_TAB,
      C00002       LIKE RGRWA-MATRIXCELL,
      P_UT00002    LIKE RGRWA-P_UNIT_TAB,
      C00003       LIKE RGRWA-MATRIXCELL,
      P_UT00003    LIKE RGRWA-P_UNIT_TAB,
      C00004       LIKE RGRWA-MATRIXCELL,
      P_UT00004    LIKE RGRWA-P_UNIT_TAB,
      C00005       LIKE RGRWA-MATRIXCELL,
      P_UT00005    LIKE RGRWA-P_UNIT_TAB,
      C00006       LIKE RGRWA-MATRIXCELL,
      P_UT00006    LIKE RGRWA-P_UNIT_TAB,
      C00007       LIKE RGRWA-MATRIXCELL,
      P_UT00007    LIKE RGRWA-P_UNIT_TAB,
      C00008       LIKE RGRWA-MATRIXCELL,
      P_UT00008    LIKE RGRWA-P_UNIT_TAB,
      C00009       LIKE RGRWA-MATRIXCELL,
      P_UT00009    LIKE RGRWA-P_UNIT_TAB,
      END OF OUT2.
DATA: COMP_OUT2_C00001   TYPE I VALUE 040,
      NUM_OUT2_CNNNNN    TYPE I VALUE 0009, "MAX-COLUMNS
      OUT_KEYLENGTH      TYPE I VALUE 0169,
      COLLECT_KEY_LENGTH TYPE I VALUE 0229.

*.........worktable for adding entries.................................*

DATA: BEGIN OF OUT2_WRK.
      INCLUDE STRUCTURE OUT2.
DATA: END OF OUT2_WRK.

*.........summary table................................................*

DATA: BEGIN OF SUM OCCURS 0.
      INCLUDE STRUCTURE OUT2.
DATA: END OF SUM.

*.........amount-fields of OUT-tables..................................*

DATA: BEGIN OF OUT_AM,
         C00001    LIKE RGRWA-MATRIXCELL,
         C00002    LIKE RGRWA-MATRIXCELL,
         C00003    LIKE RGRWA-MATRIXCELL,
         C00004    LIKE RGRWA-MATRIXCELL,
         C00005    LIKE RGRWA-MATRIXCELL,
         C00006    LIKE RGRWA-MATRIXCELL,
         C00007    LIKE RGRWA-MATRIXCELL,
         C00008    LIKE RGRWA-MATRIXCELL,
         C00009    LIKE RGRWA-MATRIXCELL,
      END OF OUT_AM.
DATA: BEGIN OF VARIATIONS,
         DUMMY(1) TYPE C,
      END OF VARIATIONS.
DATA: VARIATIONS_IBV LIKE VARIATIONS.

*......... table to collect variations from table OUT2 ................*

DATA: BEGIN OF OUT2_VAR OCCURS 0.
      INCLUDE STRUCTURE VARIATIONS.
DATA: P_OUT2      LIKE SY-TABIX, "pointer into OUT2
      C_OUT2      LIKE SY-TABIX, "counter into OUT2
      END   OF OUT2_VAR.

*......... table to collect variations from table SUM .................*

DATA: BEGIN OF SUM_VAR OCCURS 0.
      INCLUDE STRUCTURE VARIATIONS.
      DATA: END   OF SUM_VAR.

*......... table to collect variations for form print .................*

DATA: BEGIN OF VALID_VARIATIONS OCCURS 0,
      REPORT LIKE OUT2-REPORT.
      INCLUDE STRUCTURE VARIATIONS.
      DATA: END   OF VALID_VARIATIONS.

*.........global IBV flag for selection sets...........................*

DATA R01_GLOBAL_IBV_FLAG(1) TYPE C.
DATA R02_GLOBAL_IBV_FLAG(1) TYPE C.
DATA R03_GLOBAL_IBV_FLAG(1) TYPE C.

*.........definition of extract........................................*

FIELD-GROUPS: HEADER, OUT_DATA.

*.........counters for value entries for set variables.................*

DATA VCOUNT01 TYPE I.
DATA VCOUNT02 TYPE I.
DATA VCOUNT03 TYPE I.
DATA VCOUNT04 TYPE I.

DATA: BEGIN OF COMMON PART OUT2.


*.........output table for edition.....................................*

DATA: BEGIN OF OUT_ED OCCURS 0.
DATA: REPORT(2),
      LSEQNR(3),
      L001_S(24), L001_L(3),
      L002_S(24), L002_L(3),
      L003_S(24), L003_L(3),
      L004_S(24), L004_L(3),
      L001_I TYPE RWPSETM, L001_T(1),
      L002_I TYPE RWPSETM, L002_T(1),
      L003_I TYPE RWPSETM, L003_T(1),
      L004_I TYPE RWPSETM, L004_T(1),
      C00001    LIKE RGRWA-MATRIXCELL,
      C00002    LIKE RGRWA-MATRIXCELL,
      C00003    LIKE RGRWA-MATRIXCELL,
      C00004    LIKE RGRWA-MATRIXCELL,
      C00005    LIKE RGRWA-MATRIXCELL,
      C00006    LIKE RGRWA-MATRIXCELL,
      C00007    LIKE RGRWA-MATRIXCELL,
      C00008    LIKE RGRWA-MATRIXCELL,
      C00009    LIKE RGRWA-MATRIXCELL,
      P_UT00001 LIKE RGRWA-P_UNIT_TAB,
      P_UT00002 LIKE RGRWA-P_UNIT_TAB,
      P_UT00003 LIKE RGRWA-P_UNIT_TAB,
      P_UT00004 LIKE RGRWA-P_UNIT_TAB,
      P_UT00005 LIKE RGRWA-P_UNIT_TAB,
      P_UT00006 LIKE RGRWA-P_UNIT_TAB,
      P_UT00007 LIKE RGRWA-P_UNIT_TAB,
      P_UT00008 LIKE RGRWA-P_UNIT_TAB,
      P_UT00009 LIKE RGRWA-P_UNIT_TAB,
      CINDEX(4),
      FORMULA_INDEX TYPE RWPSETM,
      SUPPRESS(1).
DATA: END   OF OUT_ED.
DATA: OUT_ED_OFFSET TYPE I VALUE 018,
      OUT_ED_N_AMNT TYPE I VALUE 009.

*......... OUT2 directory for (variation) reports .....................*

DATA: BEGIN OF OUT2_DIR_KEY,
      REPORT      LIKE OUT2-REPORT,
      END   OF OUT2_DIR_KEY.

DATA: BEGIN OF OUT2_DIR OCCURS 0.
      INCLUDE STRUCTURE OUT2_DIR_KEY.
DATA: P_OUT2      LIKE SY-TABIX, "pointer into table OUT2
      C_OUT2      LIKE SY-TABIX, "counter into table OUT2
      VARIND      LIKE SY-INDEX, "index of variation report
      AUTH_LEVEL  TYPE C,        "authority level
      END   OF OUT2_DIR.

DATA: OUT2_DIR_INDEX LIKE SY-TABIX.

*......... size and number of OUT2 blocks in INDX/memory ..............*

DATA: BEGIN OF OUT2_BLOCKS,
      LINES       LIKE SY-TFILL,  "size of OUT2 blocks (lines)
      COUNT       LIKE SY-INDEX,  "number of OUT2 blocks
      END   OF OUT2_BLOCKS.

DATA: END   OF COMMON PART.

TABLES: ADMI_FILES.
TABLES: T804F.

*......... value variables ............................................*

SELECTION-SCREEN BEGIN OF BLOCK VALUE_SELECTION
                 WITH FRAME TITLE TEXT-003.
  PARAMETERS: %4FFIKRS LIKE FMRBCS-RFIKRS.
  PARAMETERS: %4FFYEAR LIKE FMRBCS-RYEAR.
  PARAMETERS: %0S-PERF LIKE FMRBCS-RPMAX.
  PARAMETERS: %4PERID  LIKE FMRBCS-RPMAX.
SELECTION-SCREEN END OF BLOCK VALUE_SELECTION.


*......... set variables ..............................................*

SELECTION-SCREEN BEGIN OF BLOCK SET_SELECTION
                 WITH FRAME TITLE TEXT-004.
  PARAMETERS: %4FFUND  LIKE RGSBS-SETNR.
  SELECT-OPTIONS _4FFUND  FOR FMRBCS-RFUND .
  PARAMETERS: %4FFICTR LIKE RGSBS-SETNR.
  SELECT-OPTIONS _4FFICTR FOR FMRBCS-RFUNDSCTR .
  PARAMETERS: %4FFIPEX LIKE RGSBS-SETNR.
  SELECT-OPTIONS _4FFIPEX FOR FMRBCS-RCMMTITEM .
  PARAMETERS: %4FFPROG LIKE RGSBS-SETNR.
  SELECT-OPTIONS _4FFPROG FOR FMRBCS-RMEASURE .
SELECTION-SCREEN END OF BLOCK SET_SELECTION.
* eject
*----------------------------------------------------------------------*
*.........copy of include FGRWFSP1.....................................*
*----------------------------------------------------------------------*

***INCLUDE FGRWFSP1 .

*----------------------------------------------------------------------*
*          fix parameters (JjjjjmmX, JjjjjmmS)                         *
*----------------------------------------------------------------------*

*......... extract parameters (to save new extract) ...................
  SELECTION-SCREEN BEGIN OF BLOCK extract_params_xs
                   WITH FRAME TITLE text-171.
  PARAMETERS:
    indxt          LIKE rgrwa-indxt                  MODIF ID in1,
    indxn          LIKE grix_txt-ltext               MODIF ID in1,
    valdate        LIKE grep_param-valdate           MODIF ID in1,
    valperio       LIKE grep_param-valperio          MODIF ID in1,
    statusau       LIKE grep_param-status_au         MODIF ID in1.
  SELECTION-SCREEN END OF BLOCK extract_params_xs.

*......... archiving parameters .......................................
  DATA: arch_object LIKE arch_obj-object.
  SELECTION-SCREEN BEGIN OF BLOCK arch_params_xs
                   WITH FRAME TITLE text-176.
  PARAMETERS:
    xusedb         LIKE rfpdo_dtin-xusedb            MODIF ID in3,
    xusear         LIKE rfpdo_dtin-xusear            MODIF ID in3,
    xuseas         TYPE boole_d                      MODIF ID in3.
  SELECT-OPTIONS:
    archobjs       FOR arch_object                   MODIF ID in3,
    arch_sel       FOR admi_files-archiv_key         MODIF ID in3.
  SELECTION-SCREEN END OF BLOCK arch_params_xs.

*......... currency conversion ........................................
  SELECTION-SCREEN BEGIN OF BLOCK curr_conv_xs
                   WITH FRAME TITLE text-177.
  PARAMETERS:
    pscccurr        TYPE rgrwa-rw_curr                    MODIF ID in7,
    psccrate        TYPE rgrwa-rw_rate                    MODIF ID in7,
    psccdate        TYPE rgrwa-rw_date                    MODIF ID in7.
  SELECT-OPTIONS:
    sscckeyf        FOR t804f-dsentry                     MODIF ID in7.
  SELECTION-SCREEN END OF BLOCK curr_conv_xs.

*......... others .....................................................
  SELECTION-SCREEN BEGIN OF BLOCK other_params_xs
                   WITH FRAME TITLE text-170.
  PARAMETERS:
    edition        LIKE rgrwa-edition    DEFAULT 'X' MODIF ID in3,
    stats(1)       TYPE c                DEFAULT 'X' MODIF ID in3.
  SELECTION-SCREEN END OF BLOCK other_params_xs.

*.........end of include FGRWFSP1......................................*

* eject
*----------------------------------------------------------------------*
*.........copy of include FGRWFXP1.....................................*
*----------------------------------------------------------------------*

***INCLUDE FGRWFXP1 .

*----------------------------------------------------------------------*
*          fix parameters for JjjjjmmX, JjjjjmmS, JjjjjmmE             *
*----------------------------------------------------------------------*

*......... output parameters ..........................................
  SELECTION-SCREEN BEGIN OF BLOCK output_params_xse
                   WITH FRAME TITLE text-173.
  PARAMETERS:
    out_devi       TYPE out_devi         DEFAULT '0'      MODIF ID in2,
    out_form       TYPE out_form         DEFAULT '0'      MODIF ID in2,
* outform1       TYPE out_form1        DEFAULT '0'      MODIF ID in2,
                                                    "delete note 1448984
    outform1       TYPE out_form1        DEFAULT ''       MODIF ID in2,
                                                    "insert note 1448984
    out_type       LIKE lgrwo-pc_format  DEFAULT ''       MODIF ID in2,
    out_file       LIKE lgrwo-out_file   DEFAULT ''       MODIF ID in2,
    out_appd       TYPE rw_out_appd      DEFAULT ''       MODIF ID in2,
    rec_key        LIKE swotobjid-objkey DEFAULT ''       MODIF ID in2,
    nodialog       TYPE c                DEFAULT ''       MODIF ID in2,
    pnoprint       TYPE c                DEFAULT ''       MODIF ID in2,
*>>>>>>> begin insert (note 308204) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    cb_prog        TYPE progname         DEFAULT ''       MODIF ID in2,
    cb_form        TYPE formname         DEFAULT ''       MODIF ID in2.
*<<<<<<< end insert (note 308204) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  SELECTION-SCREEN END OF BLOCK output_params_xse.

*......... selected reports ...........................................
  SELECTION-SCREEN BEGIN OF BLOCK selected_reports_xse
                   WITH FRAME TITLE text-174.
  SELECT-OPTIONS:
    p_index        FOR sy-tabix                           MODIF ID in3.
  SELECTION-SCREEN END OF BLOCK selected_reports_xse.

*......... date for master data .......................................
  SELECTION-SCREEN BEGIN OF BLOCK master_data_date_xse
                   WITH FRAME TITLE text-175.
  PARAMETERS:
    mt-date        LIKE rgrwa-masterdate                  MODIF ID in3.
  SELECTION-SCREEN END OF BLOCK master_data_date_xse.

*......... currency conversion ........................................
  SELECTION-SCREEN BEGIN OF BLOCK curr_conv_xse
                   WITH FRAME TITLE text-177.
  PARAMETERS:
    pecccurr       TYPE rgrwa-rw_curr                     MODIF ID in7,
    peccrate       TYPE rgrwa-rw_rate                     MODIF ID in7,
    peccdate       TYPE rgrwa-rw_date                     MODIF ID in7.
  SELECT-OPTIONS:
    secckeyf       FOR t804f-dsentry                      MODIF ID in7.
  SELECTION-SCREEN END OF BLOCK curr_conv_xse.

*....... common extract parameters ....................................
  SELECTION-SCREEN BEGIN OF BLOCK extract_params_xse
                   WITH FRAME TITLE text-171.
  PARAMETERS:
    indxpwd        LIKE grep_param-password1              MODIF ID in1.
  SELECTION-SCREEN END OF BLOCK extract_params_xse.

*....... Report/report-interface ......................................
  SELECTION-SCREEN BEGIN OF BLOCK rc_params_xse
                   WITH FRAME.
  PARAMETERS:
    rc_mode        TYPE sysubrc DEFAULT 0                 MODIF ID in3.
*                  - This parameter is completely ignored if RRI is not
*                    active.
*                  - If RRI is active:
*                    - The parameters of the X-report are initialized
*                      according to the sender data as usual
*                      (independend of the value of RC_MODE).
*                    - If RC_MODE = 0 (default), the sender data is
*                      also used for the S- and E-report as usual.
*                    - If RC_MODE = 4, the sender data is completely
*                      ignored by the S- and E-report.
*                  RC_MODE = 4 is recommended if the RRI is used to
*                  submit report groups generically (e.g. for workplace
*                  integration)
  SELECTION-SCREEN END OF BLOCK rc_params_xse.

*.........end of include FGRWFXP1......................................*

* eject
*----------------------------------------------------------------------*
*.........INITIALIZATION...............................................*
*----------------------------------------------------------------------*

INITIALIZATION.


*.........Check for correct client.....................................*

  IF SY-MANDT NE '220'.
    MESSAGE S019 WITH SY-MANDT '220' SY-REPID.
    LEAVE PROGRAM.
  ENDIF.
  CALL_MODE = 0.
  PERFORM EV_INITIALIZATION.

*......... value request for %4FFUND. .................................*

AT SELECTION-SCREEN ON VALUE-REQUEST FOR %4FFUND .
  call function 'G_RW_SET_SELECT'
       exporting
            field_name           = 'RFUND                         '
            no_field_name_change = 'X'
            table                = 'FMRBCS                        '
            no_table_name_change = 'X'
            typelist             = 'BS'
            show_field_name      = ' '
       importing
            setid                = %4FFUND
       exceptions
            no_sets              = 1
            no_set_picked        = 2.

  CASE SY-SUBRC.
    WHEN 1. MESSAGE S003.
    WHEN 2. MESSAGE S004.
  ENDCASE.


*......... value request for %4FFICTR. ................................*

AT SELECTION-SCREEN ON VALUE-REQUEST FOR %4FFICTR .
  call function 'G_RW_SET_SELECT'
       exporting
            field_name           = 'RFUNDSCTR                     '
            no_field_name_change = 'X'
            table                = 'FMRBCS                        '
            no_table_name_change = 'X'
            typelist             = 'BS'
            show_field_name      = ' '
       importing
            setid                = %4FFICTR
       exceptions
            no_sets              = 1
            no_set_picked        = 2.

  CASE SY-SUBRC.
    WHEN 1. MESSAGE S003.
    WHEN 2. MESSAGE S004.
  ENDCASE.


*......... value request for %4FFIPEX. ................................*

AT SELECTION-SCREEN ON VALUE-REQUEST FOR %4FFIPEX .
  call function 'G_RW_SET_SELECT'
       exporting
            field_name           = 'RCMMTITEM                     '
            no_field_name_change = 'X'
            table                = 'FMRBCS                        '
            no_table_name_change = 'X'
            typelist             = 'BS'
            show_field_name      = ' '
       importing
            setid                = %4FFIPEX
       exceptions
            no_sets              = 1
            no_set_picked        = 2.

  CASE SY-SUBRC.
    WHEN 1. MESSAGE S003.
    WHEN 2. MESSAGE S004.
  ENDCASE.


*......... value request for %4FFPROG. ................................*

AT SELECTION-SCREEN ON VALUE-REQUEST FOR %4FFPROG .
  call function 'G_RW_SET_SELECT'
       exporting
            field_name           = 'RMEASURE                      '
            no_field_name_change = 'X'
            table                = 'FMRBCS                        '
            no_table_name_change = 'X'
            typelist             = 'BS'
            show_field_name      = ' '
       importing
            setid                = %4FFPROG
       exceptions
            no_sets              = 1
            no_set_picked        = 2.

  CASE SY-SUBRC.
    WHEN 1. MESSAGE S003.
    WHEN 2. MESSAGE S004.
  ENDCASE.


*.........general input checks.........................................*

AT SELECTION-SCREEN.

  perform params_get changing s_seltab.

  IF SY-CALLD = ' ' AND INDXT = ' ' AND EDITION = ' '.
    MESSAGE E420.
  ENDIF.

  PERFORM E07_CHECK_PARAMETERS(SAPFGRWE) USING OUT_DEVI
                                               OUT_FORM.
  perform e48_check_mailing_parameters(sapfgrwe)
          using  out_devi indxt rec_key.

*.........check input for set variables................................*

  IF %4FFUND <> SPACE.
    PERFORM CHECK_EXISTENCE_OF_SET
            USING 'FMRBCS ' %4FFUND 'RFUND '.
  ENDIF.
  DESCRIBE TABLE _4FFUND  LINES VCOUNT01.
  IF ( VCOUNT01 > 0 AND %4FFUND <> SPACE ).
    PERFORM E59_GLOBAL_TEXT(SAPFGSB0)
      USING '&4FFUND ' SY-LANGU STRING.
    IF STRING IS INITIAL.
      STRING = '&4FFUND '.
    ENDIF.
    SET CURSOR FIELD '%4FFUND '.
    MESSAGE E620 WITH STRING(30).
  ENDIF.
  IF %4FFICTR <> SPACE.
    PERFORM CHECK_EXISTENCE_OF_SET
            USING 'FMRBCS ' %4FFICTR 'RFUNDSCTR '.
  ENDIF.
  DESCRIBE TABLE _4FFICTR LINES VCOUNT02.
  IF ( VCOUNT02 > 0 AND %4FFICTR <> SPACE ).
    PERFORM E59_GLOBAL_TEXT(SAPFGSB0)
      USING '&4FFICTR' SY-LANGU STRING.
    IF STRING IS INITIAL.
      STRING = '&4FFICTR'.
    ENDIF.
    SET CURSOR FIELD '%4FFICTR'.
    MESSAGE E620 WITH STRING(30).
  ENDIF.
  IF %4FFIPEX <> SPACE.
    PERFORM CHECK_EXISTENCE_OF_SET
            USING 'FMRBCS ' %4FFIPEX 'RCMMTITEM '.
  ENDIF.
  DESCRIBE TABLE _4FFIPEX LINES VCOUNT03.
  IF ( VCOUNT03 > 0 AND %4FFIPEX <> SPACE ).
    PERFORM E59_GLOBAL_TEXT(SAPFGSB0)
      USING '&4FFIPEX' SY-LANGU STRING.
    IF STRING IS INITIAL.
      STRING = '&4FFIPEX'.
    ENDIF.
    SET CURSOR FIELD '%4FFIPEX'.
    MESSAGE E620 WITH STRING(30).
  ENDIF.
  IF %4FFPROG <> SPACE.
    PERFORM CHECK_EXISTENCE_OF_SET
            USING 'FMRBCS ' %4FFPROG 'RMEASURE '.
  ENDIF.
  DESCRIBE TABLE _4FFPROG LINES VCOUNT04.
  IF ( VCOUNT04 > 0 AND %4FFPROG <> SPACE ).
    PERFORM E59_GLOBAL_TEXT(SAPFGSB0)
      USING '&4FFPROG' SY-LANGU STRING.
    IF STRING IS INITIAL.
      STRING = '&4FFPROG'.
    ENDIF.
    SET CURSOR FIELD '%4FFPROG'.
    MESSAGE E620 WITH STRING(30).
  ENDIF.

*.........Replace globals in TVAL......................................*

* The following line was splitted
 PERFORM E90_REPLACE_GLOBAL(SAPFGSB0) USING
 'FMRBCS                        ' ' '
                                           '&4FFIKRS' %4FFIKRS.
* The following line was splitted
 PERFORM E90_REPLACE_GLOBAL(SAPFGSB0) USING
 'FMRBCS                        ' ' '
                                           '&4FFYEAR' %4FFYEAR.
* The following line was splitted
 PERFORM E90_REPLACE_GLOBAL(SAPFGSB0) USING
 'FMRBCS                        ' ' '
                                           '&0S-PERF' %0S-PERF.
* The following line was splitted
 PERFORM E90_REPLACE_GLOBAL(SAPFGSB0) USING
 'FMRBCS                        ' ' '
                                           '&4PERID ' %4PERID .
* The following line was splitted
 PERFORM E91_UPDATE_GLOBALS(SAPFGSB0) USING
 'FMRBCS                        ' ' '.
  IF C-SUBRC <> 0.
    PERFORM FORMULA_VARIABLE_ERROR
            USING SPACE C-SUBRC 'E'.
  ENDIF.


  IF NOT XUSEAR IS INITIAL.
    PERFORM E23_SET_ARCHIVE_MODE(SAPFGRWS) TABLES ARCHOBJS.
  ELSE.
    CLEAR G_ARCHIVE_FLAG.
  ENDIF.
  IF NOT XUSEAS IS INITIAL.
    G_ARCHIVE_FLAG = 'X'.
  ENDIF.
* eject
*----------------------------------------------------------------------*
*.........Set.defaults.for.execute+print...............................*
*----------------------------------------------------------------------*

  IF SY-UCOMM = 'PRIN' AND
     EDITION <> SPACE  AND
     ( SY-LINCT = 0 OR SY-LINSZ = 0 ).
    NEW-PAGE LINE-COUNT 0065 LINE-SIZE 0160.
  ENDIF.

  IF RC_CALL = 0 AND RC_SUBRC <> 0.
    RC_SUBRC = 0.
    MESSAGE W053 WITH TEXT-003.
  ENDIF.

* eject
*----------------------------------------------------------------------*
*.........main program.................................................*
*----------------------------------------------------------------------*

START-OF-SELECTION.

*.........process event................................................*

  PERFORM EV_START_OF_SELECTION.

* eject
*----------------------------------------------------------------------*
*.........Event END-OF-SELECTION.......................................*
*----------------------------------------------------------------------*

END-OF-SELECTION.

  PERFORM EV_END_OF_SELECTION.

* eject
*----------------------------------------------------------------------*
*......... Event AT USER-COMMAND ......................................*
*----------------------------------------------------------------------*

AT USER-COMMAND.

  PERFORM EV_AT_USER_COMMAND(GP006NZKH45RLMZ0DDBKQFQ6YY9220).

* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: Main program                                       *
*----------------------------------------------------------------------*
FORM MAIN USING I_SELTAB TYPE GRW_T_PARAMS.

  CALL_MODE = 1.
  PERFORM EV_INITIALIZATION.
  PERFORM PARAMS_SET USING I_SELTAB.

  IF NOT XUSEAR IS INITIAL.
    PERFORM E23_SET_ARCHIVE_MODE(SAPFGRWS) TABLES ARCHOBJS.
  ELSE.
    CLEAR G_ARCHIVE_FLAG.
  ENDIF.
  IF NOT XUSEAS IS INITIAL.
    G_ARCHIVE_FLAG = 'X'.
  ENDIF.
  PERFORM EV_START_OF_SELECTION.
  PERFORM EV_END_OF_SELECTION.

ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: INITIALIZATION                                     *
*----------------------------------------------------------------------*
FORM EV_INITIALIZATION.
  data: lt_mesg type tsmesg.


*......... Avoid db locks in batch if report has just been compiled ...*

  IF NOT SY-BATCH IS INITIAL.
    CALL FUNCTION 'DB_COMMIT'.
  ENDIF.

  PERFORM DUMMY(SAPFFMRBCS) IF FOUND.
  REPORT_GROUP = 'Z302'.
  PROGRAM_VERSION = '00000001'.
  G_S_GRRT_KEY-RGJNR = REPORT_GROUP.
  G_S_GRRT_KEY-versn = program_version.
  RWTAB_CLASS = 'I'.
  REP_TABLE = 'FMRBCS                        '.
  ADDITIONAL_TABLE = '                              '.
  SL_REPORT = 'GP006NZKH45RLMZ0DDBKQFQ6SMP220'.
  ED_REPORT = 'GP006NZKH45RLMZ0DDBKQFQ6YY9220'.
  PERFORM INITIALIZE.
  CALL FUNCTION 'G_JOB_AUTHORITY_CHECK'
      EXPORTING ACTVT    = '03'
                RGJNR    = REPORT_GROUP.
  CUR-TAB = 'FMRBCS                        '.

  IF CALL_MODE EQ 0.

*.........Import of data...............................................*

    G_S_GRRT_KEY-TYPE = GRWJ_C_DATATYPE_SETS.
    CALL FUNCTION 'G_SET_IMPORT'
         EXPORTING
              SRTFD                          = ''
              GRRT_KEY                       = G_S_GRRT_KEY
         EXCEPTIONS
              IMPORT_NOT_SUCCESSFUL          = 1
              EVALERROR_FIELD_TOO_SHORT      = 2
              EVALERROR_CONVERSION_FAILED    = 3
              EVALERROR_ARITHMETIC_EXCEPTION = 4
              FROM_GT_TO_DUE_TO_VARIABLE     = 5.
    IF SY-SUBRC NE 0.
      PERFORM FORMULA_VARIABLE_ERROR USING SPACE SY-SUBRC 'W'.
    ENDIF.
    G_S_GRRT_KEY-TYPE = GRWJ_C_DATATYPE_JOBTABLES.
    JOBTABLES IMPORT FROM G_S_GRRT_KEY.
    G_S_GRRT_KEY-TYPE = GRWJ_C_DATATYPE_GENTABLES.
    GENTABLES IMPORT FROM G_S_GRRT_KEY.
  ENDIF.
  G_S_GRRT_KEY-TYPE = GRWJ_C_DATATYPE_COLUMNS_SEL.
  SCOLTABLES IMPORT FROM G_S_GRRT_KEY.

DATA L_REC LIKE RSTIREC.
L_REC-RTOOL = 'RW'.
L_REC-RONAM = REPORT_GROUP.
CALL FUNCTION 'G_REPORT_INTERFACE_INIT'
     EXPORTING MODE         = '1'     "init+backup
               TABLE        = REP_TABLE
               PERIOD_FIELD = 'RPMAX                         '
               RECEIVER     = L_REC
     IMPORTING SUBRC        = RC_CALL
     TABLES    IT_FIELDR    = IT_FIELDS.
IF RC_CALL = 0.

*.........get number of sender dimensions..............................*

  CALL FUNCTION 'G_REPORT_GET_DIMENSION_COUNT'
       EXPORTING DIM_TYPE  = 'A'
       IMPORTING DIM_COUNT = RC_DIM_COUNT.
ENDIF.
  IF CALL_MODE EQ 0.

*.........initialize variables.........................................*

    PERFORM INITIALIZE_VARIABLES.
  ENDIF.
ENDFORM. "INITIALIZATION
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: Process_event_START-OF-SELECTI                     *
*----------------------------------------------------------------------*
FORM EV_START_OF_SELECTION.

*......... set timer ..................................................*

  GET TIME FIELD TIME_SEL_0.

*......... get input parameters .......................................*

  perform params_get changing s_seltab.
  perform check_x_seltab
          using s_seltab
          changing x_seltab variables[].
  x_seltab_0 = x_seltab.
  IF RC_CALL = 0 AND RC_MODE = 4.
    RC_CALL = 4.
  ENDIF.

*......... set date for master data ...................................*

  IF MT-DATE IS INITIAL.
    MT-DATE = SY-DATLO.
  ENDIF.
  PERFORM E23_SET_MASTERDATE(SAPFGRWS) USING MT-DATE.
  IF CALL_MODE EQ 0.

*.........generate temporary sets......................................*

    PERFORM E59_GLOBAL_TEXT(SAPFGSB0)
      USING '&4FFUND ' SY-LANGU STRING.
    IF %4FFUND  IS INITIAL.
      %4FFUND  = '0002$S01-B-Z3020'.
      PERFORM E45_GENERATE_SET_FROM_VALUES(SAPFGRWS)
              TABLES _4FFUND
              USING     10 'RFUND ' 'FMRBCS ' STRING(30)
                        %4FFUND .
    ENDIF.

    PERFORM E59_GLOBAL_TEXT(SAPFGSB0)
      USING '&4FFICTR' SY-LANGU STRING.
    IF %4FFICTR IS INITIAL.
      %4FFICTR = '0002$S02-B-Z3020'.
      PERFORM E45_GENERATE_SET_FROM_VALUES(SAPFGRWS)
              TABLES _4FFICTR
              USING     16 'RFUNDSCTR ' 'FMRBCS ' STRING(30)
                        %4FFICTR.
    ENDIF.

    PERFORM E59_GLOBAL_TEXT(SAPFGSB0)
      USING '&4FFIPEX' SY-LANGU STRING.
    IF %4FFIPEX IS INITIAL.
      %4FFIPEX = '0002$S03-B-Z3020'.
      PERFORM E45_GENERATE_SET_FROM_VALUES(SAPFGRWS)
              TABLES _4FFIPEX
              USING     24 'RCMMTITEM ' 'FMRBCS ' STRING(30)
                        %4FFIPEX.
    ENDIF.

    PERFORM E59_GLOBAL_TEXT(SAPFGSB0)
      USING '&4FFPROG' SY-LANGU STRING.
    IF %4FFPROG IS INITIAL.
      %4FFPROG = '0002$S04-B-Z3020'.
      PERFORM E45_GENERATE_SET_FROM_VALUES(SAPFGRWS)
              TABLES _4FFPROG
              USING     24 'RMEASURE ' 'FMRBCS ' STRING(30)
                        %4FFPROG.
    ENDIF.

  ENDIF.
  SELECTION-DATE  = SY-DATUM.
  SELECTION-TIME  = SY-UZEIT.
  SELECTION-USER  = SY-UNAME.
  CSTAT-DATE = SELECTION-DATE.
  CSTAT-TIME = SELECTION-TIME.
  CSTAT-USER = SELECTION-USER.
  KEY_CONVERSION = ' '.
  ALIAS_FLAG = ' '.

*.........Replace set variables in TMSB................................*

  IF CALL_MODE EQ 0.
*         PERFORM E89_TEST_REPLACEMENT_SET(SAPFGSB0)                   *
*         USING REP_TABLE %4FFUND  'RFUND                         ' SU *
*         %4FFUND = C-TMSB-SETNR.                                      *
    CALL FUNCTION 'SET_AUTHORITY'
        EXPORTING ACTION   = 'UD   '
                  TABLE    = C-TMSB-TABLE
                  SET      = %4FFUND .
    PERFORM E92_REPLACE_GLOBAL_NEW(SAPFGSB0) USING
 '&4FFUND ' %4FFUND MT-DATE.
    IF C-SUBRC = 1.
      MESSAGE S393 WITH %4FFUND .   "Set has formula
      EXIT.
    ENDIF.
*         PERFORM E89_TEST_REPLACEMENT_SET(SAPFGSB0)                   *
*         USING REP_TABLE %4FFICTR 'RFUNDSCTR                     ' SU *
*         %4FFICTR = C-TMSB-SETNR.                                     *
    CALL FUNCTION 'SET_AUTHORITY'
        EXPORTING ACTION   = 'UD   '
                  TABLE    = C-TMSB-TABLE
                  SET      = %4FFICTR.
    PERFORM E92_REPLACE_GLOBAL_NEW(SAPFGSB0) USING
 '&4FFICTR' %4FFICTR MT-DATE.
    IF C-SUBRC = 1.
      MESSAGE S393 WITH %4FFICTR.   "Set has formula
      EXIT.
    ENDIF.
*         PERFORM E89_TEST_REPLACEMENT_SET(SAPFGSB0)                   *
*         USING REP_TABLE %4FFIPEX 'RCMMTITEM                     ' SU *
*         %4FFIPEX = C-TMSB-SETNR.                                     *
    CALL FUNCTION 'SET_AUTHORITY'
        EXPORTING ACTION   = 'UD   '
                  TABLE    = C-TMSB-TABLE
                  SET      = %4FFIPEX.
    PERFORM E92_REPLACE_GLOBAL_NEW(SAPFGSB0) USING
 '&4FFIPEX' %4FFIPEX MT-DATE.
    IF C-SUBRC = 1.
      MESSAGE S393 WITH %4FFIPEX.   "Set has formula
      EXIT.
    ENDIF.
*         PERFORM E89_TEST_REPLACEMENT_SET(SAPFGSB0)                   *
*         USING REP_TABLE %4FFPROG 'RMEASURE                      ' SU *
*         %4FFPROG = C-TMSB-SETNR.                                     *
    CALL FUNCTION 'SET_AUTHORITY'
        EXPORTING ACTION   = 'UD   '
                  TABLE    = C-TMSB-TABLE
                  SET      = %4FFPROG.
    PERFORM E92_REPLACE_GLOBAL_NEW(SAPFGSB0) USING
 '&4FFPROG' %4FFPROG MT-DATE.
    IF C-SUBRC = 1.
      MESSAGE S393 WITH %4FFPROG.   "Set has formula
      EXIT.
    ENDIF.
  ENDIF.
  CLEAR STAT_USED_R01.
  CLEAR STAT_AUTH_R01.
  CLEAR STAT_USED_R02.
  CLEAR STAT_AUTH_R02.
  CLEAR STAT_USED_R03.
  CLEAR STAT_AUTH_R03.
  PERFORM PREPARE_SELECT.
  PERFORM SELECT.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: PREPARE_SELECT                                     *
*----------------------------------------------------------------------*
FORM PREPARE_SELECT.

*.........fill RANGES tables from additional sets of data fields.......*

PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000032 " 0002$Z302#######VAL0010
        USING '0002$Z302#######VAL0010' 'FMRBCS'        32 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000033 " 0002$Z302#######VAL0013
        USING '0002$Z302#######VAL0013' 'FMRBCS'        33 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000034 " 0002$Z302#######VAL0016
        USING '0002$Z302#######VAL0016' 'FMRBCS'        34 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000035 " 0002$Z302#######VAL0019
        USING '0002$Z302#######VAL0019' 'FMRBCS'        35 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000036 " 0002$Z302#######VAL0022
        USING '0002$Z302#######VAL0022' 'FMRBCS'        36 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000038 " 0002$Z302#######VAL0025
        USING '0002$Z302#######VAL0025' 'FMRBCS'        38 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000039 " 0002$Z302#######VAL0028
        USING '0002$Z302#######VAL0028' 'FMRBCS'        39 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000040 " 0002$Z302#######VAL0031
        USING '0002$Z302#######VAL0031' 'FMRBCS'        40 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000041 " 0002$Z302#######VAL0034
        USING '0002$Z302#######VAL0034' 'FMRBCS'        41 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000042 " 0002$Z302#######VAL0037
        USING '0002$Z302#######VAL0037' 'FMRBCS'        42 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000043 " 0002$Z302#######VAL0040
        USING '0002$Z302#######VAL0040' 'FMRBCS'        43 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000045 " 0002$Z302#######VAL0043
        USING '0002$Z302#######VAL0043' 'FMRBCS'        45 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000046 " 0002$Z302#######VAL0046
        USING '0002$Z302#######VAL0046' 'FMRBCS'        46 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000047 " 0002$Z302#######VAL0049
        USING '0002$Z302#######VAL0049' 'FMRBCS'        47 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000048 " 0002$Z302#######VAL0052
        USING '0002$Z302#######VAL0052' 'FMRBCS'        48 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000049 " 0002$Z302#######VAL0055
        USING '0002$Z302#######VAL0055' 'FMRBCS'        49 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000051 " 0002$Z302#######VAL0058
        USING '0002$Z302#######VAL0058' 'FMRBCS'        51 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000052 " 0002$Z302#######VAL0061
        USING '0002$Z302#######VAL0061' 'FMRBCS'        52 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000053 " 0002$Z302#######VAL0064
        USING '0002$Z302#######VAL0064' 'FMRBCS'        53 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000054 " 0002$Z302#######VAL0067
        USING '0002$Z302#######VAL0067' 'FMRBCS'        54 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000055 " 0002$Z302#######VAL0070
        USING '0002$Z302#######VAL0070' 'FMRBCS'        55 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000057 " 0002$Z302#######VAL0073
        USING '0002$Z302#######VAL0073' 'FMRBCS'        57 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000058 " 0002$Z302#######VAL0076
        USING '0002$Z302#######VAL0076' 'FMRBCS'        58 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000059 " 0002$Z302#######VAL0079
        USING '0002$Z302#######VAL0079' 'FMRBCS'        59 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000061 " 0002$Z302#######VAL0082
        USING '0002$Z302#######VAL0082' 'FMRBCS'        61 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000062 " 0002$Z302#######VAL0085
        USING '0002$Z302#######VAL0085' 'FMRBCS'        62 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000063 " 0002$Z302#######VAL0088
        USING '0002$Z302#######VAL0088' 'FMRBCS'        63 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000064 " 0002$Z302#######VAL0091
        USING '0002$Z302#######VAL0091' 'FMRBCS'        64 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000065 " 0002$Z302#######VAL0094
        USING '0002$Z302#######VAL0094' 'FMRBCS'        65 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000066 " 0002$Z302#######VAL0097
        USING '0002$Z302#######VAL0097' 'FMRBCS'        66 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000068 " 0002$Z302#######VAL0100
        USING '0002$Z302#######VAL0100' 'FMRBCS'        68 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000069 " 0002$Z302#######VAL0103
        USING '0002$Z302#######VAL0103' 'FMRBCS'        69 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000070 " 0002$Z302#######VAL0106
        USING '0002$Z302#######VAL0106' 'FMRBCS'        70 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000071 " 0002$Z302#######VAL0109
        USING '0002$Z302#######VAL0109' 'FMRBCS'        71 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000072 " 0002$Z302#######VAL0112
        USING '0002$Z302#######VAL0112' 'FMRBCS'        72 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000074 " 0002$Z302#######VAL0115
        USING '0002$Z302#######VAL0115' 'FMRBCS'        74 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000075 " 0002$Z302#######VAL0118
        USING '0002$Z302#######VAL0118' 'FMRBCS'        75 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000076 " 0002$Z302#######VAL0121
        USING '0002$Z302#######VAL0121' 'FMRBCS'        76 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000077 " 0002$Z302#######VAL0124
        USING '0002$Z302#######VAL0124' 'FMRBCS'        77 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000079 " 0002$Z302#######VAL0127
        USING '0002$Z302#######VAL0127' 'FMRBCS'        79 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000080 " 0002$Z302#######VAL0130
        USING '0002$Z302#######VAL0130' 'FMRBCS'        80 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000081 " 0002$Z302#######VAL0133
        USING '0002$Z302#######VAL0133' 'FMRBCS'        81 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000083 " 0002$Z302#######VAL0144
        USING '0002$Z302#######VAL0144' 'FMRBCS'        83 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000084 " 0002$Z302#######VAL0147
        USING '0002$Z302#######VAL0147' 'FMRBCS'        84 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000085 " 0002$Z302#######VAL0150
        USING '0002$Z302#######VAL0150' 'FMRBCS'        85 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000086 " 0002$Z302#######VAL0153
        USING '0002$Z302#######VAL0153' 'FMRBCS'        86 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000087 " 0002$Z302#######VAL0156
        USING '0002$Z302#######VAL0156' 'FMRBCS'        87 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000089 " 0002$Z302#######VAL0159
        USING '0002$Z302#######VAL0159' 'FMRBCS'        89 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000090 " 0002$Z302#######VAL0162
        USING '0002$Z302#######VAL0162' 'FMRBCS'        90 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000091 " 0002$Z302#######VAL0165
        USING '0002$Z302#######VAL0165' 'FMRBCS'        91 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000092 " 0002$Z302#######VAL0168
        USING '0002$Z302#######VAL0168' 'FMRBCS'        92 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000093 " 0002$Z302#######VAL0171
        USING '0002$Z302#######VAL0171' 'FMRBCS'        93 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000094 " 0002$Z302#######VAL0174
        USING '0002$Z302#######VAL0174' 'FMRBCS'        94 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000096 " 0002$Z302#######VAL0177
        USING '0002$Z302#######VAL0177' 'FMRBCS'        96 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000097 " 0002$Z302#######VAL0180
        USING '0002$Z302#######VAL0180' 'FMRBCS'        97 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000098 " 0002$Z302#######VAL0183
        USING '0002$Z302#######VAL0183' 'FMRBCS'        98 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000099 " 0002$Z302#######VAL0186
        USING '0002$Z302#######VAL0186' 'FMRBCS'        99 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000100 " 0002$Z302#######VAL0189
        USING '0002$Z302#######VAL0189' 'FMRBCS'       100 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000102 " 0002$Z302#######VAL0192
        USING '0002$Z302#######VAL0192' 'FMRBCS'       102 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000103 " 0002$Z302#######VAL0195
        USING '0002$Z302#######VAL0195' 'FMRBCS'       103 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000104 " 0002$Z302#######VAL0198
        USING '0002$Z302#######VAL0198' 'FMRBCS'       104 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000105 " 0002$Z302#######VAL0201
        USING '0002$Z302#######VAL0201' 'FMRBCS'       105 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000107 " 0002$Z302#######VAL0204
        USING '0002$Z302#######VAL0204' 'FMRBCS'       107 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000108 " 0002$Z302#######VAL0207
        USING '0002$Z302#######VAL0207' 'FMRBCS'       108 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000109 " 0002$Z302#######VAL0210
        USING '0002$Z302#######VAL0210' 'FMRBCS'       109 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000111 " 0002$Z302#######VAL0213
        USING '0002$Z302#######VAL0213' 'FMRBCS'       111 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000112 " 0002$Z302#######VAL0216
        USING '0002$Z302#######VAL0216' 'FMRBCS'       112 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000113 " 0002$Z302#######VAL0219
        USING '0002$Z302#######VAL0219' 'FMRBCS'       113 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000114 " 0002$Z302#######VAL0222
        USING '0002$Z302#######VAL0222' 'FMRBCS'       114 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000115 " 0002$Z302#######VAL0225
        USING '0002$Z302#######VAL0225' 'FMRBCS'       115 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000116 " 0002$Z302#######VAL0228
        USING '0002$Z302#######VAL0228' 'FMRBCS'       116 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000118 " 0002$Z302#######VAL0231
        USING '0002$Z302#######VAL0231' 'FMRBCS'       118 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000119 " 0002$Z302#######VAL0234
        USING '0002$Z302#######VAL0234' 'FMRBCS'       119 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000120 " 0002$Z302#######VAL0237
        USING '0002$Z302#######VAL0237' 'FMRBCS'       120 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000121 " 0002$Z302#######VAL0240
        USING '0002$Z302#######VAL0240' 'FMRBCS'       121 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000122 " 0002$Z302#######VAL0243
        USING '0002$Z302#######VAL0243' 'FMRBCS'       122 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000124 " 0002$Z302#######VAL0246
        USING '0002$Z302#######VAL0246' 'FMRBCS'       124 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000125 " 0002$Z302#######VAL0249
        USING '0002$Z302#######VAL0249' 'FMRBCS'       125 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000126 " 0002$Z302#######VAL0252
        USING '0002$Z302#######VAL0252' 'FMRBCS'       126 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000127 " 0002$Z302#######VAL0255
        USING '0002$Z302#######VAL0255' 'FMRBCS'       127 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000129 " 0002$Z302#######VAL0258
        USING '0002$Z302#######VAL0258' 'FMRBCS'       129 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000130 " 0002$Z302#######VAL0261
        USING '0002$Z302#######VAL0261' 'FMRBCS'       130 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000131 " 0002$Z302#######VAL0264
        USING '0002$Z302#######VAL0264' 'FMRBCS'       131 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000133 " 0002$Z302#######VAL0275
        USING '0002$Z302#######VAL0275' 'FMRBCS'       133 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000134 " 0002$Z302#######VAL0278
        USING '0002$Z302#######VAL0278' 'FMRBCS'       134 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000135 " 0002$Z302#######VAL0281
        USING '0002$Z302#######VAL0281' 'FMRBCS'       135 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000136 " 0002$Z302#######VAL0284
        USING '0002$Z302#######VAL0284' 'FMRBCS'       136 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000137 " 0002$Z302#######VAL0287
        USING '0002$Z302#######VAL0287' 'FMRBCS'       137 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000139 " 0002$Z302#######VAL0290
        USING '0002$Z302#######VAL0290' 'FMRBCS'       139 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000140 " 0002$Z302#######VAL0293
        USING '0002$Z302#######VAL0293' 'FMRBCS'       140 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000141 " 0002$Z302#######VAL0296
        USING '0002$Z302#######VAL0296' 'FMRBCS'       141 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000142 " 0002$Z302#######VAL0299
        USING '0002$Z302#######VAL0299' 'FMRBCS'       142 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000143 " 0002$Z302#######VAL0302
        USING '0002$Z302#######VAL0302' 'FMRBCS'       143 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000144 " 0002$Z302#######VAL0305
        USING '0002$Z302#######VAL0305' 'FMRBCS'       144 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000146 " 0002$Z302#######VAL0308
        USING '0002$Z302#######VAL0308' 'FMRBCS'       146 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000147 " 0002$Z302#######VAL0311
        USING '0002$Z302#######VAL0311' 'FMRBCS'       147 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000148 " 0002$Z302#######VAL0314
        USING '0002$Z302#######VAL0314' 'FMRBCS'       148 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000149 " 0002$Z302#######VAL0317
        USING '0002$Z302#######VAL0317' 'FMRBCS'       149 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000150 " 0002$Z302#######VAL0320
        USING '0002$Z302#######VAL0320' 'FMRBCS'       150 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000152 " 0002$Z302#######VAL0323
        USING '0002$Z302#######VAL0323' 'FMRBCS'       152 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000153 " 0002$Z302#######VAL0326
        USING '0002$Z302#######VAL0326' 'FMRBCS'       153 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000154 " 0002$Z302#######VAL0329
        USING '0002$Z302#######VAL0329' 'FMRBCS'       154 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000155 " 0002$Z302#######VAL0332
        USING '0002$Z302#######VAL0332' 'FMRBCS'       155 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000157 " 0002$Z302#######VAL0335
        USING '0002$Z302#######VAL0335' 'FMRBCS'       157 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000158 " 0002$Z302#######VAL0338
        USING '0002$Z302#######VAL0338' 'FMRBCS'       158 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000159 " 0002$Z302#######VAL0341
        USING '0002$Z302#######VAL0341' 'FMRBCS'       159 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000161 " 0002$Z302#######VAL0344
        USING '0002$Z302#######VAL0344' 'FMRBCS'       161 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000162 " 0002$Z302#######VAL0347
        USING '0002$Z302#######VAL0347' 'FMRBCS'       162 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000163 " 0002$Z302#######VAL0350
        USING '0002$Z302#######VAL0350' 'FMRBCS'       163 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000164 " 0002$Z302#######VAL0353
        USING '0002$Z302#######VAL0353' 'FMRBCS'       164 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000165 " 0002$Z302#######VAL0356
        USING '0002$Z302#######VAL0356' 'FMRBCS'       165 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000166 " 0002$Z302#######VAL0359
        USING '0002$Z302#######VAL0359' 'FMRBCS'       166 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000168 " 0002$Z302#######VAL0362
        USING '0002$Z302#######VAL0362' 'FMRBCS'       168 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000169 " 0002$Z302#######VAL0365
        USING '0002$Z302#######VAL0365' 'FMRBCS'       169 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000170 " 0002$Z302#######VAL0368
        USING '0002$Z302#######VAL0368' 'FMRBCS'       170 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000171 " 0002$Z302#######VAL0371
        USING '0002$Z302#######VAL0371' 'FMRBCS'       171 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000172 " 0002$Z302#######VAL0374
        USING '0002$Z302#######VAL0374' 'FMRBCS'       172 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000174 " 0002$Z302#######VAL0377
        USING '0002$Z302#######VAL0377' 'FMRBCS'       174 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000175 " 0002$Z302#######VAL0380
        USING '0002$Z302#######VAL0380' 'FMRBCS'       175 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000176 " 0002$Z302#######VAL0383
        USING '0002$Z302#######VAL0383' 'FMRBCS'       176 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000177 " 0002$Z302#######VAL0386
        USING '0002$Z302#######VAL0386' 'FMRBCS'       177 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000179 " 0002$Z302#######VAL0389
        USING '0002$Z302#######VAL0389' 'FMRBCS'       179 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000180 " 0002$Z302#######VAL0392
        USING '0002$Z302#######VAL0392' 'FMRBCS'       180 .
PERFORM FILL_RANGES_FROM_SET
        TABLES R_0000000181 " 0002$Z302#######VAL0395
        USING '0002$Z302#######VAL0395' 'FMRBCS'       181 .

  REFRESH OUTC.
  REFRESH OUTA.
  REFRESH OUTD.
  REFRESH OUT_ED.
ENDFORM.

* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SELECT                                             *
*----------------------------------------------------------------------*

DEFINE &APPEND_WTAB_TO_FRANGE.
  CLEAR SELOPT.
  LOOP AT &2.
    MOVE-CORRESPONDING &2 TO SELOPT_WA.
    APPEND SELOPT_WA TO SELOPT.
  ENDLOOP.
  FRANGE_WA-FIELDNAME = &1.
  FRANGE_WA-SELOPT_T  = SELOPT.
  APPEND FRANGE_WA TO FRANGE.
END-OF-DEFINITION.

DEFINE &APPEND_FIXV_TO_FRANGE.
  CLEAR SELOPT.
  SELOPT_WA-SIGN   = 'I'.
  SELOPT_WA-OPTION = 'EQ'.
  SELOPT_WA-LOW    = &2.
  CLEAR SELOPT_WA-HIGH.
  APPEND SELOPT_WA TO SELOPT.
  FRANGE_WA-FIELDNAME = &1.
  FRANGE_WA-SELOPT_T  = SELOPT.
  APPEND FRANGE_WA TO FRANGE.
END-OF-DEFINITION.

DEFINE &SEL_LOOP.

  PERFORM E22_SELECT_RANGES_LOOP_INIT(SAPFGRWS)
          TABLES   WTAB_&1
                   SELR_&1
          USING    '&1'
                   EMPTY_FLAGS-&1
          CHANGING RC_INDEX-&1
                   SUBRC.
  WHILE SUBRC EQ 0.

END-OF-DEFINITION.

DEFINE &SEL_ENDLOOP.

  PERFORM E22_SELECT_RANGES_LOOP_NEXT(SAPFGRWS)
          TABLES   WTAB_&1
                   SELR_&1
          USING    '&1'
          CHANGING RC_INDEX-&1
                   SUBRC.
  ENDWHILE.

END-OF-DEFINITION.

FORM SELECT.
  DATA: BEGIN OF DTABLES OCCURS 10,
        NAME LIKE DFIES-TABNAME,
        END   OF DTABLES.

  DATA: BEGIN OF FIELD_LIST OCCURS 0,
        FIELDNAME(32) TYPE C,
        END   OF FIELD_LIST.

  DATA: BEGIN OF GROUP_LIST OCCURS 0,
        FIELDNAME LIKE DFIES-TABNAME,
        END   OF GROUP_LIST.
  DATA: SELOPT_WA             LIKE RSDSSELOPT,
        SELOPT                TYPE RSDS_SELOPT_T,
        FRANGE_WA             TYPE RSDS_FRANGE,
        FRANGE                TYPE RSDS_FRANGE_T,
        ARCHIVE_SELECTIONS_WA TYPE RSDS_RANGE,
        ARCHIVE_SELECTIONS    TYPE RSDS_TRANGE.
  DATA: BEGIN OF ARCHIVE_TABLES OCCURS 0,
        TABNAME LIKE DFIES-TABNAME,
        END   OF ARCHIVE_TABLES.
  DATA: lv_temp TYPE data_temperature.
  DATA: lr_bukrs TYPE if_fin_selection_types=>ty_range_bukrs.
  DATA: AGGREGATION TYPE C VALUE 'X'.
*----------------------------------------------------------------------*
  DATA: BEGIN OF WORK_L,
        RCMMTITEM_MIN(24)                      TYPE C,
        RCMMTITEM_MAX(24)                      TYPE C,
        RFIKRS_MIN(04)                         TYPE C VALUE '0001',
        RFIKRS_MAX(04)                         TYPE C VALUE '0001',
        RFUND_MIN(10)                          TYPE C,
        RFUND_MAX(10)                          TYPE C,
        RFUNDSCTR_MIN(16)                      TYPE C,
        RFUNDSCTR_MAX(16)                      TYPE C,
        RLDNR_MIN(02)                          TYPE C VALUE '9A',
        RLDNR_MAX(02)                          TYPE C VALUE '9F',
        RMEASURE_MIN(24)                       TYPE C,
        RMEASURE_MAX(24)                       TYPE C,
        RPMAX_MIN(03)                          TYPE C VALUE '016',
        RPMAX_MAX(03)                          TYPE C VALUE '016',
        RSTATS_MIN(01)                         TYPE C VALUE ' ',
        RSTATS_MAX(01)                         TYPE C VALUE ' ',
        RVERS_MIN(03)                          TYPE C VALUE '000',
        RVERS_MAX(03)                          TYPE C VALUE '000',
        RYEAR_MIN(04)                          TYPE C VALUE '2004',
        RYEAR_MAX(04)                          TYPE C VALUE '2004',
        END   OF WORK_L.
  DATA: BEGIN OF LIMITS,
        RCMMTITEM_MIN(24)                      TYPE C,
        RCMMTITEM_MAX(24)                      TYPE C,
        RFIKRS_MIN(04)                         TYPE C VALUE '0001',
        RFIKRS_MAX(04)                         TYPE C VALUE '0001',
        RFUND_MIN(10)                          TYPE C,
        RFUND_MAX(10)                          TYPE C,
        RFUNDSCTR_MIN(16)                      TYPE C,
        RFUNDSCTR_MAX(16)                      TYPE C,
        RLDNR_MIN(02)                          TYPE C VALUE '9A',
        RLDNR_MAX(02)                          TYPE C VALUE '9F',
        RMEASURE_MIN(24)                       TYPE C,
        RMEASURE_MAX(24)                       TYPE C,
        RPMAX_MIN(03)                          TYPE C VALUE '016',
        RPMAX_MAX(03)                          TYPE C VALUE '016',
        RSTATS_MIN(01)                         TYPE C VALUE ' ',
        RSTATS_MAX(01)                         TYPE C VALUE ' ',
        RVERS_MIN(03)                          TYPE C VALUE '000',
        RVERS_MAX(03)                          TYPE C VALUE '000',
        RYEAR_MIN(04)                          TYPE C VALUE '2004',
        RYEAR_MAX(04)                          TYPE C VALUE '2004',
        END   OF LIMITS.

*.........calculate LIMITS.............................................*

  CLEAR_CFIELD_WITH_MINCHAR LIMITS-RCMMTITEM_MIN.
  CLEAR_CFIELD_WITH_MAXCHAR LIMITS-RCMMTITEM_MAX.
  CLEAR_CFIELD_WITH_MINCHAR LIMITS-RFUND_MIN.
  CLEAR_CFIELD_WITH_MAXCHAR LIMITS-RFUND_MAX.
  CLEAR_CFIELD_WITH_MINCHAR LIMITS-RFUNDSCTR_MIN.
  CLEAR_CFIELD_WITH_MAXCHAR LIMITS-RFUNDSCTR_MAX.
  CLEAR_CFIELD_WITH_MINCHAR LIMITS-RMEASURE_MIN.
  CLEAR_CFIELD_WITH_MAXCHAR LIMITS-RMEASURE_MAX.
  PERFORM E13_CALCULATE_LIMITS(SAPFGRWS)
          USING 'RCMMTITEM                     '
                LIMITS-RCMMTITEM_MIN
                LIMITS-RCMMTITEM_MAX
                ' ' ' ' ' ' ' '.
  PERFORM E13_CALCULATE_LIMITS(SAPFGRWS)
          USING 'RFIKRS                        '
                LIMITS-RFIKRS_MIN
                LIMITS-RFIKRS_MAX
                ' ' ' ' ' ' ' '.
  PERFORM E13_CALCULATE_LIMITS(SAPFGRWS)
          USING 'RFUND                         '
                LIMITS-RFUND_MIN
                LIMITS-RFUND_MAX
                ' ' ' ' ' ' ' '.
  PERFORM E13_CALCULATE_LIMITS(SAPFGRWS)
          USING 'RFUNDSCTR                     '
                LIMITS-RFUNDSCTR_MIN
                LIMITS-RFUNDSCTR_MAX
                ' ' ' ' ' ' ' '.
  PERFORM E13_CALCULATE_LIMITS(SAPFGRWS)
          USING 'RLDNR                         '
                LIMITS-RLDNR_MIN
                LIMITS-RLDNR_MAX
                ' ' ' ' ' ' ' '.
  PERFORM E13_CALCULATE_LIMITS(SAPFGRWS)
          USING 'RMEASURE                      '
                LIMITS-RMEASURE_MIN
                LIMITS-RMEASURE_MAX
                ' ' ' ' ' ' ' '.
  PERFORM E13_CALCULATE_LIMITS(SAPFGRWS)
          USING 'RPMAX                         '
                LIMITS-RPMAX_MIN
                LIMITS-RPMAX_MAX
                'P' 016 096 03.
  PERFORM E13_CALCULATE_LIMITS(SAPFGRWS)
          USING 'RSTATS                        '
                LIMITS-RSTATS_MIN
                LIMITS-RSTATS_MAX
                ' ' ' ' ' ' ' '.
  PERFORM E13_CALCULATE_LIMITS(SAPFGRWS)
          USING 'RVERS                         '
                LIMITS-RVERS_MIN
                LIMITS-RVERS_MAX
                ' ' ' ' ' ' ' '.
  PERFORM E13_CALCULATE_LIMITS(SAPFGRWS)
          USING 'RYEAR                         '
                LIMITS-RYEAR_MIN
                LIMITS-RYEAR_MAX
                ' ' ' ' ' ' ' '.
  CLEAR VALID_VARIATIONS.
  REFRESH VALID_VARIATIONS.

  FSTAT-SELECTS = 0.

*.........correct limits for RC interface..............................*

  IF RC_CALL = 0.

*.........set new limits from sender-report.(LIMITS-RCMMTITEM..........*

    CALL FUNCTION 'G_REPORT_SET_DIMENSION_MIN_MAX'
         EXPORTING DIM_FIELD   = 'RCMMTITEM '
                   I_FIELD_MIN = LIMITS-RCMMTITEM_MIN
                   I_FIELD_MAX = LIMITS-RCMMTITEM_MAX
         IMPORTING O_FIELD_MIN = LIMITS-RCMMTITEM_MIN
 O_FIELD_MAX = LIMITS-RCMMTITEM_MAX .

*.........set new limits from sender-report.(LIMITS-RFIKRS.............*

    CALL FUNCTION 'G_REPORT_SET_DIMENSION_MIN_MAX'
         EXPORTING DIM_FIELD   = 'RFIKRS    '
                   I_FIELD_MIN = LIMITS-RFIKRS_MIN
                   I_FIELD_MAX = LIMITS-RFIKRS_MAX
         IMPORTING O_FIELD_MIN = LIMITS-RFIKRS_MIN
 O_FIELD_MAX = LIMITS-RFIKRS_MAX .

*.........set new limits from sender-report.(LIMITS-RFUND..............*

    CALL FUNCTION 'G_REPORT_SET_DIMENSION_MIN_MAX'
         EXPORTING DIM_FIELD   = 'RFUND     '
                   I_FIELD_MIN = LIMITS-RFUND_MIN
                   I_FIELD_MAX = LIMITS-RFUND_MAX
         IMPORTING O_FIELD_MIN = LIMITS-RFUND_MIN
 O_FIELD_MAX = LIMITS-RFUND_MAX .

*.........set new limits from sender-report.(LIMITS-RFUNDSCTR..........*

    CALL FUNCTION 'G_REPORT_SET_DIMENSION_MIN_MAX'
         EXPORTING DIM_FIELD   = 'RFUNDSCTR '
                   I_FIELD_MIN = LIMITS-RFUNDSCTR_MIN
                   I_FIELD_MAX = LIMITS-RFUNDSCTR_MAX
         IMPORTING O_FIELD_MIN = LIMITS-RFUNDSCTR_MIN
 O_FIELD_MAX = LIMITS-RFUNDSCTR_MAX .

*.........set new limits from sender-report.(LIMITS-RLDNR..............*

    CALL FUNCTION 'G_REPORT_SET_DIMENSION_MIN_MAX'
         EXPORTING DIM_FIELD   = 'RLDNR     '
                   I_FIELD_MIN = LIMITS-RLDNR_MIN
                   I_FIELD_MAX = LIMITS-RLDNR_MAX
         IMPORTING O_FIELD_MIN = LIMITS-RLDNR_MIN
 O_FIELD_MAX = LIMITS-RLDNR_MAX .

*.........set new limits from sender-report.(LIMITS-RMEASURE...........*

    CALL FUNCTION 'G_REPORT_SET_DIMENSION_MIN_MAX'
         EXPORTING DIM_FIELD   = 'RMEASURE  '
                   I_FIELD_MIN = LIMITS-RMEASURE_MIN
                   I_FIELD_MAX = LIMITS-RMEASURE_MAX
         IMPORTING O_FIELD_MIN = LIMITS-RMEASURE_MIN
 O_FIELD_MAX = LIMITS-RMEASURE_MAX .

*.........set new limits from sender-report.(LIMITS-RSTATS.............*

    CALL FUNCTION 'G_REPORT_SET_DIMENSION_MIN_MAX'
         EXPORTING DIM_FIELD   = 'RSTATS    '
                   I_FIELD_MIN = LIMITS-RSTATS_MIN
                   I_FIELD_MAX = LIMITS-RSTATS_MAX
         IMPORTING O_FIELD_MIN = LIMITS-RSTATS_MIN
 O_FIELD_MAX = LIMITS-RSTATS_MAX .

*.........set new limits from sender-report.(LIMITS-RVERS..............*

    CALL FUNCTION 'G_REPORT_SET_DIMENSION_MIN_MAX'
         EXPORTING DIM_FIELD   = 'RVERS     '
                   I_FIELD_MIN = LIMITS-RVERS_MIN
                   I_FIELD_MAX = LIMITS-RVERS_MAX
         IMPORTING O_FIELD_MIN = LIMITS-RVERS_MIN
 O_FIELD_MAX = LIMITS-RVERS_MAX .

*.........set new limits from sender-report.(LIMITS-RYEAR..............*

    CALL FUNCTION 'G_REPORT_SET_DIMENSION_MIN_MAX'
         EXPORTING DIM_FIELD   = 'RYEAR     '
                   I_FIELD_MIN = LIMITS-RYEAR_MIN
                   I_FIELD_MAX = LIMITS-RYEAR_MAX
         IMPORTING O_FIELD_MIN = LIMITS-RYEAR_MIN
 O_FIELD_MAX = LIMITS-RYEAR_MAX .

*.........check if sender-report has period field......................*

    CALL FUNCTION 'G_REPORT_FIND_DIMENSION'
         EXPORTING DIM_FIELD = 'RPMAX                         '
         IMPORTING SUBRC     = RC_PERIOD_FIELD_FOUND
                   DIM_DATA  = RC_DIM_DATA.
  ENDIF.

*.........Initialize check tables......................................*

*         field: RFIKRS / set: 0002$Z302#######VAL0001 ZFMZ302FCPY Sel *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00001
          USING  00001.
  CHECK_RSD00001_INDEX = 1.
  READ TABLE CHECK_RSD00001 INDEX CHECK_RSD00001_INDEX.

*         field: RVERS / set: 0002$Z302#######VAL0005 ZFMZ302FCPY Sele *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00002
          USING  00002.
  CHECK_RSD00002_INDEX = 1.
  READ TABLE CHECK_RSD00002 INDEX CHECK_RSD00002_INDEX.

*         field: RYEAR / set: 0002$Z302#######VAL0007 ZFMZ302FCPY Sele *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00003
          USING  00003.
  CHECK_RSD00003_INDEX = 1.
  READ TABLE CHECK_RSD00003 INDEX CHECK_RSD00003_INDEX.

*         field: RSTATS / set: 0002$Z302#######VAL0003 ZFMZ302FCPY Sel *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00004
          USING  00004.
  CHECK_RSD00004_INDEX = 1.
  READ TABLE CHECK_RSD00004 INDEX CHECK_RSD00004_INDEX.

*         field: RFIKRS / set: 0002$Z302#######VAL0135 ZFMZ302YCPX Sel *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00005
          USING  00011.
  CHECK_RSD00005_INDEX = 1.
  READ TABLE CHECK_RSD00005 INDEX CHECK_RSD00005_INDEX.

*         field: RVERS / set: 0002$Z302#######VAL0139 ZFMZ302YCPX Sele *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00006
          USING  00012.
  CHECK_RSD00006_INDEX = 1.
  READ TABLE CHECK_RSD00006 INDEX CHECK_RSD00006_INDEX.

*         field: RYEAR / set: 0002$Z302#######VAL0141 ZFMZ302YCPX Sele *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00007
          USING  00013.
  CHECK_RSD00007_INDEX = 1.
  READ TABLE CHECK_RSD00007 INDEX CHECK_RSD00007_INDEX.

*         field: RSTATS / set: 0002$Z302#######VAL0137 ZFMZ302YCPX Sel *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00008
          USING  00014.
  CHECK_RSD00008_INDEX = 1.
  READ TABLE CHECK_RSD00008 INDEX CHECK_RSD00008_INDEX.

*         field: RFIKRS / set: 0002$Z302#######VAL0266 ZFMZ302YPXX Sel *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00009
          USING  00021.
  CHECK_RSD00009_INDEX = 1.
  READ TABLE CHECK_RSD00009 INDEX CHECK_RSD00009_INDEX.

*         field: RVERS / set: 0002$Z302#######VAL0270 ZFMZ302YPXX Sele *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00010
          USING  00022.
  CHECK_RSD00010_INDEX = 1.
  READ TABLE CHECK_RSD00010 INDEX CHECK_RSD00010_INDEX.

*         field: RYEAR / set: 0002$Z302#######VAL0272 ZFMZ302YPXX Sele *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00011
          USING  00023.
  CHECK_RSD00011_INDEX = 1.
  READ TABLE CHECK_RSD00011 INDEX CHECK_RSD00011_INDEX.

*         field: RSTATS / set: 0002$Z302#######VAL0268 ZFMZ302YPXX Sel *
  PERFORM E21_FILL_CHECK_TABLE_FROM_SET(SAPFGRWS)
          TABLES CHECK_RSD00012
          USING  00024.
  CHECK_RSD00012_INDEX = 1.
  READ TABLE CHECK_RSD00012 INDEX CHECK_RSD00012_INDEX.


*.........set valid additional fields for r/r interface................*

  IF RC_CALL = 0.
    PERFORM RC_SET_VALID_ADDFIELDS.
  ENDIF.
  REFRESH FTAB.
  CLEAR EMPTY_FLAGS WITH 'X'.

  PERFORM E15_FIND_SELECT_RANGES(SAPFGRWS)
     TABLES WTAB_RCMMTITEM
     USING  'FMRBCS                        '
            'RCMMTITEM                     '
            9999
            009999
            '                              '
            MPOOL
            ' ' ' ' ' ' ' '
            LIMITS-RCMMTITEM_MIN
            LIMITS-RCMMTITEM_MAX
            ' '
            ' '
            'X'
            EMPTY_FLAGS-RCMMTITEM                     .
  FTAB-FIELD = 'RCMMTITEM'.
  LOOP AT WTAB_RCMMTITEM.
    FTAB-MIN = WTAB_RCMMTITEM-LOW.
    IF WTAB_RCMMTITEM-OPTION = 'EQ'.
      FTAB-MAX = FTAB-MIN.
    ELSE.
      FTAB-MAX = WTAB_RCMMTITEM-HIGH.
    ENDIF.
    APPEND FTAB.
  ENDLOOP.

  PERFORM E15_FIND_SELECT_RANGES(SAPFGRWS)
     TABLES WTAB_RFIKRS
     USING  'FMRBCS                        '
            'RFIKRS                        '
            9999
            009999
            '                              '
            MPOOL
            ' ' ' ' ' ' ' '
            LIMITS-RFIKRS_MIN
            LIMITS-RFIKRS_MAX
            ' '
            ' '
            'X'
            EMPTY_FLAGS-RFIKRS                        .
  FTAB-FIELD = 'RFIKRS'.
  LOOP AT WTAB_RFIKRS.
    FTAB-MIN = WTAB_RFIKRS-LOW.
    IF WTAB_RFIKRS-OPTION = 'EQ'.
      FTAB-MAX = FTAB-MIN.
    ELSE.
      FTAB-MAX = WTAB_RFIKRS-HIGH.
    ENDIF.
    APPEND FTAB.
  ENDLOOP.

  PERFORM E15_FIND_SELECT_RANGES(SAPFGRWS)
     TABLES WTAB_RFUND
     USING  'FMRBCS                        '
            'RFUND                         '
            9999
            009999
            '                              '
            MPOOL
            ' ' ' ' ' ' ' '
            LIMITS-RFUND_MIN
            LIMITS-RFUND_MAX
            ' '
            ' '
            'X'
            EMPTY_FLAGS-RFUND                         .
  FTAB-FIELD = 'RFUND'.
  LOOP AT WTAB_RFUND.
    FTAB-MIN = WTAB_RFUND-LOW.
    IF WTAB_RFUND-OPTION = 'EQ'.
      FTAB-MAX = FTAB-MIN.
    ELSE.
      FTAB-MAX = WTAB_RFUND-HIGH.
    ENDIF.
    APPEND FTAB.
  ENDLOOP.

  PERFORM E15_FIND_SELECT_RANGES(SAPFGRWS)
     TABLES WTAB_RFUNDSCTR
     USING  'FMRBCS                        '
            'RFUNDSCTR                     '
            9999
            009999
            '                              '
            MPOOL
            ' ' ' ' ' ' ' '
            LIMITS-RFUNDSCTR_MIN
            LIMITS-RFUNDSCTR_MAX
            ' '
            ' '
            'X'
            EMPTY_FLAGS-RFUNDSCTR                     .
  FTAB-FIELD = 'RFUNDSCTR'.
  LOOP AT WTAB_RFUNDSCTR.
    FTAB-MIN = WTAB_RFUNDSCTR-LOW.
    IF WTAB_RFUNDSCTR-OPTION = 'EQ'.
      FTAB-MAX = FTAB-MIN.
    ELSE.
      FTAB-MAX = WTAB_RFUNDSCTR-HIGH.
    ENDIF.
    APPEND FTAB.
  ENDLOOP.

  PERFORM E15_FIND_SELECT_RANGES(SAPFGRWS)
     TABLES WTAB_RLDNR
     USING  'FMRBCS                        '
            'RLDNR                         '
            9999
            009999
            '                              '
            MPOOL
            ' ' ' ' ' ' ' '
            LIMITS-RLDNR_MIN
            LIMITS-RLDNR_MAX
            ' '
            ' '
            'X'
            EMPTY_FLAGS-RLDNR                         .
  FTAB-FIELD = 'RLDNR'.
  LOOP AT WTAB_RLDNR.
    FTAB-MIN = WTAB_RLDNR-LOW.
    IF WTAB_RLDNR-OPTION = 'EQ'.
      FTAB-MAX = FTAB-MIN.
    ELSE.
      FTAB-MAX = WTAB_RLDNR-HIGH.
    ENDIF.
    APPEND FTAB.
  ENDLOOP.

  PERFORM E15_FIND_SELECT_RANGES(SAPFGRWS)
     TABLES WTAB_RMEASURE
     USING  'FMRBCS                        '
            'RMEASURE                      '
            9999
            009999
            '                              '
            MPOOL
            ' ' ' ' ' ' ' '
            LIMITS-RMEASURE_MIN
            LIMITS-RMEASURE_MAX
            ' '
            ' '
            'X'
            EMPTY_FLAGS-RMEASURE                      .
  FTAB-FIELD = 'RMEASURE'.
  LOOP AT WTAB_RMEASURE.
    FTAB-MIN = WTAB_RMEASURE-LOW.
    IF WTAB_RMEASURE-OPTION = 'EQ'.
      FTAB-MAX = FTAB-MIN.
    ELSE.
      FTAB-MAX = WTAB_RMEASURE-HIGH.
    ENDIF.
    APPEND FTAB.
  ENDLOOP.

  PERFORM E15_FIND_SELECT_RANGES(SAPFGRWS)
     TABLES WTAB_RPMAX
     USING  'FMRBCS                        '
            'RPMAX                         '
            0000
            009999
            '                              '
            MPOOL
            'P' 016 096 03
            LIMITS-RPMAX_MIN
            LIMITS-RPMAX_MAX
            ' '
            ' '
            'X'
            EMPTY_FLAGS-RPMAX                         .
  FTAB-FIELD = 'RPMAX'.
  LOOP AT WTAB_RPMAX.
    FTAB-MIN = WTAB_RPMAX-LOW.
    IF WTAB_RPMAX-OPTION = 'EQ'.
      FTAB-MAX = FTAB-MIN.
    ELSE.
      FTAB-MAX = WTAB_RPMAX-HIGH.
    ENDIF.
    APPEND FTAB.
  ENDLOOP.

  PERFORM E15_FIND_SELECT_RANGES(SAPFGRWS)
     TABLES WTAB_RSTATS
     USING  'FMRBCS                        '
            'RSTATS                        '
            0000
            009999
            '                              '
            MPOOL
            ' ' ' ' ' ' ' '
            LIMITS-RSTATS_MIN
            LIMITS-RSTATS_MAX
            ' '
            ' '
            'X'
            EMPTY_FLAGS-RSTATS                        .
  FTAB-FIELD = 'RSTATS'.
  LOOP AT WTAB_RSTATS.
    FTAB-MIN = WTAB_RSTATS-LOW.
    IF WTAB_RSTATS-OPTION = 'EQ'.
      FTAB-MAX = FTAB-MIN.
    ELSE.
      FTAB-MAX = WTAB_RSTATS-HIGH.
    ENDIF.
    APPEND FTAB.
  ENDLOOP.

  PERFORM E15_FIND_SELECT_RANGES(SAPFGRWS)
     TABLES WTAB_RVERS
     USING  'FMRBCS                        '
            'RVERS                         '
            9999
            009999
            '                              '
            MPOOL
            ' ' ' ' ' ' ' '
            LIMITS-RVERS_MIN
            LIMITS-RVERS_MAX
            ' '
            ' '
            'X'
            EMPTY_FLAGS-RVERS                         .
  FTAB-FIELD = 'RVERS'.
  LOOP AT WTAB_RVERS.
    FTAB-MIN = WTAB_RVERS-LOW.
    IF WTAB_RVERS-OPTION = 'EQ'.
      FTAB-MAX = FTAB-MIN.
    ELSE.
      FTAB-MAX = WTAB_RVERS-HIGH.
    ENDIF.
    APPEND FTAB.
  ENDLOOP.

  PERFORM E15_FIND_SELECT_RANGES(SAPFGRWS)
     TABLES WTAB_RYEAR
     USING  'FMRBCS                        '
            'RYEAR                         '
            9999
            009999
            '                              '
            MPOOL
            ' ' ' ' ' ' ' '
            LIMITS-RYEAR_MIN
            LIMITS-RYEAR_MAX
            ' '
            ' '
            'X'
            EMPTY_FLAGS-RYEAR                         .
  FTAB-FIELD = 'RYEAR'.
  LOOP AT WTAB_RYEAR.
    FTAB-MIN = WTAB_RYEAR-LOW.
    IF WTAB_RYEAR-OPTION = 'EQ'.
      FTAB-MAX = FTAB-MIN.
    ELSE.
      FTAB-MAX = WTAB_RYEAR-HIGH.
    ENDIF.
    APPEND FTAB.
  ENDLOOP.

  MOVE-CORRESPONDING LIMITS TO WORK_L.

  IF NOT xusedb IS INITIAL AND NOT xusear IS INITIAL.
    g_xusedb = 'X'.
  ENDIF.
  IF G_ARCHIVE_FLAG IS INITIAL.

    G_DATA_SOURCE = 'S'.

*.........SELECT for table FMRBCS......................................*

    GET TIME FIELD TIME_START.
    PERFORM SWITCH_TO_TABLE_FMRBCS    .

*.........fill table with dimension values.............................*

    PERFORM FILL_FMRBCS(SAPFFMRBCS)
        TABLES FTAB INT_FMRBCS    .
    FSTAT-SELECTS = FSTAT-SELECTS + 1.
    LOOP AT INT_FMRBCS.
      PERFORM PFMRBCS     USING 1.
    ENDLOOP.
    FREE INT_FMRBCS.
    FREE I_FMRBCS    .

    PERFORM PROCESS_COLLECT_FMRBCS     USING 'X'.

    GET TIME FIELD TIME_END.
    FSTAT-PROC_TIME = TIME_END - TIME_START.
    FSTAT-TAB = 'FMRBCS                        '.
    APPEND FSTAT.
    CLEAR FSTAT.
    RSTAT-TAB    = 'FMRBCS                        '.
    RSTAT-REPORT = 'Z302FCPY'.
    RSTAT-USED   = STAT_USED_R01.
    RSTAT-AUTH   = STAT_AUTH_R01.
    APPEND RSTAT.
    CLEAR STAT_USED_R01.
    CLEAR STAT_AUTH_R01.
    RSTAT-REPORT = 'Z302YCPX'.
    RSTAT-USED   = STAT_USED_R02.
    RSTAT-AUTH   = STAT_AUTH_R02.
    APPEND RSTAT.
    CLEAR STAT_USED_R02.
    CLEAR STAT_AUTH_R02.
    RSTAT-REPORT = 'Z302YPXX'.
    RSTAT-USED   = STAT_USED_R03.
    RSTAT-AUTH   = STAT_AUTH_R03.
    APPEND RSTAT.
    CLEAR STAT_USED_R03.
    CLEAR STAT_AUTH_R03.
  ELSEIF NOT G_ARCHIVE_FLAG IS INITIAL AND XUSEDB IS INITIAL.

*.........Select.from.archive.only.....................................*

    GET TIME FIELD TIME_START.

    G_DATA_SOURCE = 'A'.
    REFRESH ARCHIVE_TABLES.
    ARCHIVE_TABLES-TABNAME = 'FMRBCS                        '.
    APPEND ARCHIVE_TABLES.
    CLEAR ARCHIVE_TABLES.

* The following line was splitted
 &APPEND_WTAB_TO_FRANGE 'RCMMTITEM                     ' WTAB_RCMMTITEM
 .
 &APPEND_WTAB_TO_FRANGE 'RFIKRS                        ' WTAB_RFIKRS .
 &APPEND_WTAB_TO_FRANGE 'RFUND                         ' WTAB_RFUND .
* The following line was splitted
 &APPEND_WTAB_TO_FRANGE 'RFUNDSCTR                     ' WTAB_RFUNDSCTR
 .
 &APPEND_WTAB_TO_FRANGE 'RLDNR                         ' WTAB_RLDNR .
* The following line was splitted
 &APPEND_WTAB_TO_FRANGE 'RMEASURE                      ' WTAB_RMEASURE
 .
 &APPEND_WTAB_TO_FRANGE 'RPMAX                         ' WTAB_RPMAX .
 &APPEND_WTAB_TO_FRANGE 'RSTATS                        ' WTAB_RSTATS .
 &APPEND_WTAB_TO_FRANGE 'RVERS                         ' WTAB_RVERS .
 &APPEND_WTAB_TO_FRANGE 'RYEAR                         ' WTAB_RYEAR .
    CLEAR ARCHIVE_SELECTIONS_WA-TABLENAME.
    ARCHIVE_SELECTIONS_WA-FRANGE_T = FRANGE.
    APPEND ARCHIVE_SELECTIONS_WA TO ARCHIVE_SELECTIONS.

    CLEAR FRANGE.
    ARCHIVE_SELECTIONS_WA-TABLENAME = 'FMRBCS                        '.
    ARCHIVE_SELECTIONS_WA-FRANGE_T = FRANGE.
    APPEND ARCHIVE_SELECTIONS_WA TO ARCHIVE_SELECTIONS.

    CALL FUNCTION 'RW_ARCHIVE_LINK'
         EXPORTING
              I_SELECTIONS       = ARCHIVE_SELECTIONS
              I_CALLBACK_PROGRAM = SL_REPORT
              I_CALLBACK_ROUTINE = 'PROCESS_ARCHIVE_RECORDS'
              I_USEAS            = XUSEAS
         TABLES
              T_ARCH_OBJ         = G_ARCHIVE_OBJECTS
              T_TABLES           = ARCHIVE_TABLES
              T_FILES            = ARCH_SEL
         EXCEPTIONS
              OTHERS             = 1.

    PERFORM SWITCH_TO_TABLE_FMRBCS    .
    PERFORM PROCESS_COLLECT_FMRBCS     using 'X'.

    GET TIME FIELD TIME_END.
    FSTAT-PROC_TIME = TIME_END - TIME_START.
    FSTAT-TAB = 'FMRBCS                        '.
    APPEND FSTAT.
    CLEAR FSTAT.
    RSTAT-TAB    = 'FMRBCS                        '.
    RSTAT-REPORT = 'Z302FCPY'.
    RSTAT-USED   = STAT_USED_R01.
    RSTAT-AUTH   = STAT_AUTH_R01.
    APPEND RSTAT.
    CLEAR STAT_USED_R01.
    CLEAR STAT_AUTH_R01.
    RSTAT-REPORT = 'Z302YCPX'.
    RSTAT-USED   = STAT_USED_R02.
    RSTAT-AUTH   = STAT_AUTH_R02.
    APPEND RSTAT.
    CLEAR STAT_USED_R02.
    CLEAR STAT_AUTH_R02.
    RSTAT-REPORT = 'Z302YPXX'.
    RSTAT-USED   = STAT_USED_R03.
    RSTAT-AUTH   = STAT_AUTH_R03.
    APPEND RSTAT.
    CLEAR STAT_USED_R03.
    CLEAR STAT_AUTH_R03.
  ELSE.

*.........Select.from.database.and.archive.............................*

    G_DATA_SOURCE = 'S'.

*.........SELECT for table FMRBCS......................................*

    GET TIME FIELD TIME_START.
    PERFORM SWITCH_TO_TABLE_FMRBCS    .

*.........fill table with dimension values.............................*

    PERFORM FILL_FMRBCS(SAPFFMRBCS)
        TABLES FTAB INT_FMRBCS    .
    FSTAT-SELECTS = FSTAT-SELECTS + 1.
    LOOP AT INT_FMRBCS.
      PERFORM PFMRBCS     USING 1.
    ENDLOOP.
    FREE INT_FMRBCS.
    FREE I_FMRBCS    .

    PERFORM PROCESS_COLLECT_FMRBCS     USING 'X'.

    GET TIME FIELD TIME_END.
    FSTAT-PROC_TIME = TIME_END - TIME_START.
    FSTAT-TAB = 'FMRBCS                        '.
    APPEND FSTAT.
    CLEAR FSTAT.
    RSTAT-TAB    = 'FMRBCS                        '.
    RSTAT-REPORT = 'Z302FCPY'.
    RSTAT-USED   = STAT_USED_R01.
    RSTAT-AUTH   = STAT_AUTH_R01.
    APPEND RSTAT.
    CLEAR STAT_USED_R01.
    CLEAR STAT_AUTH_R01.
    RSTAT-REPORT = 'Z302YCPX'.
    RSTAT-USED   = STAT_USED_R02.
    RSTAT-AUTH   = STAT_AUTH_R02.
    APPEND RSTAT.
    CLEAR STAT_USED_R02.
    CLEAR STAT_AUTH_R02.
    RSTAT-REPORT = 'Z302YPXX'.
    RSTAT-USED   = STAT_USED_R03.
    RSTAT-AUTH   = STAT_AUTH_R03.
    APPEND RSTAT.
    CLEAR STAT_USED_R03.
    CLEAR STAT_AUTH_R03.
    GET TIME FIELD TIME_START.

    G_DATA_SOURCE = 'A'.
    REFRESH ARCHIVE_TABLES.
    ARCHIVE_TABLES-TABNAME = 'FMRBCS                        '.
    APPEND ARCHIVE_TABLES.
    CLEAR ARCHIVE_TABLES.

* The following line was splitted
 &APPEND_WTAB_TO_FRANGE 'RCMMTITEM                     ' WTAB_RCMMTITEM
 .
 &APPEND_WTAB_TO_FRANGE 'RFIKRS                        ' WTAB_RFIKRS .
 &APPEND_WTAB_TO_FRANGE 'RFUND                         ' WTAB_RFUND .
* The following line was splitted
 &APPEND_WTAB_TO_FRANGE 'RFUNDSCTR                     ' WTAB_RFUNDSCTR
 .
 &APPEND_WTAB_TO_FRANGE 'RLDNR                         ' WTAB_RLDNR .
* The following line was splitted
 &APPEND_WTAB_TO_FRANGE 'RMEASURE                      ' WTAB_RMEASURE
 .
 &APPEND_WTAB_TO_FRANGE 'RPMAX                         ' WTAB_RPMAX .
 &APPEND_WTAB_TO_FRANGE 'RSTATS                        ' WTAB_RSTATS .
 &APPEND_WTAB_TO_FRANGE 'RVERS                         ' WTAB_RVERS .
 &APPEND_WTAB_TO_FRANGE 'RYEAR                         ' WTAB_RYEAR .
    CLEAR ARCHIVE_SELECTIONS_WA-TABLENAME.
    ARCHIVE_SELECTIONS_WA-FRANGE_T = FRANGE.
    APPEND ARCHIVE_SELECTIONS_WA TO ARCHIVE_SELECTIONS.

    CLEAR FRANGE.
    ARCHIVE_SELECTIONS_WA-TABLENAME = 'FMRBCS                        '.
    ARCHIVE_SELECTIONS_WA-FRANGE_T = FRANGE.
    APPEND ARCHIVE_SELECTIONS_WA TO ARCHIVE_SELECTIONS.

    CALL FUNCTION 'RW_ARCHIVE_LINK'
         EXPORTING
              I_SELECTIONS       = ARCHIVE_SELECTIONS
              I_CALLBACK_PROGRAM = SL_REPORT
              I_CALLBACK_ROUTINE = 'PROCESS_ARCHIVE_RECORDS'
              I_USEAS            = XUSEAS
         TABLES
              T_ARCH_OBJ         = G_ARCHIVE_OBJECTS
              T_TABLES           = ARCHIVE_TABLES
              T_FILES            = ARCH_SEL
         EXCEPTIONS
              OTHERS             = 1.

    PERFORM SWITCH_TO_TABLE_FMRBCS    .
    PERFORM PROCESS_COLLECT_FMRBCS     using 'X'.

    GET TIME FIELD TIME_END.
    FSTAT-PROC_TIME = TIME_END - TIME_START.
    FSTAT-TAB = 'FMRBCS                        '.
    APPEND FSTAT.
    CLEAR FSTAT.
    RSTAT-TAB    = 'FMRBCS                        '.
    RSTAT-REPORT = 'Z302FCPY'.
    RSTAT-USED   = STAT_USED_R01.
    RSTAT-AUTH   = STAT_AUTH_R01.
    APPEND RSTAT.
    CLEAR STAT_USED_R01.
    CLEAR STAT_AUTH_R01.
    RSTAT-REPORT = 'Z302YCPX'.
    RSTAT-USED   = STAT_USED_R02.
    RSTAT-AUTH   = STAT_AUTH_R02.
    APPEND RSTAT.
    CLEAR STAT_USED_R02.
    CLEAR STAT_AUTH_R02.
    RSTAT-REPORT = 'Z302YPXX'.
    RSTAT-USED   = STAT_USED_R03.
    RSTAT-AUTH   = STAT_AUTH_R03.
    APPEND RSTAT.
    CLEAR STAT_USED_R03.
    CLEAR STAT_AUTH_R03.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: Switch context to FMRBCS                           *
*----------------------------------------------------------------------*
FORM SWITCH_TO_TABLE_FMRBCS    .

  CUR-TAB = 'FMRBCS                        '.
  CLEAR $RWTAB.
  CLEAR FMRBCS                        .
  CLEAR VALID.
  VALID-BUDTYPE_9                      = 'X'.
  VALID-PROCESS_9                      = 'X'.
  VALID-RCFLEV                         = 'X'.
  VALID-RCMMTITEM                      = 'X'.
  VALID-RFIKRS                         = 'X'.
  VALID-RFUND                          = 'X'.
  VALID-RFUNDSCTR                      = 'X'.
  VALID-RLDNR                          = 'X'.
  VALID-RMEASURE                       = 'X'.
  VALID-RPMAX                          = 'X'.
  VALID-RSTATS                         = 'X'.
  VALID-RVERS                          = 'X'.
  VALID-RYEAR                          = 'X'.
  VALID-VALTYPE_9                      = 'X'.
  VALID-WFSTATE_9                      = 'X'.

ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: Process collected FMRBCS recor                     *
*----------------------------------------------------------------------*
FORM PROCESS_COLLECT_FMRBCS     USING X_FREE TYPE C.

  DATA: TAB_LINES TYPE I.

  DESCRIBE TABLE COLLECT_FMRBCS     LINES TAB_LINES.
  ADD TAB_LINES TO FSTAT-COLLECT.

  SORT COLLECT_FMRBCS    .
  LOOP AT COLLECT_FMRBCS    .
 MOVE-CORRESPONDING COLLECT_FMRBCS TO FMRBCS .
    MOVE-CORRESPONDING COLLECT_FMRBCS     TO $RWTAB.
    PERFORM PROCESS_RECORDS.
    DELETE COLLECT_FMRBCS    .
  ENDLOOP.
  IF X_FREE IS INITIAL.
    REFRESH COLLECT_FMRBCS    .
  ELSE.
    FREE COLLECT_FMRBCS    .
    CLEAR FMRBCS                        .
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: Process archive records (calle                     *
*----------------------------------------------------------------------*
FORM PROCESS_ARCHIVE_RECORDS TABLES REC_TABLE
                              USING  DB_TABLE  LIKE DFIES-TABNAME.

  CASE DB_TABLE.
    WHEN 'FMRBCS                        '.
      PERFORM SWITCH_TO_TABLE_FMRBCS    .
      LOOP AT REC_TABLE INTO FMRBCS                        .
        PERFORM PFMRBCS     USING 1.
      ENDLOOP.
      CLEAR FMRBCS                        .
  ENDCASE.

ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: process_database_entry                             *
*----------------------------------------------------------------------*
FORM PFMRBCS
  USING VALUE(RECORD_COUNTER) TYPE I.
  DATA: CHECK_RECORD_SUBRC TYPE I,
        COUNT_ENTRY_MAX    TYPE I.

  IF RECORD_COUNTER IS INITIAL.
    RECORD_COUNTER = 1.
  ENDIF.
  ADD RECORD_COUNTER TO FSTAT-REC_DB.
  COUNT_ENTRY_MAX = COUNT_ENTRY_MAX0.
  IF SY-BATCH IS INITIAL AND
     SY-BINPT IS INITIAL.
    PERFORM FLASH_RECORDS_READ(SAPFGRWS)
              USING RECORD_COUNTER.
  ENDIF.
  PERFORM POST_PROCESS_DB_RECORD(SAPFFMRBCS)
    USING 'FMRBCS'
    CHANGING FMRBCS $RWTAB VALID IF FOUND.
  MOVE INT_FMRBCS     TO FMRBCS                        .
  MOVE-CORRESPONDING FMRBCS                         TO $RWTAB.
  PERFORM CHECK_RECORD
          USING    RECORD_COUNTER
                   FMRBCS
          CHANGING CHECK_RECORD_SUBRC.

  IF CHECK_RECORD_SUBRC EQ 0.
    MOVE INT_FMRBCS     TO FMRBCS                        .
    MOVE-CORRESPONDING: FMRBCS TO COLLECT_FMRBCS,
                        $RWTAB TO COLLECT_FMRBCS.
    IF $RWTAB-$$AUTH_COUNTER GT 0.
      CLEAR FMRBCS_DATA.
      MOVE-CORRESPONDING FMRBCS_DATA
                      TO COLLECT_FMRBCS.
    ENDIF.
    COLLECT COLLECT_FMRBCS.
  ENDIF.
  DESCRIBE TABLE COLLECT_FMRBCS LINES COUNT_ENTRY.
  IF COUNT_ENTRY > COUNT_ENTRY_MAX.
    PERFORM PROCESS_COLLECT_FMRBCS     USING ' '.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: CHECK_RECORD                                       *
*----------------------------------------------------------------------*
FORM CHECK_RECORD
     USING    RECORD_COUNTER     TYPE I
              RECORD
     CHANGING CHECK_RECORD_SUBRC LIKE SY-SUBRC.

  ADD 1 TO FSTAT-REC.
  $RWTAB-$$COUNTER      = RECORD_COUNTER.
  $RWTAB-$$AUTH_COUNTER = 0.

  CHECK_RECORD_SUBRC = 4.
  CLEAR VARIATIONS.


  CHECK_RECORD_SUBRC = 0.

  PERFORM RECORD_AUTHORITY_CHECK(SAPFGRWS)
          USING    'SAPFFMRBCS                              '
                   'AUTHORITY_CHECK_FMRBCS        '
                   REP_TABLE
                   REPORT_GROUP
                   G_DATA_SOURCE
                   CUR-TAB
                   RECORD
          CHANGING SUBRC.
  IF SUBRC LT 0.
    CLEAR SUBRC.
    PERFORM AUTHORITY_CHECK_FMRBCS(SAPFFMRBCS)
         USING CUR-TAB SUBRC.
  ENDIF.
  IF SUBRC NE 0.
    $RWTAB-$$AUTH_COUNTER = RECORD_COUNTER.
  ENDIF.

*.........check record against sender data.............................*

  IF RC_CALL = 0.
    PERFORM RC_CHECK_RECORD USING RC_SUBRC.
    IF RC_SUBRC <> 0.
      CHECK_RECORD_SUBRC = 4.
      EXIT.       "from PROCESS_ENTRY
    ENDIF.
    IF RC_PERIOD_FIELD_FOUND = 0.
      PERFORM E19_RC_CLEAR_PERIODS(SAPFGRWS)
              USING 'RPMAX                         ' 016
                    $RWTAB-RPMAX
                    ' '
                    RC_VALID_PERIODS.
    ENDIF.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: PROCESS_RECORDS                                    *
*----------------------------------------------------------------------*
FORM PROCESS_RECORDS.
  PERFORM SEL-R-01.
  PERFORM SEL-R-02.
  PERFORM SEL-R-03.
  IF FLAG-USED = 'X'.
    ADD $RWTAB-$$COUNTER TO FSTAT-USED.
    ADD $RWTAB-$$AUTH_COUNTER TO FSTAT-AUT_CHECK.
    CLEAR FLAG-USED.
  ENDIF.
  IF SY-BATCH IS INITIAL AND
     SY-BINPT IS INITIAL.
    PERFORM FLASH_RECORDS_PROCESSED(SAPFGRWS).
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SEL-R-01                                           *
*----------------------------------------------------------------------*

*.........selection for report: Z302FCPY...............................*

*----------------------------------------------------------------------*
FORM SEL-R-01 .
  DATA: BEGIN OF ACTIVE_COL OCCURS 0,
        SEQNR(3) TYPE C,
        END   OF ACTIVE_COL.
  DATA: BEGIN OF ACCEPTING_ROWS OCCURS 0,
        SEQNR LIKE RRD-SEQNR,
        END OF ACCEPTING_ROWS.
  DATA: X_ACCEPTED(1)       TYPE C,
        SAVE_COUNT_L_LEV    TYPE I.
  SEL_PERIOD = ' '.
  INDEX_R = 01.
*         field: RFIKRS / set: 0002$Z302#######VAL0001 ZFMZ302FCPY Sel *

  IF NOT $RWTAB-RFIKRS
     BETWEEN CHECK_RSD00001-FROM AND CHECK_RSD00001-TO.
    READ TABLE CHECK_RSD00001
         WITH KEY TO = $RWTAB-RFIKRS
         BINARY SEARCH.
    CHECK_RSD00001_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00001 INDEX CHECK_RSD00001_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00001-VALID IS INITIAL.  EXIT.  ENDIF.
*         field: RVERS / set: 0002$Z302#######VAL0005 ZFMZ302FCPY Sele *

  IF NOT $RWTAB-RVERS
     BETWEEN CHECK_RSD00002-FROM AND CHECK_RSD00002-TO.
    READ TABLE CHECK_RSD00002
         WITH KEY TO = $RWTAB-RVERS
         BINARY SEARCH.
    CHECK_RSD00002_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00002 INDEX CHECK_RSD00002_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00002-VALID IS INITIAL.  EXIT.  ENDIF.
*         field: RYEAR / set: 0002$Z302#######VAL0007 ZFMZ302FCPY Sele *

  IF NOT $RWTAB-RYEAR
     BETWEEN CHECK_RSD00003-FROM AND CHECK_RSD00003-TO.
    READ TABLE CHECK_RSD00003
         WITH KEY TO = $RWTAB-RYEAR
         BINARY SEARCH.
    CHECK_RSD00003_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00003 INDEX CHECK_RSD00003_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00003-VALID IS INITIAL.  EXIT.  ENDIF.
*         field: RSTATS / set: 0002$Z302#######VAL0003 ZFMZ302FCPY Sel *

  IF NOT $RWTAB-RSTATS
     BETWEEN CHECK_RSD00004-FROM AND CHECK_RSD00004-TO.
    READ TABLE CHECK_RSD00004
         WITH KEY TO = $RWTAB-RSTATS
         BINARY SEARCH.
    CHECK_RSD00004_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00004 INDEX CHECK_RSD00004_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00004-VALID IS INITIAL.  EXIT.  ENDIF.
  REFRESH L_LEV.
  COUNT_L_LEV = 0.
  REFRESH ACCEPTING_ROWS.
  REFRESH C_LEV.
  COUNT_C_LEV = 0.
  FORM_PRINT_SW = ' '.
*         row_block_no._001                                            *
  SAVE_COUNT_L_LEV = COUNT_L_LEV.
  PERFORM SEL-L-001.
  IF SUBRC EQ 0.
    PERFORM MERGE_LINE USING '001' '004'.
    PERFORM STORE_ACTIVE_COLUMN
            TABLES ACTIVE_COL
            USING INDEX_R '001'.
  ENDIF.
  IF COUNT_L_LEV > SAVE_COUNT_L_LEV.
    ACCEPTING_ROWS-SEQNR = '001'.
    APPEND ACCEPTING_ROWS.
  ENDIF.
  IF COUNT_L_LEV NE 0.
    FORM_PRINT_SW = FORMPRINT_FLAG.
    REFRESH C_LEV.
    COUNT_C_LEV = 0.
    READ TABLE ACTIVE_COL WITH KEY '001' BINARY SEARCH.
    IF SY-SUBRC = 0.
      PERFORM SEL-C-001.
      IF SUBRC EQ 0.
        PERFORM MERGE_COL  USING '001' '001'.
      ENDIF.
    ENDIF.
  ENDIF.
  IF COUNT_C_LEV NE 0.
    FLAG-USED = 'X'.
    ADD $RWTAB-$$COUNTER TO STAT_USED_R01.
    ADD $RWTAB-$$AUTH_COUNTER TO STAT_AUTH_R01.
    IF FORMPRINT_FLAG IS INITIAL.
      CHECK $RWTAB-$$AUTH_COUNTER LT $RWTAB-$$COUNTER.
    ENDIF.
    PERFORM MERGE_RC USING '01'.
    PERFORM GET_DATA USING ' '
                   R01_GLOBAL_IBV_FLAG.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SEL-R-02                                           *
*----------------------------------------------------------------------*

*.........selection for report: Z302YCPX...............................*

*----------------------------------------------------------------------*
FORM SEL-R-02 .
  DATA: BEGIN OF ACTIVE_COL OCCURS 0,
        SEQNR(3) TYPE C,
        END   OF ACTIVE_COL.
  DATA: BEGIN OF ACCEPTING_ROWS OCCURS 0,
        SEQNR LIKE RRD-SEQNR,
        END OF ACCEPTING_ROWS.
  DATA: X_ACCEPTED(1)       TYPE C,
        SAVE_COUNT_L_LEV    TYPE I.
  SEL_PERIOD = ' '.
  INDEX_R = 02.
*         field: RFIKRS / set: 0002$Z302#######VAL0135 ZFMZ302YCPX Sel *

  IF NOT $RWTAB-RFIKRS
     BETWEEN CHECK_RSD00005-FROM AND CHECK_RSD00005-TO.
    READ TABLE CHECK_RSD00005
         WITH KEY TO = $RWTAB-RFIKRS
         BINARY SEARCH.
    CHECK_RSD00005_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00005 INDEX CHECK_RSD00005_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00005-VALID IS INITIAL.  EXIT.  ENDIF.
*         field: RVERS / set: 0002$Z302#######VAL0139 ZFMZ302YCPX Sele *

  IF NOT $RWTAB-RVERS
     BETWEEN CHECK_RSD00006-FROM AND CHECK_RSD00006-TO.
    READ TABLE CHECK_RSD00006
         WITH KEY TO = $RWTAB-RVERS
         BINARY SEARCH.
    CHECK_RSD00006_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00006 INDEX CHECK_RSD00006_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00006-VALID IS INITIAL.  EXIT.  ENDIF.
*         field: RYEAR / set: 0002$Z302#######VAL0141 ZFMZ302YCPX Sele *

  IF NOT $RWTAB-RYEAR
     BETWEEN CHECK_RSD00007-FROM AND CHECK_RSD00007-TO.
    READ TABLE CHECK_RSD00007
         WITH KEY TO = $RWTAB-RYEAR
         BINARY SEARCH.
    CHECK_RSD00007_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00007 INDEX CHECK_RSD00007_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00007-VALID IS INITIAL.  EXIT.  ENDIF.
*         field: RSTATS / set: 0002$Z302#######VAL0137 ZFMZ302YCPX Sel *

  IF NOT $RWTAB-RSTATS
     BETWEEN CHECK_RSD00008-FROM AND CHECK_RSD00008-TO.
    READ TABLE CHECK_RSD00008
         WITH KEY TO = $RWTAB-RSTATS
         BINARY SEARCH.
    CHECK_RSD00008_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00008 INDEX CHECK_RSD00008_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00008-VALID IS INITIAL.  EXIT.  ENDIF.
  REFRESH L_LEV.
  COUNT_L_LEV = 0.
  REFRESH ACCEPTING_ROWS.
  REFRESH C_LEV.
  COUNT_C_LEV = 0.
  FORM_PRINT_SW = ' '.
*         row_block_no._001                                            *
  SAVE_COUNT_L_LEV = COUNT_L_LEV.
  PERFORM SEL-L-002.
  IF SUBRC EQ 0.
    PERFORM MERGE_LINE USING '001' '004'.
    PERFORM STORE_ACTIVE_COLUMN
            TABLES ACTIVE_COL
            USING INDEX_R '001'.
  ENDIF.
  IF COUNT_L_LEV > SAVE_COUNT_L_LEV.
    ACCEPTING_ROWS-SEQNR = '001'.
    APPEND ACCEPTING_ROWS.
  ENDIF.
  IF COUNT_L_LEV NE 0.
    FORM_PRINT_SW = FORMPRINT_FLAG.
    REFRESH C_LEV.
    COUNT_C_LEV = 0.
    READ TABLE ACTIVE_COL WITH KEY '001' BINARY SEARCH.
    IF SY-SUBRC = 0.
      PERFORM SEL-C-002.
      IF SUBRC EQ 0.
        PERFORM MERGE_COL  USING '001' '001'.
      ENDIF.
    ENDIF.
  ENDIF.
  IF COUNT_C_LEV NE 0.
    FLAG-USED = 'X'.
    ADD $RWTAB-$$COUNTER TO STAT_USED_R02.
    ADD $RWTAB-$$AUTH_COUNTER TO STAT_AUTH_R02.
    IF FORMPRINT_FLAG IS INITIAL.
      CHECK $RWTAB-$$AUTH_COUNTER LT $RWTAB-$$COUNTER.
    ENDIF.
    PERFORM MERGE_RC USING '02'.
    PERFORM GET_DATA USING ' '
                   R02_GLOBAL_IBV_FLAG.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SEL-R-03                                           *
*----------------------------------------------------------------------*

*.........selection for report: Z302YPXX...............................*

*----------------------------------------------------------------------*
FORM SEL-R-03 .
  DATA: BEGIN OF ACTIVE_COL OCCURS 0,
        SEQNR(3) TYPE C,
        END   OF ACTIVE_COL.
  DATA: BEGIN OF ACCEPTING_ROWS OCCURS 0,
        SEQNR LIKE RRD-SEQNR,
        END OF ACCEPTING_ROWS.
  DATA: X_ACCEPTED(1)       TYPE C,
        SAVE_COUNT_L_LEV    TYPE I.
  SEL_PERIOD = ' '.
  INDEX_R = 03.
*         field: RFIKRS / set: 0002$Z302#######VAL0266 ZFMZ302YPXX Sel *

  IF NOT $RWTAB-RFIKRS
     BETWEEN CHECK_RSD00009-FROM AND CHECK_RSD00009-TO.
    READ TABLE CHECK_RSD00009
         WITH KEY TO = $RWTAB-RFIKRS
         BINARY SEARCH.
    CHECK_RSD00009_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00009 INDEX CHECK_RSD00009_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00009-VALID IS INITIAL.  EXIT.  ENDIF.
*         field: RVERS / set: 0002$Z302#######VAL0270 ZFMZ302YPXX Sele *

  IF NOT $RWTAB-RVERS
     BETWEEN CHECK_RSD00010-FROM AND CHECK_RSD00010-TO.
    READ TABLE CHECK_RSD00010
         WITH KEY TO = $RWTAB-RVERS
         BINARY SEARCH.
    CHECK_RSD00010_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00010 INDEX CHECK_RSD00010_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00010-VALID IS INITIAL.  EXIT.  ENDIF.
*         field: RYEAR / set: 0002$Z302#######VAL0272 ZFMZ302YPXX Sele *

  IF NOT $RWTAB-RYEAR
     BETWEEN CHECK_RSD00011-FROM AND CHECK_RSD00011-TO.
    READ TABLE CHECK_RSD00011
         WITH KEY TO = $RWTAB-RYEAR
         BINARY SEARCH.
    CHECK_RSD00011_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00011 INDEX CHECK_RSD00011_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00011-VALID IS INITIAL.  EXIT.  ENDIF.
*         field: RSTATS / set: 0002$Z302#######VAL0268 ZFMZ302YPXX Sel *

  IF NOT $RWTAB-RSTATS
     BETWEEN CHECK_RSD00012-FROM AND CHECK_RSD00012-TO.
    READ TABLE CHECK_RSD00012
         WITH KEY TO = $RWTAB-RSTATS
         BINARY SEARCH.
    CHECK_RSD00012_INDEX = SY-TABIX.
    IF SY-SUBRC = 4.
      READ TABLE CHECK_RSD00012 INDEX CHECK_RSD00012_INDEX.
    ENDIF.
  ENDIF.
  IF CHECK_RSD00012-VALID IS INITIAL.  EXIT.  ENDIF.
  REFRESH L_LEV.
  COUNT_L_LEV = 0.
  REFRESH ACCEPTING_ROWS.
  REFRESH C_LEV.
  COUNT_C_LEV = 0.
  FORM_PRINT_SW = ' '.
*         row_block_no._001                                            *
  SAVE_COUNT_L_LEV = COUNT_L_LEV.
  PERFORM SEL-L-003.
  IF SUBRC EQ 0.
    PERFORM MERGE_LINE USING '001' '004'.
    PERFORM STORE_ACTIVE_COLUMN
            TABLES ACTIVE_COL
            USING INDEX_R '001'.
  ENDIF.
  IF COUNT_L_LEV > SAVE_COUNT_L_LEV.
    ACCEPTING_ROWS-SEQNR = '001'.
    APPEND ACCEPTING_ROWS.
  ENDIF.
  IF COUNT_L_LEV NE 0.
    FORM_PRINT_SW = FORMPRINT_FLAG.
    REFRESH C_LEV.
    COUNT_C_LEV = 0.
    READ TABLE ACTIVE_COL WITH KEY '001' BINARY SEARCH.
    IF SY-SUBRC = 0.
      PERFORM SEL-C-003.
      IF SUBRC EQ 0.
        PERFORM MERGE_COL  USING '001' '001'.
      ENDIF.
    ENDIF.
  ENDIF.
  IF COUNT_C_LEV NE 0.
    FLAG-USED = 'X'.
    ADD $RWTAB-$$COUNTER TO STAT_USED_R03.
    ADD $RWTAB-$$AUTH_COUNTER TO STAT_AUTH_R03.
    IF FORMPRINT_FLAG IS INITIAL.
      CHECK $RWTAB-$$AUTH_COUNTER LT $RWTAB-$$COUNTER.
    ENDIF.
    PERFORM MERGE_RC USING '03'.
    PERFORM GET_DATA USING ' '
                   R03_GLOBAL_IBV_FLAG.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: DATA_FIELD                                         *
*----------------------------------------------------------------------*
*         Calculate DATA                                               *
*----------------------------------------------------------------------*
FORM DATA_FIELD
     USING DF_FROM LIKE OUT-FROMP
           DF_TO   LIKE OUT-TOP.
  DATA: F_VALUE    TYPE F,
        L_NEW_UNIT TYPE GRWT_S_UNIT-UNIT,
        SUBRC      TYPE I.
  CASE OUT-FIELD.
    WHEN '0001'.   "dataset entry: $Z302##Z302FCPY0001
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0001
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0002'.   "dataset entry: $Z302##Z302FCPY0002
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0002
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0003'.   "dataset entry: $Z302##Z302FCPY0003
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0003
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0004'.   "dataset entry: $Z302##Z302FCPY0004
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0004
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0005'.   "dataset entry: $Z302##Z302FCPY0005
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0005
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0006'.   "dataset entry: $Z302##Z302FCPY0006
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0006
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0007'.   "dataset entry: $Z302##Z302FCPY0007
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0007
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0008'.   "dataset entry: $Z302##Z302FCPY0008
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0008
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0009'.   "dataset entry: $Z302##Z302FCPY0009
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0009
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0010'.   "dataset entry: $Z302##Z302YCPX0010
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0010
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0011'.   "dataset entry: $Z302##Z302YCPX0011
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0011
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0012'.   "dataset entry: $Z302##Z302YCPX0012
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0012
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0013'.   "dataset entry: $Z302##Z302YCPX0013
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0013
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0014'.   "dataset entry: $Z302##Z302YCPX0014
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0014
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0015'.   "dataset entry: $Z302##Z302YCPX0015
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0015
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0016'.   "dataset entry: $Z302##Z302YCPX0016
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0016
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0017'.   "dataset entry: $Z302##Z302YCPX0017
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0017
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0018'.   "dataset entry: $Z302##Z302YCPX0018
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0018
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0019'.   "dataset entry: $Z302##Z302YPXX0019
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0019
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0020'.   "dataset entry: $Z302##Z302YPXX0020
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0020
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0021'.   "dataset entry: $Z302##Z302YPXX0021
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0021
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0022'.   "dataset entry: $Z302##Z302YPXX0022
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0022
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0023'.   "dataset entry: $Z302##Z302YPXX0023
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0023
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0024'.   "dataset entry: $Z302##Z302YPXX0024
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0024
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0025'.   "dataset entry: $Z302##Z302YPXX0025
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0025
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0026'.   "dataset entry: $Z302##Z302YPXX0026
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0026
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
    WHEN '0027'.   "dataset entry: $Z302##Z302YPXX0027
      IF DF_FROM <> 0.
        ADD FMRBCS-HSL01 FROM DF_FROM TO DF_TO GIVING
                            OUT-AMOUNT .
      ELSE.
        ADD FMRBCS-HSL01 FROM 1 TO DF_TO GIVING
                            OUT-AMOUNT .
      ENDIF.
      PERFORM F04_CONVERT_UNIT(SAPFGRWX)
              USING    OUT-AMOUNT  $RWTAB-RHCUR 'C' ' ' 0027
                       PSCCCURR PSCCRATE PSCCDATE SSCCKEYF[]
              CHANGING OUT-AMOUNT  L_NEW_UNIT OUT-P_UNIT_TAB.
  ENDCASE.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: CLEAR-DATAFIELDS                                   *
*----------------------------------------------------------------------*
*         clear datafields for one period of CUR-TAB                   *
*----------------------------------------------------------------------*
FORM CLEAR-DATAFIELDS USING CD_PERIOD.
  DATA: FIELD_LENGTH TYPE I.
  FIELD-SYMBOLS <TMP_FIELD>.

  DATA: l_field         TYPE string,
        l_per2(2)       TYPE c,
        l_per3(3)       TYPE c.
  FIELD-SYMBOLS <l_fs>.

  unpack CD_PERIOD to l_per3.
  unpack CD_PERIOD to l_per2.

  CASE CUR-TAB.
    WHEN 'FMRBCS                        '.
      L_FIELD =  'HSLyy'.
      REPLACE 'yy' WITH L_PER2 INTO L_FIELD.
      ASSIGN COMPONENT l_field OF STRUCTURE
                       FMRBCS                         TO <l_fs>.
      clear <l_fs>.

  ENDCASE.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: CLEAR-ROW-SUMS                                     *
*----------------------------------------------------------------------*
*         clear all sums in current row (table SUM)                    *
*----------------------------------------------------------------------*
FORM CLEAR-ROW-SUMS.
  DATA COL LIKE SUM-C00001.
  DO 00009 TIMES VARYING COL FROM SUM-C00001 NEXT SUM-C00002.
    CLEAR COL.
  ENDDO.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: EXPORT_SELECTION                                   *
*----------------------------------------------------------------------*
FORM EXPORT_SELECTION_TO_GREP
     USING VALUE(GREP_KEY) TYPE GREP_KEY.
  EXPORT
     INDXT
     INDXN
     EXTRACT_KEY
     SELECTION
     CSTAT FSTAT RSTAT ITAFSTAT
     VARIABLES
     UNIT_TAB
     G_ARCHIVE_FLAG
     G_ARCHIVE_OBJECTS
     VARIATION VARIATION_REP VAR_ENTRIES
     I_GRIX_SELP
     I_GRIX_RSD
     X_SELTAB_0
     S_SELTAB
     G_T_XMESG
     G_T_SMESG
     OUT2_DIR OUT2_BLOCKS
     %4FFIKRS
     %4FFYEAR
     %0S-PERF
     %4PERID
     %4FFUND
     _4FFUND
     %4FFICTR
     _4FFICTR
     %4FFIPEX
     _4FFIPEX
     %4FFPROG
     _4FFPROG
  TO DATABASE GREP(GL) ID GREP_KEY.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: EXPORT_SELECTION                                   *
*----------------------------------------------------------------------*
FORM EXPORT_SELECTION_TO_MEMORY.
  EXPORT
     INDXT
     INDXN
     EXTRACT_KEY
     SELECTION
     CSTAT FSTAT RSTAT ITAFSTAT
     VARIABLES
     UNIT_TAB
     G_ARCHIVE_FLAG
     G_ARCHIVE_OBJECTS
     VARIATION VARIATION_REP VAR_ENTRIES
     I_GRIX_SELP
     I_GRIX_RSD
     X_SELTAB_0
     S_SELTAB
     G_T_XMESG
     G_T_SMESG
     OUT2_DIR OUT2_BLOCKS
     %4FFIKRS
     %4FFYEAR
     %0S-PERF
     %4PERID
     %4FFUND
     _4FFUND
     %4FFICTR
     _4FFICTR
     %4FFIPEX
     _4FFIPEX
     %4FFPROG
     _4FFPROG
  TO MEMORY ID 'RW_SELECTION_EDITION'.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SEL-L-001                                          *
*----------------------------------------------------------------------*

*.........selection for report: Z302FCPY...............................*


*.........           row block: 001....................................*

*----------------------------------------------------------------------*
FORM SEL-L-001 .
  DATA: VARIATION_REP_WA LIKE VARDR.
  IF NOT FORMPRINT_FLAG IS INITIAL.
    subrc = 4.
    exit.
  endif.
  STATICS TOT_LEVEL_RFUND                          TYPE I VALUE 0.
 IF $RWTAB-RFUND NE R01_L001_RFUND_V-VALUE OR
     R01_L001_RFUND_V-INIT                          = 'X'.
     R01_L001_RFUND_V-INIT                          = SPACE.
     R01_L001_RFUND_V-SEQNR                          = 0.
  ELSE.
     IF R01_L001_RFUND_V-SEQNR                          EQ 0.
        SUBRC = 4.
        EXIT.
     ENDIF.
  ENDIF.
  PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
          USING          6 $RWTAB-RFUND
                TOT_LEVEL_RFUND                          'X' 'L'
                'N' '01'
                ' ' ' '
                R01_L001_RFUND_V-SEQNR
                R01_L001_RFUND_V-VALUE
                R01_L001_RFUND_V-INIT
                R01_L001_RFUND_V-LINE
                R01_L001_RFUND_V-LEVEL
                R01_L001_RFUND_V-FLAG
                R01_L001_RFUND_V-PUP
                R01_L001_RFUND_V-INTERVAL
                R01_L001_RFUND_V-ZPFLAG
                R01_L001_RFUND_S-SEQNR
                R01_L001_RFUND_S-LEVEL
                R01_L001_RFUND_S-FLAG
                R01_L001_RFUND_S-PUP
                1
                VALID-RFUND                          SUBRC.
  PERFORM APPEND-DIM USING 001 'RFUND                         '.
  STATICS TOT_LEVEL_RFUNDSCTR                      TYPE I VALUE 0.
  IF SUBRC EQ 0.
 IF $RWTAB-RFUNDSCTR NE R01_L001_RFUNDSCTR_V-VALUE OR
        R01_L001_RFUNDSCTR_V-INIT                      = 'X'.
        R01_L001_RFUNDSCTR_V-INIT                      = SPACE.
        R01_L001_RFUNDSCTR_V-SEQNR                      = 0.
     ELSE.
        IF R01_L001_RFUNDSCTR_V-SEQNR                      EQ 0.
           SUBRC = 4.
           EXIT.
        ENDIF.
     ENDIF.
     PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
             USING          7 $RWTAB-RFUNDSCTR
                   TOT_LEVEL_RFUNDSCTR                      'X' 'L'
                   'N' '02'
                   ' ' ' '
                   R01_L001_RFUNDSCTR_V-SEQNR
                   R01_L001_RFUNDSCTR_V-VALUE
                   R01_L001_RFUNDSCTR_V-INIT
                   R01_L001_RFUNDSCTR_V-LINE
                   R01_L001_RFUNDSCTR_V-LEVEL
                   R01_L001_RFUNDSCTR_V-FLAG
                   R01_L001_RFUNDSCTR_V-PUP
                   R01_L001_RFUNDSCTR_V-INTERVAL
                   R01_L001_RFUNDSCTR_V-ZPFLAG
                   R01_L001_RFUNDSCTR_S-SEQNR
                   R01_L001_RFUNDSCTR_S-LEVEL
                   R01_L001_RFUNDSCTR_S-FLAG
                   R01_L001_RFUNDSCTR_S-PUP
                   1
                   VALID-RFUNDSCTR                      SUBRC.
     PERFORM APPEND-DIM USING 002 'RFUNDSCTR                     '.
     STATICS TOT_LEVEL_RCMMTITEM                      TYPE I VALUE 0.
     IF SUBRC EQ 0.
 IF $RWTAB-RCMMTITEM NE R01_L001_RCMMTITEM_V-VALUE OR
           R01_L001_RCMMTITEM_V-INIT                      = 'X'.
           R01_L001_RCMMTITEM_V-INIT                      = SPACE.
           R01_L001_RCMMTITEM_V-SEQNR                      = 0.
        ELSE.
           IF R01_L001_RCMMTITEM_V-SEQNR                      EQ 0.
              SUBRC = 4.
              EXIT.
           ENDIF.
        ENDIF.
        PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
                USING          8 $RWTAB-RCMMTITEM
                      TOT_LEVEL_RCMMTITEM                      'X' 'L'
                      'N' '03'
                      ' ' ' '
                      R01_L001_RCMMTITEM_V-SEQNR
                      R01_L001_RCMMTITEM_V-VALUE
                      R01_L001_RCMMTITEM_V-INIT
                      R01_L001_RCMMTITEM_V-LINE
                      R01_L001_RCMMTITEM_V-LEVEL
                      R01_L001_RCMMTITEM_V-FLAG
                      R01_L001_RCMMTITEM_V-PUP
                      R01_L001_RCMMTITEM_V-INTERVAL
                      R01_L001_RCMMTITEM_V-ZPFLAG
                      R01_L001_RCMMTITEM_S-SEQNR
                      R01_L001_RCMMTITEM_S-LEVEL
                      R01_L001_RCMMTITEM_S-FLAG
                      R01_L001_RCMMTITEM_S-PUP
                      1
                      VALID-RCMMTITEM                      SUBRC.
        PERFORM APPEND-DIM USING 003 'RCMMTITEM                     '.
 STATICS TOT_LEVEL_RMEASURE TYPE I VALUE 0.
        IF SUBRC EQ 0.
 IF $RWTAB-RMEASURE NE R01_L001_RMEASURE_V-VALUE OR
              R01_L001_RMEASURE_V-INIT                       = 'X'.
              R01_L001_RMEASURE_V-INIT                       = SPACE.
              R01_L001_RMEASURE_V-SEQNR                       = 0.
           ELSE.
              IF R01_L001_RMEASURE_V-SEQNR                       EQ 0.
                 SUBRC = 4.
                 EXIT.
              ENDIF.
           ENDIF.
           PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
                   USING          9 $RWTAB-RMEASURE
 TOT_LEVEL_RMEASURE 'X' 'L'
                         'N' '04'
                         ' ' ' '
                         R01_L001_RMEASURE_V-SEQNR
                         R01_L001_RMEASURE_V-VALUE
                         R01_L001_RMEASURE_V-INIT
                         R01_L001_RMEASURE_V-LINE
                         R01_L001_RMEASURE_V-LEVEL
                         R01_L001_RMEASURE_V-FLAG
                         R01_L001_RMEASURE_V-PUP
                         R01_L001_RMEASURE_V-INTERVAL
                         R01_L001_RMEASURE_V-ZPFLAG
                         R01_L001_RMEASURE_S-SEQNR
                         R01_L001_RMEASURE_S-LEVEL
                         R01_L001_RMEASURE_S-FLAG
                         R01_L001_RMEASURE_S-PUP
                         1
                         VALID-RMEASURE                       SUBRC.
 PERFORM APPEND-DIM USING 004 'RMEASURE                      '.
        ENDIF.
     ENDIF.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SEL-L-002                                          *
*----------------------------------------------------------------------*

*.........selection for report: Z302YCPX...............................*


*.........           row block: 001....................................*

*----------------------------------------------------------------------*
FORM SEL-L-002 .
  DATA: VARIATION_REP_WA LIKE VARDR.
  IF NOT FORMPRINT_FLAG IS INITIAL.
    subrc = 4.
    exit.
  endif.
  STATICS TOT_LEVEL_RFUND                          TYPE I VALUE 01.
 IF $RWTAB-RFUND NE R02_L001_RFUND_V-VALUE OR
     R02_L001_RFUND_V-INIT                          = 'X'.
     R02_L001_RFUND_V-INIT                          = SPACE.
     R02_L001_RFUND_V-SEQNR                          = 0.
  ELSE.
     IF R02_L001_RFUND_V-SEQNR                          EQ 0.
        SUBRC = 4.
        EXIT.
     ENDIF.
  ENDIF.
  PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
          USING         16 $RWTAB-RFUND
                TOT_LEVEL_RFUND                          'X' 'L'
                'N' '01'
                ' ' ' '
                R02_L001_RFUND_V-SEQNR
                R02_L001_RFUND_V-VALUE
                R02_L001_RFUND_V-INIT
                R02_L001_RFUND_V-LINE
                R02_L001_RFUND_V-LEVEL
                R02_L001_RFUND_V-FLAG
                R02_L001_RFUND_V-PUP
                R02_L001_RFUND_V-INTERVAL
                R02_L001_RFUND_V-ZPFLAG
                R02_L001_RFUND_S-SEQNR
                R02_L001_RFUND_S-LEVEL
                R02_L001_RFUND_S-FLAG
                R02_L001_RFUND_S-PUP
                1
                VALID-RFUND                          SUBRC.
  PERFORM APPEND-DIM USING 001 'RFUND                         '.
  STATICS TOT_LEVEL_RMEASURE                       TYPE I VALUE 0.
  IF SUBRC EQ 0.
 IF $RWTAB-RMEASURE NE R02_L001_RMEASURE_V-VALUE OR
        R02_L001_RMEASURE_V-INIT                       = 'X'.
        R02_L001_RMEASURE_V-INIT                       = SPACE.
        R02_L001_RMEASURE_V-SEQNR                       = 0.
     ELSE.
        IF R02_L001_RMEASURE_V-SEQNR                       EQ 0.
           SUBRC = 4.
           EXIT.
        ENDIF.
     ENDIF.
     PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
             USING         17 $RWTAB-RMEASURE
                   TOT_LEVEL_RMEASURE                       'X' 'L'
                   'N' '02'
                   ' ' ' '
                   R02_L001_RMEASURE_V-SEQNR
                   R02_L001_RMEASURE_V-VALUE
                   R02_L001_RMEASURE_V-INIT
                   R02_L001_RMEASURE_V-LINE
                   R02_L001_RMEASURE_V-LEVEL
                   R02_L001_RMEASURE_V-FLAG
                   R02_L001_RMEASURE_V-PUP
                   R02_L001_RMEASURE_V-INTERVAL
                   R02_L001_RMEASURE_V-ZPFLAG
                   R02_L001_RMEASURE_S-SEQNR
                   R02_L001_RMEASURE_S-LEVEL
                   R02_L001_RMEASURE_S-FLAG
                   R02_L001_RMEASURE_S-PUP
                   1
                   VALID-RMEASURE                       SUBRC.
     PERFORM APPEND-DIM USING 002 'RMEASURE                      '.
     STATICS TOT_LEVEL_RFUNDSCTR                      TYPE I VALUE 0.
     IF SUBRC EQ 0.
 IF $RWTAB-RFUNDSCTR NE R02_L001_RFUNDSCTR_V-VALUE OR
           R02_L001_RFUNDSCTR_V-INIT                      = 'X'.
           R02_L001_RFUNDSCTR_V-INIT                      = SPACE.
           R02_L001_RFUNDSCTR_V-SEQNR                      = 0.
        ELSE.
           IF R02_L001_RFUNDSCTR_V-SEQNR                      EQ 0.
              SUBRC = 4.
              EXIT.
           ENDIF.
        ENDIF.
        PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
                USING         18 $RWTAB-RFUNDSCTR
                      TOT_LEVEL_RFUNDSCTR                      'X' 'L'
                      'N' '03'
                      ' ' ' '
                      R02_L001_RFUNDSCTR_V-SEQNR
                      R02_L001_RFUNDSCTR_V-VALUE
                      R02_L001_RFUNDSCTR_V-INIT
                      R02_L001_RFUNDSCTR_V-LINE
                      R02_L001_RFUNDSCTR_V-LEVEL
                      R02_L001_RFUNDSCTR_V-FLAG
                      R02_L001_RFUNDSCTR_V-PUP
                      R02_L001_RFUNDSCTR_V-INTERVAL
                      R02_L001_RFUNDSCTR_V-ZPFLAG
                      R02_L001_RFUNDSCTR_S-SEQNR
                      R02_L001_RFUNDSCTR_S-LEVEL
                      R02_L001_RFUNDSCTR_S-FLAG
                      R02_L001_RFUNDSCTR_S-PUP
                      1
                      VALID-RFUNDSCTR                      SUBRC.
        PERFORM APPEND-DIM USING 003 'RFUNDSCTR                     '.
 STATICS TOT_LEVEL_RCMMTITEM TYPE I VALUE 0.
        IF SUBRC EQ 0.
 IF $RWTAB-RCMMTITEM NE R02_L001_RCMMTITEM_V-VALUE OR
              R02_L001_RCMMTITEM_V-INIT                      = 'X'.
              R02_L001_RCMMTITEM_V-INIT                      = SPACE.
              R02_L001_RCMMTITEM_V-SEQNR                      = 0.
           ELSE.
              IF R02_L001_RCMMTITEM_V-SEQNR                      EQ 0.
                 SUBRC = 4.
                 EXIT.
              ENDIF.
           ENDIF.
           PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
                   USING         19 $RWTAB-RCMMTITEM
 TOT_LEVEL_RCMMTITEM 'X' 'L'
                         'N' '04'
                         ' ' ' '
                         R02_L001_RCMMTITEM_V-SEQNR
                         R02_L001_RCMMTITEM_V-VALUE
                         R02_L001_RCMMTITEM_V-INIT
                         R02_L001_RCMMTITEM_V-LINE
                         R02_L001_RCMMTITEM_V-LEVEL
                         R02_L001_RCMMTITEM_V-FLAG
                         R02_L001_RCMMTITEM_V-PUP
                         R02_L001_RCMMTITEM_V-INTERVAL
                         R02_L001_RCMMTITEM_V-ZPFLAG
                         R02_L001_RCMMTITEM_S-SEQNR
                         R02_L001_RCMMTITEM_S-LEVEL
                         R02_L001_RCMMTITEM_S-FLAG
                         R02_L001_RCMMTITEM_S-PUP
                         1
                         VALID-RCMMTITEM                      SUBRC.
 PERFORM APPEND-DIM USING 004 'RCMMTITEM                     '.
        ENDIF.
     ENDIF.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SEL-L-003                                          *
*----------------------------------------------------------------------*

*.........selection for report: Z302YPXX...............................*


*.........           row block: 001....................................*

*----------------------------------------------------------------------*
FORM SEL-L-003 .
  DATA: VARIATION_REP_WA LIKE VARDR.
  IF NOT FORMPRINT_FLAG IS INITIAL.
    subrc = 4.
    exit.
  endif.
  STATICS TOT_LEVEL_RMEASURE                       TYPE I VALUE 0.
 IF $RWTAB-RMEASURE NE R03_L001_RMEASURE_V-VALUE OR
     R03_L001_RMEASURE_V-INIT                       = 'X'.
     R03_L001_RMEASURE_V-INIT                       = SPACE.
     R03_L001_RMEASURE_V-SEQNR                       = 0.
  ELSE.
     IF R03_L001_RMEASURE_V-SEQNR                       EQ 0.
        SUBRC = 4.
        EXIT.
     ENDIF.
  ENDIF.
  PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
          USING         26 $RWTAB-RMEASURE
                TOT_LEVEL_RMEASURE                       'X' 'L'
                'N' '01'
                ' ' ' '
                R03_L001_RMEASURE_V-SEQNR
                R03_L001_RMEASURE_V-VALUE
                R03_L001_RMEASURE_V-INIT
                R03_L001_RMEASURE_V-LINE
                R03_L001_RMEASURE_V-LEVEL
                R03_L001_RMEASURE_V-FLAG
                R03_L001_RMEASURE_V-PUP
                R03_L001_RMEASURE_V-INTERVAL
                R03_L001_RMEASURE_V-ZPFLAG
                R03_L001_RMEASURE_S-SEQNR
                R03_L001_RMEASURE_S-LEVEL
                R03_L001_RMEASURE_S-FLAG
                R03_L001_RMEASURE_S-PUP
                1
                VALID-RMEASURE                       SUBRC.
  PERFORM APPEND-DIM USING 001 'RMEASURE                      '.
  STATICS TOT_LEVEL_RCMMTITEM                      TYPE I VALUE 0.
  IF SUBRC EQ 0.
 IF $RWTAB-RCMMTITEM NE R03_L001_RCMMTITEM_V-VALUE OR
        R03_L001_RCMMTITEM_V-INIT                      = 'X'.
        R03_L001_RCMMTITEM_V-INIT                      = SPACE.
        R03_L001_RCMMTITEM_V-SEQNR                      = 0.
     ELSE.
        IF R03_L001_RCMMTITEM_V-SEQNR                      EQ 0.
           SUBRC = 4.
           EXIT.
        ENDIF.
     ENDIF.
     PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
             USING         27 $RWTAB-RCMMTITEM
                   TOT_LEVEL_RCMMTITEM                      'X' 'L'
                   'N' '02'
                   ' ' ' '
                   R03_L001_RCMMTITEM_V-SEQNR
                   R03_L001_RCMMTITEM_V-VALUE
                   R03_L001_RCMMTITEM_V-INIT
                   R03_L001_RCMMTITEM_V-LINE
                   R03_L001_RCMMTITEM_V-LEVEL
                   R03_L001_RCMMTITEM_V-FLAG
                   R03_L001_RCMMTITEM_V-PUP
                   R03_L001_RCMMTITEM_V-INTERVAL
                   R03_L001_RCMMTITEM_V-ZPFLAG
                   R03_L001_RCMMTITEM_S-SEQNR
                   R03_L001_RCMMTITEM_S-LEVEL
                   R03_L001_RCMMTITEM_S-FLAG
                   R03_L001_RCMMTITEM_S-PUP
                   1
                   VALID-RCMMTITEM                      SUBRC.
     PERFORM APPEND-DIM USING 002 'RCMMTITEM                     '.
     STATICS TOT_LEVEL_RFUNDSCTR                      TYPE I VALUE 01.
     IF SUBRC EQ 0.
 IF $RWTAB-RFUNDSCTR NE R03_L001_RFUNDSCTR_V-VALUE OR
           R03_L001_RFUNDSCTR_V-INIT                      = 'X'.
           R03_L001_RFUNDSCTR_V-INIT                      = SPACE.
           R03_L001_RFUNDSCTR_V-SEQNR                      = 0.
        ELSE.
           IF R03_L001_RFUNDSCTR_V-SEQNR                      EQ 0.
              SUBRC = 4.
              EXIT.
           ENDIF.
        ENDIF.
        PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
                USING         28 $RWTAB-RFUNDSCTR
                      TOT_LEVEL_RFUNDSCTR                      'X' 'L'
                      'N' '03'
                      ' ' ' '
                      R03_L001_RFUNDSCTR_V-SEQNR
                      R03_L001_RFUNDSCTR_V-VALUE
                      R03_L001_RFUNDSCTR_V-INIT
                      R03_L001_RFUNDSCTR_V-LINE
                      R03_L001_RFUNDSCTR_V-LEVEL
                      R03_L001_RFUNDSCTR_V-FLAG
                      R03_L001_RFUNDSCTR_V-PUP
                      R03_L001_RFUNDSCTR_V-INTERVAL
                      R03_L001_RFUNDSCTR_V-ZPFLAG
                      R03_L001_RFUNDSCTR_S-SEQNR
                      R03_L001_RFUNDSCTR_S-LEVEL
                      R03_L001_RFUNDSCTR_S-FLAG
                      R03_L001_RFUNDSCTR_S-PUP
                      1
                      VALID-RFUNDSCTR                      SUBRC.
        PERFORM APPEND-DIM USING 003 'RFUNDSCTR                     '.
 STATICS TOT_LEVEL_RFUND TYPE I VALUE 01.
        IF SUBRC EQ 0.
 IF $RWTAB-RFUND NE R03_L001_RFUND_V-VALUE OR
              R03_L001_RFUND_V-INIT                          = 'X'.
              R03_L001_RFUND_V-INIT                          = SPACE.
              R03_L001_RFUND_V-SEQNR                          = 0.
           ELSE.
              IF R03_L001_RFUND_V-SEQNR                          EQ 0.
                 SUBRC = 4.
                 EXIT.
              ENDIF.
           ENDIF.
           PERFORM E01_CHECK_DIMENSION(SAPFGRWS)
                   USING         29 $RWTAB-RFUND
 TOT_LEVEL_RFUND 'X' 'L'
                         'N' '04'
                         ' ' ' '
                         R03_L001_RFUND_V-SEQNR
                         R03_L001_RFUND_V-VALUE
                         R03_L001_RFUND_V-INIT
                         R03_L001_RFUND_V-LINE
                         R03_L001_RFUND_V-LEVEL
                         R03_L001_RFUND_V-FLAG
                         R03_L001_RFUND_V-PUP
                         R03_L001_RFUND_V-INTERVAL
                         R03_L001_RFUND_V-ZPFLAG
                         R03_L001_RFUND_S-SEQNR
                         R03_L001_RFUND_S-LEVEL
                         R03_L001_RFUND_S-FLAG
                         R03_L001_RFUND_S-PUP
                         1
                         VALID-RFUND                          SUBRC.
 PERFORM APPEND-DIM USING 004 'RFUND                         '.
        ENDIF.
     ENDIF.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SEL-C-001                                          *
*----------------------------------------------------------------------*

*.........selection for report: Z302FCPY...............................*


*.........        column block: 001....................................*

*----------------------------------------------------------------------*
FORM SEL-C-001 .
  REFRESH: DYYY.
  CLEAR:   DYYY.
  SUBRC = 4.
  IF $RWTAB-BUDTYPE_9 IN R_0000000032 AND
  $RWTAB-RLDNR IN R_0000000033 AND
  $RWTAB-VALTYPE_9 IN R_0000000035 AND
  $RWTAB-WFSTATE_9 IN R_0000000036 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                           9 '001'
                  '0001'
                  '01' 'X' 'C'
                  0000000010 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000038 AND
  $RWTAB-PROCESS_9 IN R_0000000039 AND
  $RWTAB-RLDNR IN R_0000000040 AND
  $RWTAB-VALTYPE_9 IN R_0000000042 AND
  $RWTAB-WFSTATE_9 IN R_0000000043 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          12 '004'
                  '0002'
                  '01' 'X' 'C'
                  0000000010 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000045 AND
  $RWTAB-RLDNR IN R_0000000046 AND
  $RWTAB-VALTYPE_9 IN R_0000000048 AND
  $RWTAB-WFSTATE_9 IN R_0000000049 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          13 '005'
                  '0003'
                  '01' 'X' 'C'
                  0000000010 003 SUBRC.
  ENDIF.
  IF $RWTAB-PROCESS_9 IN R_0000000051 AND
  $RWTAB-RLDNR IN R_0000000052 AND
  $RWTAB-VALTYPE_9 IN R_0000000054 AND
  $RWTAB-WFSTATE_9 IN R_0000000055 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          14 '006'
                  '0004'
                  '01' 'X' 'C'
                  0000000010 003 SUBRC.
  ENDIF.
  IF $RWTAB-RCFLEV IN R_0000000057 AND
  $RWTAB-RLDNR IN R_0000000058 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          15 '007'
                  '0005'
                  '01' 'X' 'C'
                  0000000010 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000061 AND
  $RWTAB-PROCESS_9 IN R_0000000062 AND
  $RWTAB-RLDNR IN R_0000000063 AND
  $RWTAB-VALTYPE_9 IN R_0000000065 AND
  $RWTAB-WFSTATE_9 IN R_0000000066 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          18 '010'
                  '0006'
                  '01' 'X' 'C'
                  0000000010 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000068 AND
  $RWTAB-RLDNR IN R_0000000069 AND
  $RWTAB-VALTYPE_9 IN R_0000000071 AND
  $RWTAB-WFSTATE_9 IN R_0000000072 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          19 '011'
                  '0007'
                  '01' 'X' 'C'
                  0000000010 003 SUBRC.
  ENDIF.
  IF $RWTAB-RLDNR IN R_0000000074 AND
  $RWTAB-VALTYPE_9 IN R_0000000076 AND
  $RWTAB-WFSTATE_9 IN R_0000000077 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          20 '012'
                  '0008'
                  '01' 'X' 'C'
                  0000000010 003 SUBRC.
  ENDIF.
  IF $RWTAB-RCFLEV IN R_0000000079 AND
  $RWTAB-RLDNR IN R_0000000080 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          21 '013'
                  '0009'
                  '01' 'X' 'C'
                  0000000010 003 SUBRC.
  ENDIF.
  PERFORM APPEND-DIM USING 001 '*D        '.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SEL-C-002                                          *
*----------------------------------------------------------------------*

*.........selection for report: Z302YCPX...............................*


*.........        column block: 001....................................*

*----------------------------------------------------------------------*
FORM SEL-C-002 .
  REFRESH: DYYY.
  CLEAR:   DYYY.
  SUBRC = 4.
  IF $RWTAB-BUDTYPE_9 IN R_0000000083 AND
  $RWTAB-RLDNR IN R_0000000084 AND
  $RWTAB-VALTYPE_9 IN R_0000000086 AND
  $RWTAB-WFSTATE_9 IN R_0000000087 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          32 '001'
                  '0010'
                  '01' 'X' 'C'
                  0000000020 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000089 AND
  $RWTAB-PROCESS_9 IN R_0000000090 AND
  $RWTAB-RLDNR IN R_0000000091 AND
  $RWTAB-VALTYPE_9 IN R_0000000093 AND
  $RWTAB-WFSTATE_9 IN R_0000000094 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          35 '004'
                  '0011'
                  '01' 'X' 'C'
                  0000000020 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000096 AND
  $RWTAB-RLDNR IN R_0000000097 AND
  $RWTAB-VALTYPE_9 IN R_0000000099 AND
  $RWTAB-WFSTATE_9 IN R_0000000100 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          36 '005'
                  '0012'
                  '01' 'X' 'C'
                  0000000020 003 SUBRC.
  ENDIF.
  IF $RWTAB-RLDNR IN R_0000000102 AND
  $RWTAB-VALTYPE_9 IN R_0000000104 AND
  $RWTAB-WFSTATE_9 IN R_0000000105 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          37 '006'
                  '0013'
                  '01' 'X' 'C'
                  0000000020 003 SUBRC.
  ENDIF.
  IF $RWTAB-RCFLEV IN R_0000000107 AND
  $RWTAB-RLDNR IN R_0000000108 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          38 '007'
                  '0014'
                  '01' 'X' 'C'
                  0000000020 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000111 AND
  $RWTAB-PROCESS_9 IN R_0000000112 AND
  $RWTAB-RLDNR IN R_0000000113 AND
  $RWTAB-VALTYPE_9 IN R_0000000115 AND
  $RWTAB-WFSTATE_9 IN R_0000000116 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          41 '010'
                  '0015'
                  '01' 'X' 'C'
                  0000000020 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000118 AND
  $RWTAB-RLDNR IN R_0000000119 AND
  $RWTAB-VALTYPE_9 IN R_0000000121 AND
  $RWTAB-WFSTATE_9 IN R_0000000122 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          42 '011'
                  '0016'
                  '01' 'X' 'C'
                  0000000020 003 SUBRC.
  ENDIF.
  IF $RWTAB-RLDNR IN R_0000000124 AND
  $RWTAB-VALTYPE_9 IN R_0000000126 AND
  $RWTAB-WFSTATE_9 IN R_0000000127 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          43 '012'
                  '0017'
                  '01' 'X' 'C'
                  0000000020 003 SUBRC.
  ENDIF.
  IF $RWTAB-RCFLEV IN R_0000000129 AND
  $RWTAB-RLDNR IN R_0000000130 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          44 '013'
                  '0018'
                  '01' 'X' 'C'
                  0000000020 003 SUBRC.
  ENDIF.
  PERFORM APPEND-DIM USING 001 '*D        '.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SEL-C-003                                          *
*----------------------------------------------------------------------*

*.........selection for report: Z302YPXX...............................*


*.........        column block: 001....................................*

*----------------------------------------------------------------------*
FORM SEL-C-003 .
  REFRESH: DYYY.
  CLEAR:   DYYY.
  SUBRC = 4.
  IF $RWTAB-BUDTYPE_9 IN R_0000000133 AND
  $RWTAB-RLDNR IN R_0000000134 AND
  $RWTAB-VALTYPE_9 IN R_0000000136 AND
  $RWTAB-WFSTATE_9 IN R_0000000137 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          55 '001'
                  '0019'
                  '01' 'X' 'C'
                  0000000030 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000139 AND
  $RWTAB-PROCESS_9 IN R_0000000140 AND
  $RWTAB-RLDNR IN R_0000000141 AND
  $RWTAB-VALTYPE_9 IN R_0000000143 AND
  $RWTAB-WFSTATE_9 IN R_0000000144 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          58 '004'
                  '0020'
                  '01' 'X' 'C'
                  0000000030 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000146 AND
  $RWTAB-RLDNR IN R_0000000147 AND
  $RWTAB-VALTYPE_9 IN R_0000000149 AND
  $RWTAB-WFSTATE_9 IN R_0000000150 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          59 '005'
                  '0021'
                  '01' 'X' 'C'
                  0000000030 003 SUBRC.
  ENDIF.
  IF $RWTAB-RLDNR IN R_0000000152 AND
  $RWTAB-VALTYPE_9 IN R_0000000154 AND
  $RWTAB-WFSTATE_9 IN R_0000000155 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          60 '006'
                  '0022'
                  '01' 'X' 'C'
                  0000000030 003 SUBRC.
  ENDIF.
  IF $RWTAB-RCFLEV IN R_0000000157 AND
  $RWTAB-RLDNR IN R_0000000158 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          61 '007'
                  '0023'
                  '01' 'X' 'C'
                  0000000030 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000161 AND
  $RWTAB-PROCESS_9 IN R_0000000162 AND
  $RWTAB-RLDNR IN R_0000000163 AND
  $RWTAB-VALTYPE_9 IN R_0000000165 AND
  $RWTAB-WFSTATE_9 IN R_0000000166 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          64 '010'
                  '0024'
                  '01' 'X' 'C'
                  0000000030 003 SUBRC.
  ENDIF.
  IF $RWTAB-BUDTYPE_9 IN R_0000000168 AND
  $RWTAB-RLDNR IN R_0000000169 AND
  $RWTAB-VALTYPE_9 IN R_0000000171 AND
  $RWTAB-WFSTATE_9 IN R_0000000172 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          65 '011'
                  '0025'
                  '01' 'X' 'C'
                  0000000030 003 SUBRC.
  ENDIF.
  IF $RWTAB-RLDNR IN R_0000000174 AND
  $RWTAB-VALTYPE_9 IN R_0000000176 AND
  $RWTAB-WFSTATE_9 IN R_0000000177 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          66 '012'
                  '0026'
                  '01' 'X' 'C'
                  0000000030 003 SUBRC.
  ENDIF.
  IF $RWTAB-RCFLEV IN R_0000000179 AND
  $RWTAB-RLDNR IN R_0000000180 .

    PERFORM E09_SEL_DIM(SAPFGRWS)
            USING ' '  ' '
                          67 '013'
                  '0027'
                  '01' 'X' 'C'
                  0000000030 003 SUBRC.
  ENDIF.
  PERFORM APPEND-DIM USING 001 '*D        '.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: APPEND-DIM                                         *
*----------------------------------------------------------------------*
FORM APPEND-DIM
     USING AD_DIM   TYPE I
           AD_FIELD LIKE CUR-FIELD.
  IF SUBRC = 0.
    PERFORM AD_DIM OF
                      APP-DIM-001
                      APP-DIM-002
                      APP-DIM-003
                      APP-DIM-004.
  ENDIF.
ENDFORM.
FORM APP-DIM-001.
  CLEAR: D001.
  REFRESH: D001.
  LOOP AT DYYY.
    MOVE-CORRESPONDING DYYY TO D001.
    APPEND D001.
  ENDLOOP.
ENDFORM.
FORM APP-DIM-002.
  CLEAR: D002.
  REFRESH: D002.
  LOOP AT DYYY.
    MOVE-CORRESPONDING DYYY TO D002.
    APPEND D002.
  ENDLOOP.
ENDFORM.
FORM APP-DIM-003.
  CLEAR: D003.
  REFRESH: D003.
  LOOP AT DYYY.
    MOVE-CORRESPONDING DYYY TO D003.
    APPEND D003.
  ENDLOOP.
ENDFORM.
FORM APP-DIM-004.
  CLEAR: D004.
  REFRESH: D004.
  LOOP AT DYYY.
    MOVE-CORRESPONDING DYYY TO D004.
    APPEND D004.
  ENDLOOP.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: MERGE_LINE                                         *
*----------------------------------------------------------------------*
*                                                                      *
*         Merge of Line-Dimensions                                     *
*         --> LOS  - RRD-SEQNR                                         *
*         --> LOD  - RRD-C_RR                                          *
*                                                                      *
*----------------------------------------------------------------------*

FORM MERGE_LINE
     USING LOS LIKE L_LEV-LSEQNR
           LOD TYPE T_SEQNR3.
  CLEAR L_LEV.
  L_LEV-LSEQNR = LOS.
  IF LOD GE '001'.
     LOOP AT D001.
       UNPACK: D001-L  TO L_LEV-L001_L,
               D001-SI TO L_LEV-L001_SI,
               D001-IBV_LEVEL TO L_LEV-L001_IBV_LEVEL.
       IF D001-IBV_LEVEL < 0.
         L_LEV-L001_IBV_LEVEL = '-01'.
       ENDIF.
       IF D001-IBV_FLAG = 'X'.
         L_LEV-IBV_FLAG = 'X'.
       ENDIF.
       MOVE D001-I TO L_LEV-L001_I.
       MOVE D001-TOTAL_LEVEL TO L_LEV-TOTAL_LEVEL001.
       MOVE D001-T TO L_LEV-L001_T.
       MOVE D001-S TO L_LEV-L001_S.
       MOVE D001-R TO L_LEV-L001_R.
       MOVE D001-SUPPRESS TO L_LEV-SUPPRESS.
       IF D001-FLAGP EQ 'Y'.
          MOVE D001-FLAGP TO L_LEV-LFLAGP.
          MOVE D001-FROMP TO L_LEV-LFROMP.
          MOVE D001-TOP   TO L_LEV-LTOP.
       ENDIF.
       IF D001-FLAGD EQ 'Y'.
          MOVE D001-FLAGD TO L_LEV-LFLAGD.
          MOVE D001-FIELD TO L_LEV-LFIELD.
       ENDIF.
       IF D001-POS NE SPACE.
          MOVE D001-POS TO L_LEV-POS.
          MOVE D001-DIM_F TO L_LEV-DIM_F.
          MOVE D001-FORMULA_INDEX TO L_LEV-FORMULA_INDEX.
       ENDIF.
       IF LOD EQ '001'.
          APPEND L_LEV.
          ADD 1 TO COUNT_L_LEV.
       ENDIF.
       IF LOD GE '002'.
          LOOP AT D002.
            UNPACK: D002-L  TO L_LEV-L002_L,
                    D002-SI TO L_LEV-L002_SI,
                    D002-IBV_LEVEL TO L_LEV-L002_IBV_LEVEL.
            IF D002-IBV_LEVEL < 0.
              L_LEV-L002_IBV_LEVEL = '-01'.
            ENDIF.
            IF D002-IBV_FLAG = 'X'.
              L_LEV-IBV_FLAG = 'X'.
            ENDIF.
            MOVE D002-I TO L_LEV-L002_I.
            MOVE D002-TOTAL_LEVEL TO L_LEV-TOTAL_LEVEL002.
            MOVE D002-T TO L_LEV-L002_T.
            MOVE D002-S TO L_LEV-L002_S.
            MOVE D002-R TO L_LEV-L002_R.
            MOVE D002-SUPPRESS TO L_LEV-SUPPRESS.
            IF D002-FLAGP EQ 'Y'.
               MOVE D002-FLAGP TO L_LEV-LFLAGP.
               MOVE D002-FROMP TO L_LEV-LFROMP.
               MOVE D002-TOP   TO L_LEV-LTOP.
            ENDIF.
            IF D002-FLAGD EQ 'Y'.
               MOVE D002-FLAGD TO L_LEV-LFLAGD.
               MOVE D002-FIELD TO L_LEV-LFIELD.
            ENDIF.
            IF D002-POS NE SPACE.
               MOVE D002-POS TO L_LEV-POS.
               MOVE D002-DIM_F TO L_LEV-DIM_F.
               MOVE D002-FORMULA_INDEX TO L_LEV-FORMULA_INDEX.
            ENDIF.
            IF LOD EQ '002'.
               APPEND L_LEV.
               ADD 1 TO COUNT_L_LEV.
            ENDIF.
            IF LOD GE '003'.
               LOOP AT D003.
                 UNPACK: D003-L  TO L_LEV-L003_L,
                         D003-SI TO L_LEV-L003_SI,
                         D003-IBV_LEVEL TO L_LEV-L003_IBV_LEVEL.
                 IF D003-IBV_LEVEL < 0.
                   L_LEV-L003_IBV_LEVEL = '-01'.
                 ENDIF.
                 IF D003-IBV_FLAG = 'X'.
                   L_LEV-IBV_FLAG = 'X'.
                 ENDIF.
                 MOVE D003-I TO L_LEV-L003_I.
                 MOVE D003-TOTAL_LEVEL TO L_LEV-TOTAL_LEVEL003.
                 MOVE D003-T TO L_LEV-L003_T.
                 MOVE D003-S TO L_LEV-L003_S.
                 MOVE D003-R TO L_LEV-L003_R.
                 MOVE D003-SUPPRESS TO L_LEV-SUPPRESS.
                 IF D003-FLAGP EQ 'Y'.
                    MOVE D003-FLAGP TO L_LEV-LFLAGP.
                    MOVE D003-FROMP TO L_LEV-LFROMP.
                    MOVE D003-TOP   TO L_LEV-LTOP.
                 ENDIF.
                 IF D003-FLAGD EQ 'Y'.
                    MOVE D003-FLAGD TO L_LEV-LFLAGD.
                    MOVE D003-FIELD TO L_LEV-LFIELD.
                 ENDIF.
                 IF D003-POS NE SPACE.
                    MOVE D003-POS TO L_LEV-POS.
                    MOVE D003-DIM_F TO L_LEV-DIM_F.
                    MOVE D003-FORMULA_INDEX TO L_LEV-FORMULA_INDEX.
                 ENDIF.
                 IF LOD EQ '003'.
                    APPEND L_LEV.
                    ADD 1 TO COUNT_L_LEV.
                 ENDIF.
                 IF LOD GE '004'.
                    LOOP AT D004.
                      UNPACK: D004-L  TO L_LEV-L004_L,
                              D004-SI TO L_LEV-L004_SI,
                              D004-IBV_LEVEL TO L_LEV-L004_IBV_LEVEL.
                      IF D004-IBV_LEVEL < 0.
                        L_LEV-L004_IBV_LEVEL = '-01'.
                      ENDIF.
                      IF D004-IBV_FLAG = 'X'.
                        L_LEV-IBV_FLAG = 'X'.
                      ENDIF.
                      MOVE D004-I TO L_LEV-L004_I.
                      MOVE D004-TOTAL_LEVEL TO L_LEV-TOTAL_LEVEL004.
                      MOVE D004-T TO L_LEV-L004_T.
                      MOVE D004-S TO L_LEV-L004_S.
                      MOVE D004-R TO L_LEV-L004_R.
                      MOVE D004-SUPPRESS TO L_LEV-SUPPRESS.
                      IF D004-FLAGP EQ 'Y'.
                         MOVE D004-FLAGP TO L_LEV-LFLAGP.
                         MOVE D004-FROMP TO L_LEV-LFROMP.
                         MOVE D004-TOP   TO L_LEV-LTOP.
                      ENDIF.
                      IF D004-FLAGD EQ 'Y'.
                         MOVE D004-FLAGD TO L_LEV-LFLAGD.
                         MOVE D004-FIELD TO L_LEV-LFIELD.
                      ENDIF.
                      IF D004-POS NE SPACE.
                         MOVE D004-POS TO L_LEV-POS.
                         MOVE D004-DIM_F TO L_LEV-DIM_F.
 MOVE D004-FORMULA_INDEX TO L_LEV-FORMULA_INDEX.
                      ENDIF.
                      IF LOD EQ '004'.
                         APPEND L_LEV.
                         ADD 1 TO COUNT_L_LEV.
                      ENDIF.
                      IF L_LEV-DIM_F EQ '04'.
                         CLEAR:  L_LEV-POS,
                                 L_LEV-DIM_F,
                                 L_LEV-FORMULA_INDEX.
                      ENDIF.
                    ENDLOOP.
                 ENDIF.
                 IF L_LEV-DIM_F EQ '03'.
                    CLEAR:  L_LEV-POS,
                            L_LEV-DIM_F,
                            L_LEV-FORMULA_INDEX.
                 ENDIF.
               ENDLOOP.
            ENDIF.
            IF L_LEV-DIM_F EQ '02'.
               CLEAR:  L_LEV-POS,
                       L_LEV-DIM_F,
                       L_LEV-FORMULA_INDEX.
            ENDIF.
          ENDLOOP.
       ENDIF.
       IF L_LEV-DIM_F EQ '01'.
          CLEAR:  L_LEV-POS,
                  L_LEV-DIM_F,
                  L_LEV-FORMULA_INDEX.
       ENDIF.
     ENDLOOP.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: MERGE_COL                                          *
*----------------------------------------------------------------------*
*                                                                      *
*         Merge of Column-Dimensions                                   *
*                                                                      *
*----------------------------------------------------------------------*

FORM MERGE_COL
     USING COS LIKE C_LEV-CSEQNR
           COD TYPE T_SEQNR3.
  CLEAR C_LEV.
  C_LEV-CSEQNR = COS.
  IF COD GE '001'.
     CLEAR D001.
     LOOP AT D001.
       UNPACK: D001-L  TO C_LEV-C001_L,
               D001-SI TO C_LEV-C001_SI.
       MOVE D001-I TO C_LEV-C001_I.
       MOVE D001-T TO C_LEV-C001_T.
       MOVE D001-S TO C_LEV-C001_S.
       MOVE D001-R TO C_LEV-C001_R.
       IF D001-FLAGP EQ 'Y'.
          MOVE D001-FLAGP TO C_LEV-CFLAGP.
          MOVE D001-FROMP TO C_LEV-CFROMP.
          MOVE D001-TOP   TO C_LEV-CTOP.
       ENDIF.
       IF D001-FLAGD EQ 'Y'.
          MOVE D001-FLAGD TO C_LEV-CFLAGD.
          MOVE D001-FIELD TO C_LEV-CFIELD.
       ENDIF.
       IF COD EQ '001'.
          APPEND C_LEV.
          ADD 1 TO COUNT_C_LEV.
       ENDIF.
     ENDLOOP.
  ENDIF.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: MERGE_RC                                           *
*----------------------------------------------------------------------*
*                                                                      *
*         Merge of Rows and Columns                                    *
*                                                                      *
*----------------------------------------------------------------------*

FORM MERGE_RC USING LOREPORT LIKE OUT-REPORT.
  DATA: BEGIN OF COLUMNS_KEY,
              REPORT(2),
              CSEQNR(3),
              C001_T(1), C001_N TYPE RWPSETM,
        END   OF COLUMNS_KEY.
  DATA: L_PERIODS LIKE PERIODS OCCURS 0 WITH HEADER LINE,
        S_PERIODS LIKE PERIODS OCCURS 0 WITH HEADER LINE.

  S_PERIODS[] = PERIODS[].
  FLAG-USED = 'X'.
  CLEAR OUT.
  OUT-REPORT  = LOREPORT.
  OUT-FIELD   = DATAFIELD.
  LOOP AT C_LEV.
    CLEAR COLUMNS_KEY.
    MOVE: C_LEV-CSEQNR TO COLUMNS_KEY-CSEQNR,
          LOREPORT     TO COLUMNS_KEY-REPORT.
    MOVE C_LEV-C001_T TO COLUMNS_KEY-C001_T.
    IF C_LEV-C001_I NE 0.
      UNPACK C_LEV-C001_I TO COLUMNS_KEY-C001_N.
    ENDIF.
    READ TABLE COLUMNS WITH KEY COLUMNS_KEY BINARY SEARCH.
    IF SY-SUBRC = 0.
      SAVE_COL_IDX = SY-TABIX.
    ELSE.
      MESSAGE X205.
    ENDIF.
    IF C_LEV-CFLAGD EQ 'Y'.
      MOVE C_LEV-CFIELD TO OUT-FIELD.
    ENDIF.
    IF C_LEV-CFLAGP NE 'Y'.
      CLEAR C_LEV-CFROMP.
      C_LEV-CTOP = 16 .
    ENDIF.
    LOOP AT L_LEV.
      MOVE-CORRESPONDING L_LEV TO OUT.
      CASE INDEX_R.
      WHEN 01. SY-SUBRC = 0. CLEAR RC_COORDINATES.
      WHEN 02. SY-SUBRC = 0. CLEAR RC_COORDINATES.
      WHEN 03. SY-SUBRC = 0. CLEAR RC_COORDINATES.
      WHEN OTHERS.
        READ TABLE RC_COORDINATES BINARY SEARCH
                   WITH KEY REPORT    = INDEX_R
                            ROW_SEQNR = L_LEV-LSEQNR
                            COL_SEQNR = C_LEV-CSEQNR.
      ENDCASE.
      IF SY-SUBRC = 0.
        IF OUT-FORMULA_INDEX <> SPACE.
          XCOUNT1 = COLUMNS-CINDEX - RC_COORDINATES-CORRECTION1.
        ELSE.
          XCOUNT1 = COLUMNS-OUT_CINDEX - RC_COORDINATES-CORRECTION2.
        ENDIF.
        UNPACK XCOUNT1 TO OUT-CINDEX.
        IF L_LEV-LFLAGD EQ 'Y'.
          MOVE L_LEV-LFIELD TO OUT-FIELD.
        ENDIF.
        IF L_LEV-LFLAGP EQ 'Y'.
          IF L_LEV-LFROMP LT C_LEV-CFROMP.
            L_LEV-LFROMP = C_LEV-CFROMP.
          ENDIF.
          IF L_LEV-LTOP GT C_LEV-CTOP.
            L_LEV-LTOP = C_LEV-CTOP.
          ENDIF.
          CHECK L_LEV-LFROMP LE L_LEV-LTOP.
        ELSE.
          L_LEV-LFROMP = C_LEV-CFROMP.
          L_LEV-LTOP   = C_LEV-CTOP.
        ENDIF.
        CLEAR L_PERIODS[].
        IF SEL_PERIOD = 'X'.
          LOOP AT S_PERIODS.
            IF L_LEV-LFROMP LT s_PERIODS-FROM.
              L_PERIODS-FROM = S_PERIODS-FROM.
            ELSE.
              L_PERIODS-FROM = L_LEV-LFROMP.
            ENDIF.
            IF L_LEV-LTOP GT S_PERIODS-TO.
              L_PERIODS-TO = S_PERIODS-TO.
            ELSE.
              L_PERIODS-TO = L_LEV-LTOP.
            ENDIF.
            CHECK L_PERIODS-FROM LE L_PERIODS-TO.
            APPEND L_PERIODS.
          ENDLOOP.
        ELSE.
          L_PERIODS-FROM = L_LEV-LFROMP.
          L_PERIODS-TO   = L_LEV-LTOP.
          APPEND L_PERIODS.
        ENDIF.
        CASE OUT-FIELD. "which data field?
          WHEN '0001'. "data set entry: $Z302##Z302FCPY0001
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000034
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0002'. "data set entry: $Z302##Z302FCPY0002
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000041
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0003'. "data set entry: $Z302##Z302FCPY0003
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000047
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0004'. "data set entry: $Z302##Z302FCPY0004
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000053
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0005'. "data set entry: $Z302##Z302FCPY0005
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000059
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0006'. "data set entry: $Z302##Z302FCPY0006
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000064
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0007'. "data set entry: $Z302##Z302FCPY0007
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000070
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0008'. "data set entry: $Z302##Z302FCPY0008
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000075
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0009'. "data set entry: $Z302##Z302FCPY0009
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000081
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0010'. "data set entry: $Z302##Z302YCPX0010
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000085
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0011'. "data set entry: $Z302##Z302YCPX0011
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000092
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0012'. "data set entry: $Z302##Z302YCPX0012
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000098
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0013'. "data set entry: $Z302##Z302YCPX0013
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000103
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0014'. "data set entry: $Z302##Z302YCPX0014
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000109
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0015'. "data set entry: $Z302##Z302YCPX0015
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000114
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0016'. "data set entry: $Z302##Z302YCPX0016
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000120
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0017'. "data set entry: $Z302##Z302YCPX0017
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000125
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0018'. "data set entry: $Z302##Z302YCPX0018
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000131
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0019'. "data set entry: $Z302##Z302YPXX0019
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000135
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0020'. "data set entry: $Z302##Z302YPXX0020
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000142
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0021'. "data set entry: $Z302##Z302YPXX0021
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000148
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0022'. "data set entry: $Z302##Z302YPXX0022
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000153
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0023'. "data set entry: $Z302##Z302YPXX0023
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000159
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0024'. "data set entry: $Z302##Z302YPXX0024
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000164
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0025'. "data set entry: $Z302##Z302YPXX0025
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000170
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0026'. "data set entry: $Z302##Z302YPXX0026
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000175
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN '0027'. "data set entry: $Z302##Z302YPXX0027
            PERFORM E11_FILL_PERIODS_FROM_RANGE(SAPFGRWS)
                    TABLES R_0000000181
                    USING  $RWTAB-RPMAX                          016.
            LOOP AT PERIODS.
              LOOP AT L_PERIODS.
                IF L_PERIODS-FROM LT PERIODS-FROM.
                  OUT-FROMP = PERIODS-FROM.
                ELSE.
                  OUT-FROMP = L_PERIODS-FROM.
                ENDIF.
                IF L_PERIODS-TO GT PERIODS-TO.
                  OUT-TOP = PERIODS-TO.
                ELSE.
                  OUT-TOP = L_PERIODS-TO.
                ENDIF.
                CHECK OUT-FROMP LE OUT-TOP.
                APPEND OUT.
              ENDLOOP.
            ENDLOOP.
          WHEN OTHERS.
            LOOP AT L_PERIODS.
              OUT-FROMP = L_PERIODS-FROM.
              OUT-TOP   = L_PERIODS-TO.
              APPEND OUT.
            ENDLOOP.
        ENDCASE.
      ENDIF.
    ENDLOOP.
  ENDLOOP.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: STORE_DECIMALS                                     *
*----------------------------------------------------------------------*
FORM STORE_DECIMALS.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: GEN_ROW_SUMS                                       *
*----------------------------------------------------------------------*
*                                                                      *
*----------------------------------------------------------------------*
FORM GEN_ROW_SUMS.

  DATA: TMP_OUTC LIKE LINE OF OUTC OCCURS 0.
  FIELD-SYMBOLS: <L_S_OUTC> LIKE OUTC,
                 <L_S_OUTA> LIKE OUTA,
                 <L_S_OUTD> LIKE OUTD.

  TMP_OUTC[] = OUTC[].
  LOOP AT OUTD ASSIGNING <L_S_OUTD>.
    <L_S_OUTD>-X_DETAIL = 'X'.
  ENDLOOP.

  LOOP AT TMP_OUTC ASSIGNING <L_S_OUTC>.
    READ TABLE OUTD ASSIGNING <L_S_OUTD>
         INDEX <L_S_OUTC>-P_OUTD.
    CHECK NOT <L_S_OUTD>-X_DETAIL IS INITIAL.
    CLEAR <L_S_OUTD>-X_DETAIL.
    READ TABLE OUTA ASSIGNING <L_S_OUTA>
         INDEX <L_S_OUTC>-P_OUTA.
    MOVE-CORRESPONDING <L_S_OUTC> TO: OUT_KEY.
    MOVE-CORRESPONDING <L_S_OUTA> TO: OUT_ATTR.
    MOVE-CORRESPONDING <L_S_OUTD> TO: OUT_AMOUNTS,
                                      OUT_UNITS.
    CASE OUT_KEY-REPORT.
      WHEN '01'.
        PERFORM GEN_RSUM_L001_R01.
      WHEN '02'.
        PERFORM GEN_RSUM_L001_R02.
      WHEN '03'.
        PERFORM GEN_RSUM_L001_R03.
    ENDCASE.
  ENDLOOP.

  LOOP AT OUTD ASSIGNING <L_S_OUTD>
       WHERE NOT X_DETAIL IS INITIAL.
    CLEAR <L_S_OUTD>-X_DETAIL.
  ENDLOOP.
ENDFORM.
FORM GEN_RSUM_L001_R01.
  CLEAR KEEP.
  CHECK OUT_ATTR-DIM_F <> '04'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    04
                   'X'
                            9
                    0
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L004_SI
                   OUT_KEY-L004_R
                   OUT_KEY-L004_S
                   OUT_KEY-L004_L
                   OUT_ATTR-L004_I
                   OUT_ATTR-L004_T
                   OUT_KEY-L004_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L004_SI "keep dimension
                   OUT_KEY-L004_R
                   OUT_KEY-L004_S
                   OUT_ATTR-L004_I
                   OUT_ATTR-L004_T.
  CHECK OUT_ATTR-DIM_F <> '03'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    03
                   'X'
                            8
                    0
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L003_SI
                   OUT_KEY-L003_R
                   OUT_KEY-L003_S
                   OUT_KEY-L003_L
                   OUT_ATTR-L003_I
                   OUT_ATTR-L003_T
                   OUT_KEY-L003_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L003_SI "keep dimension
                   OUT_KEY-L003_R
                   OUT_KEY-L003_S
                   OUT_ATTR-L003_I
                   OUT_ATTR-L003_T.
  CHECK OUT_ATTR-DIM_F <> '02'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    02
                   'X'
                            7
                    0
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L002_SI
                   OUT_KEY-L002_R
                   OUT_KEY-L002_S
                   OUT_KEY-L002_L
                   OUT_ATTR-L002_I
                   OUT_ATTR-L002_T
                   OUT_KEY-L002_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L002_SI "keep dimension
                   OUT_KEY-L002_R
                   OUT_KEY-L002_S
                   OUT_ATTR-L002_I
                   OUT_ATTR-L002_T.
  CHECK OUT_ATTR-DIM_F <> '01'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    01
                   'X'
                            6
                    0
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L001_SI
                   OUT_KEY-L001_R
                   OUT_KEY-L001_S
                   OUT_KEY-L001_L
                   OUT_ATTR-L001_I
                   OUT_ATTR-L001_T
                   OUT_KEY-L001_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L001_SI "keep dimension
                   OUT_KEY-L001_R
                   OUT_KEY-L001_S
                   OUT_ATTR-L001_I
                   OUT_ATTR-L001_T.
ENDFORM.
FORM GEN_RSUM_L001_R02.
  CLEAR KEEP.
  CHECK OUT_ATTR-DIM_F <> '04'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    04
                   'X'
                           19
                    0
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L004_SI
                   OUT_KEY-L004_R
                   OUT_KEY-L004_S
                   OUT_KEY-L004_L
                   OUT_ATTR-L004_I
                   OUT_ATTR-L004_T
                   OUT_KEY-L004_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L004_SI "keep dimension
                   OUT_KEY-L004_R
                   OUT_KEY-L004_S
                   OUT_ATTR-L004_I
                   OUT_ATTR-L004_T.
  CHECK OUT_ATTR-DIM_F <> '03'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    03
                   'X'
                           18
                    0
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L003_SI
                   OUT_KEY-L003_R
                   OUT_KEY-L003_S
                   OUT_KEY-L003_L
                   OUT_ATTR-L003_I
                   OUT_ATTR-L003_T
                   OUT_KEY-L003_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L003_SI "keep dimension
                   OUT_KEY-L003_R
                   OUT_KEY-L003_S
                   OUT_ATTR-L003_I
                   OUT_ATTR-L003_T.
  CHECK OUT_ATTR-DIM_F <> '02'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    02
                   'X'
                           17
                    0
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L002_SI
                   OUT_KEY-L002_R
                   OUT_KEY-L002_S
                   OUT_KEY-L002_L
                   OUT_ATTR-L002_I
                   OUT_ATTR-L002_T
                   OUT_KEY-L002_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L002_SI "keep dimension
                   OUT_KEY-L002_R
                   OUT_KEY-L002_S
                   OUT_ATTR-L002_I
                   OUT_ATTR-L002_T.
  CHECK OUT_ATTR-DIM_F <> '01'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    01
                   'X'
                           16
                    1
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L001_SI
                   OUT_KEY-L001_R
                   OUT_KEY-L001_S
                   OUT_KEY-L001_L
                   OUT_ATTR-L001_I
                   OUT_ATTR-L001_T
                   OUT_KEY-L001_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L001_SI "keep dimension
                   OUT_KEY-L001_R
                   OUT_KEY-L001_S
                   OUT_ATTR-L001_I
                   OUT_ATTR-L001_T.
ENDFORM.
FORM GEN_RSUM_L001_R03.
  CLEAR KEEP.
  CHECK OUT_ATTR-DIM_F <> '04'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    04
                   'X'
                           29
                    1
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L004_SI
                   OUT_KEY-L004_R
                   OUT_KEY-L004_S
                   OUT_KEY-L004_L
                   OUT_ATTR-L004_I
                   OUT_ATTR-L004_T
                   OUT_KEY-L004_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L004_SI "keep dimension
                   OUT_KEY-L004_R
                   OUT_KEY-L004_S
                   OUT_ATTR-L004_I
                   OUT_ATTR-L004_T.
  CHECK OUT_ATTR-DIM_F <> '03'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    03
                   'X'
                           28
                    1
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L003_SI
                   OUT_KEY-L003_R
                   OUT_KEY-L003_S
                   OUT_KEY-L003_L
                   OUT_ATTR-L003_I
                   OUT_ATTR-L003_T
                   OUT_KEY-L003_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L003_SI "keep dimension
                   OUT_KEY-L003_R
                   OUT_KEY-L003_S
                   OUT_ATTR-L003_I
                   OUT_ATTR-L003_T.
  CHECK OUT_ATTR-DIM_F <> '02'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    02
                   'X'
                           27
                    0
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L002_SI
                   OUT_KEY-L002_R
                   OUT_KEY-L002_S
                   OUT_KEY-L002_L
                   OUT_ATTR-L002_I
                   OUT_ATTR-L002_T
                   OUT_KEY-L002_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L002_SI "keep dimension
                   OUT_KEY-L002_R
                   OUT_KEY-L002_S
                   OUT_ATTR-L002_I
                   OUT_ATTR-L002_T.
  CHECK OUT_ATTR-DIM_F <> '01'.
  PERFORM BUILD_HIGHER_TOTALS_NEW
          USING    01
                   'X'
                           26
                    0
                    0 00
                   ' ' ' '
                   OUT_ATTR-DIM_F
          CHANGING OUT_KEY-L001_SI
                   OUT_KEY-L001_R
                   OUT_KEY-L001_S
                   OUT_KEY-L001_L
                   OUT_ATTR-L001_I
                   OUT_ATTR-L001_T
                   OUT_KEY-L001_IBV_LEVEL
                   OUT_ATTR-KEEP_DIM
                   OUT_ATTR-SUPPRESS
                   OUT_KEY-L001_SI "keep dimension
                   OUT_KEY-L001_R
                   OUT_KEY-L001_S
                   OUT_ATTR-L001_I
                   OUT_ATTR-L001_T.
ENDFORM.
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: SORT-OUT2_VAR                                      *
*----------------------------------------------------------------------*
*         sort table OUT2_VAR for field number                         *
*----------------------------------------------------------------------*
FORM SORT-OUT2_VAR
     USING VARDIMNO LIKE VARDR-VARDIMNO.
  CASE VARDIMNO.
    WHEN OTHERS.
      SORT OUT2_VAR.
  ENDCASE.
ENDFORM. "SORT-OUT2_VAR
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: READ-END-OF-OUT2_DIR-RANGE                         *
*----------------------------------------------------------------------*
*         read table OUT2_DIR                                          *
*----------------------------------------------------------------------*
FORM READ-END-OF-OUT2_DIR-RANGE.
  MOVE-CORRESPONDING OUT2_DIR TO OUT2_DIR_KEY.
  READ TABLE OUT2_DIR WITH KEY OUT2_DIR_KEY BINARY SEARCH.
  IF SY-SUBRC <> 0 AND SY-TABIX > 1.
    SY-TABIX = SY-TABIX - 1.
    READ TABLE OUT2_DIR INDEX SY-TABIX.
    CLEAR SY-SUBRC.
  ENDIF.
ENDFORM. "READ-END-OF-OUT2_DIR-RANGE
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: READ_OUT2_DIR_INDEX                                *
*----------------------------------------------------------------------*
FORM READ_OUT2_DIR_INDEX
     TABLES V_KEY    STRUCTURE VAR_KEY
     USING  O2D_INDEX LIKE SY-TABIX
            REPORT    LIKE SY-TABIX
            O2D_DATA STRUCTURE OUT2_DIR_DATA
            SUBRC     LIKE SY-SUBRC.
  READ TABLE OUT2_DIR INDEX O2D_INDEX.
  SUBRC = SY-SUBRC.
  IF SUBRC = 0.
    REPORT = OUT2_DIR-REPORT.
    MOVE-CORRESPONDING OUT2_DIR TO O2D_DATA.
  ENDIF.
ENDFORM. "READ_OUT2_DIR_INDEX
* eject
*----------------------------------------------------------------------*
*       SUBROUTINE: READ_OUT2_DIR_KEY                                  *
*----------------------------------------------------------------------*
FORM READ_OUT2_DIR_KEY
     TABLES V_KEY    STRUCTURE VAR_KEY
     USING  O2D_INDEX LIKE SY-TABIX
            REPORT    LIKE VARDR-REPORT
            O2D_DATA  STRUCTURE OUT2_DIR_DATA
            SUBRC     LIKE SY-SUBRC.
  CLEAR OUT2_DIR_KEY.
  OUT2_DIR_KEY-REPORT = REPORT.
  READ TABLE OUT2_DIR WITH KEY OUT2_DIR_KEY BINARY SEARCH.
  O2D_INDEX = SY-TABIX.
  SUBRC = SY-SUBRC.
  IF SUBRC = 0.
    MOVE-CORRESPONDING OUT2_DIR TO O2D_DATA.
  ENDIF.
ENDFORM. "READ_OUT2_DIR_KEY

*.........common includes of selection reports.........................*

* eject
*----------------------------------------------------------------------*
*.........copy of include FGRWFS01.....................................*
*----------------------------------------------------------------------*


*---------------------------------------------------------------------*
*       FORM INITIALIZE                                               *
*---------------------------------------------------------------------*
*       is performed at INITIALIZATION                                *
*---------------------------------------------------------------------*
FORM initialize.

*....... get values of constants .....................................*
  PERFORM set_global_constants.

*....... initialize RW_DIAGNOSIS ......................................*
  PERFORM f90_init_diagnosis(sapfgrwx) USING report_group.

ENDFORM.

*---------------------------------------------------------------------*
*       FORM SET_GLOBAL_CONSTANTS                                     *
*---------------------------------------------------------------------*
*       set global constants:                                         *
*                                                                     *
*       AMOUNT_LENGTH length of amount field in bytes                 *
*       MAX_DIGITS    maximum number of digits for amount             *
*       HIGH_AMOUNT   highest positive amount                         *
*       MIN_F_AMOUNT  minimum amount - 1 as float                     *
*       MAX_F_AMOUNT  maximum amount + 1 as float                     *
*                                                                     *
*---------------------------------------------------------------------*
* No parameters                                                       *
*---------------------------------------------------------------------*
FORM set_global_constants.

* set current length of amounts
  CALL FUNCTION 'G_RW_MAX_MIN_GET'
       EXPORTING
            ref_p_field   = out-amount
       IMPORTING
            max_p_amount  = const-max_p_amount
            max_f_amount  = const-max_f_amount
            min_f_amount  = const-min_f_amount
            max_digits    = const-max_digits
            amount_length = const-amount_length.

  amount_length = const-amount_length. "only temporary

* initialization of global data (SAPFGRWS)
  s_opt_activ = 1.
  s_max_all   = 1.
  s_rw_tab    = rep_table.

* populating structure t804a if it is INITIAL         "nte2262062
  IF t804a IS INITIAL.                                "nte2262062
    SELECT SINGLE * FROM t804a WHERE tab = rep_table. "nte2262062
    IF sy-subrc <> 0. MESSAGE x214. ENDIF.            "nte2262062
  ENDIF.                                              "nte2262062

ENDFORM.                               "SET_GLOBAL_CONSTANTS

*&---------------------------------------------------------------------*
*&      Form  INIT_PRINT_PARAMETERS
*&---------------------------------------------------------------------*
*       initialize print parameters                                    *
*----------------------------------------------------------------------*
FORM init_print_parameters.

  DATA: plist        LIKE pri_params-plist,
        prtxt        LIKE pri_params-prtxt,
        no_dialog(1) TYPE x VALUE '01'.


  CALL FUNCTION 'GET_PRINT_PARAMETERS'
       EXPORTING
            no_dialog              = 'X'
       IMPORTING
            out_parameters         = print_parameters
            out_archive_parameters = archive_parameters
       EXCEPTIONS
            archive_info_not_found = 1
            invalid_print_params   = 2
            invalid_archive_params = 3
            OTHERS                 = 99.

  IF print_parameters-plist IS INITIAL.
    plist = report_group.
  ELSE.
    plist = print_parameters-plist.
  ENDIF.

  IF print_parameters-prtxt IS INITIAL.
    CONCATENATE report_group '/' sy-title INTO prtxt
                SEPARATED BY space.
  ELSE.
    prtxt = print_parameters-prtxt.
  ENDIF.

  CALL FUNCTION 'SET_PRINT_PARAMETERS'
       EXPORTING
            list_name             = plist
            list_text             = prtxt
            in_parameters         = print_parameters
            in_archive_parameters = archive_parameters.

ENDFORM.                               " INIT_PRINT_PARAMETERS

*---------------------------------------------------------------------*
*       FORM CONVERT_F_TO_P                                           *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  F_VALUE                                                       *
*  -->  DECS                                                          *
*  -->  P_VALUE                                                       *
*  -->  SUBRC                                                         *
*---------------------------------------------------------------------*
FORM convert_f_to_p
     USING    f_value TYPE f
              decs    TYPE i
     CHANGING p_value LIKE rgrwa-matrixcell
              subrc   TYPE i.

  DATA: f  TYPE f,
        f1 TYPE f,
        f2 TYPE f.

  f = f_value * ( 10 ** decs ).
  IF f >= const-min_f_amount AND
     f <= const-max_f_amount.
    p_value = f.
    subrc = 0.
  ELSE.
    p_value = 0.
    subrc = 4.
    f1 = const-min_f_amount / ( 10 ** decs ).
    f2 = const-max_f_amount / ( 10 ** decs ).
    mess_store 'GR' 'S' '255' f_value f1 f2 ''.
  ENDIF.

ENDFORM.

*eject
*----------------------------------------------------------------------*
*       SUBROUTINE: GET_DATA                                           *
*----------------------------------------------------------------------*
*                                                                      *
*       cumulates the wanted data field                                *
*       transfer data of OUT to table OUT2                             *
*                                                                      *
*----------------------------------------------------------------------*
*                                                                      *
* -->   GD_ZSF    flag ZSROW of current report                         *
* -->   GD_GLOBAL_IBV_FLAG  global ibv flag for current report         *
*                                                                      *
*----------------------------------------------------------------------*
FORM get_data USING gd_zsf             LIKE r-zsrow
                    gd_global_ibv_flag LIKE r01_global_ibv_flag.

  DATA: col_index LIKE sy-index,
        typ       TYPE c,
        comp      TYPE i.


  LOOP AT out.
    IF out-ibv_flag = 'X' OR           "is record to be eliminated?
       gd_global_ibv_flag = 'X' OR     "is record to be eliminated?
       formprint_flag = 'X'.           "form print active
      CLEAR out-amount.
    ELSE.
      PERFORM data_field USING out-fromp out-top.
    ENDIF.
    CLEAR: out_key, out_attr, out_amounts, out_units.
    MOVE-CORRESPONDING variations TO out_key.
    MOVE-CORRESPONDING out TO: out_key, out_attr,
                               out_amounts, out_units.
    out_attr-zsf = gd_zsf.
    IF out-formula_index IS INITIAL.
      col_index = out-cindex.                                .
      ASSIGN COMPONENT col_index OF STRUCTURE:
             out_amounts TO <out2_c>,
             out_units   TO <out2_p_ut>.
      CLEAR out_key-cindex.
      <out2_c>    = out-amount.        "OUT_AMOUNTS-Cnnnnn
      <out2_p_ut> = out-p_unit_tab.    "OUT_UNITS-P_UTnnnnn
    ELSE.
      CLEAR col_index.
    ENDIF.
    PERFORM collect_outc USING out_key
                               out_attr
                               out_amounts
                               out_units
                               col_index.
*   processing for ibv elimination
    IF gd_global_ibv_flag =  '-' AND
       formprint_flag     <> 'X'.
      MOVE-CORRESPONDING variations_ibv TO out_key.
      IF out-formula_index IS INITIAL.
        <out2_c> = - <out2_c>.
      ELSE.
*        DESCRIBE FIELD out_amounts IN CHARACTER MODE
*                 TYPE typ COMPONENTS comp.
        DESCRIBE FIELD out_amounts
                 TYPE typ COMPONENTS comp.
        DO comp TIMES.
          ASSIGN COMPONENT sy-index OF STRUCTURE out_amounts
                 TO <out2_c>.          "OUT_AMOUNTS-Cnnnnn
          <out2_c> = -  <out2_c>.
        ENDDO.
      ENDIF.
      PERFORM collect_outc USING out_key
                                 out_attr
                                 out_amounts
                                 out_units
                                 col_index.
    ENDIF.
*
  ENDLOOP.

  IF sy-subrc = 0.
    READ TABLE r INDEX index_r.
    IF NOT r-frmpr IS INITIAL AND r-c_var > 0.
      UNPACK index_r TO valid_variations-report.
      MOVE-CORRESPONDING variations TO valid_variations.
      READ TABLE valid_variations WITH KEY valid_variations
                                  BINARY SEARCH TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        INSERT valid_variations INDEX sy-tabix.
      ENDIF.
    ENDIF.
  ENDIF.

  REFRESH out.

ENDFORM.

*---------------------------------------------------------------------*
*       FORM COLLECT_OUTC                                             *
*---------------------------------------------------------------------*
*       collect current OUTC record to table OUTC                     *
*---------------------------------------------------------------------*
* Parameters:                                                         *
*  -->  OUT_KEY     Collect key                                       *
*  -->  OUT_ATTR    Attributes                                        *
*  -->  OUT_AMOUNTS Amounts                                           *
*  -->  OUT_UNITS   Pointers to UNIT_TAB                              *
*  -->  COL_INDEX   Index of column in OUT_AMOUNTS and OUT_UNITS      *
*---------------------------------------------------------------------*
FORM collect_outc USING out_key     LIKE out_key
                        out_attr    LIKE out_attr
                        out_amounts LIKE out_amounts
                        out_units   LIKE out_units
                        col_index   LIKE sy-index.

  DATA: typ  TYPE c,
        comp TYPE i.

  DATA: l_index TYPE i.

  FIELD-SYMBOLS: <l_s_outd>   LIKE outd,
                 <unit>       TYPE rgrwa-p_unit_tab,
                 <new_unit>   TYPE rgrwa-p_unit_tab,
                 <amount>     TYPE rgrwa-matrixcell,
                 <new_amount> TYPE rgrwa-matrixcell.

  CLEAR outc.

  MOVE-CORRESPONDING out_key TO outc.
  READ TABLE outc %_WITH TABLE KEY = outc TRANSPORTING p_outa p_outd.
  IF sy-subrc = 0.
    READ TABLE outd ASSIGNING <l_s_outd> INDEX outc-p_outd.
    comp = num_out2_cnnnnn.
    IF col_index = 0.
      DO comp TIMES.                   "process units
        l_index = sy-index + comp.     "no. of amount field in OUTD "ne
        ASSIGN COMPONENT sy-index OF STRUCTURE out_units  TO <new_unit>.
        CHECK NOT <new_unit> IS INITIAL.
        ASSIGN COMPONENT sy-index OF STRUCTURE <l_s_outd> TO <unit>.
        CHECK <unit> NE '*'.
        IF <unit> IS INITIAL.
          <unit> = <new_unit>.
        ELSEIF <new_unit> NE <unit>.
          ASSIGN COMPONENT:
                 l_index  OF STRUCTURE <l_s_outd>  TO <amount>,
                 sy-index OF STRUCTURE out_amounts TO <new_amount>.
          PERFORM f04_check_units(sapfgrwx)
                  CHANGING <amount>
                           <unit>
                           <new_amount>
                           <new_unit>.
        ENDIF.
      ENDDO.
    ELSE.
      l_index = col_index + comp.      "no. of amount field in OUTD "ne
      ASSIGN COMPONENT col_index OF STRUCTURE out_units TO <new_unit>.
      IF NOT <new_unit> IS INITIAL.
        ASSIGN COMPONENT col_index OF STRUCTURE <l_s_outd> TO <unit>.
        IF <unit> NE '*'.
          IF <unit> IS INITIAL.
            <unit> = <new_unit>.
          ELSEIF <new_unit> NE <unit>.
            ASSIGN COMPONENT:
                   l_index   OF STRUCTURE <l_s_outd>  TO <amount>,
                   col_index OF STRUCTURE out_amounts TO <new_amount>.
            PERFORM f04_check_units(sapfgrwx)
                    CHANGING <amount>
                             <unit>
                             <new_amount>
                             <new_unit>.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
    ADD-CORRESPONDING out_amounts TO <l_s_outd>.
    IF NOT <l_s_outd>-x_detail IS INITIAL.
      MOVE-CORRESPONDING <l_s_outd> TO: out_amounts, out_units.
      CLEAR <l_s_outd>-x_detail.
    ENDIF.
  ELSE.
    MOVE-CORRESPONDING: out_key     TO outc,
                        out_attr    TO outa,
                        out_amounts TO outd,
                        out_units   TO outd.
    CLEAR outd-x_detail.
    APPEND outa.  outc-p_outa = sy-tabix.
    APPEND outd.  outc-p_outd = sy-tabix.
    COLLECT outc.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*       FORM ADD_OUT2_TO_OUT2_WRK                                     *
*---------------------------------------------------------------------*
*       add OUT2 to OUT2_WRK                                          *
*---------------------------------------------------------------------*
*  -->  VALUES                                                        *
*---------------------------------------------------------------------*
FORM add_out2_to_out2_wrk
     USING values STRUCTURE out_am.

  DO num_out2_cnnnnn TIMES.            "process OUT2-P_UTnnnnn
    xcount1 = comp_out2_c00001 + ( sy-index * 2 ).
    ASSIGN COMPONENT xcount1 OF STRUCTURE:
           out2     TO <out2_p_ut>,
           out2_wrk TO <out2_wrk_p_ut>.
    IF NOT <out2_wrk_p_ut> IS INITIAL AND "unit assigned
       NOT <out2_p_ut>     IS INITIAL AND "unit assigned
       <out2_p_ut> <> <out2_wrk_p_ut>. "different units
      <out2_wrk_p_ut> = '*'.
    ELSEIF <out2_wrk_p_ut> IS INITIAL.
      <out2_wrk_p_ut> = <out2_p_ut>.
    ENDIF.
  ENDDO.
  ADD-CORRESPONDING values TO out2_wrk.

ENDFORM.
*---------------------------------------------------------------------*
*       FORM FILL_RANGES_FROM_SET                                     *
*---------------------------------------------------------------------*
*       fill ranges table from set                                    *
*---------------------------------------------------------------------*
*  <--  R_TABLE         ranges table                                  *
*  -->  SET             set                                           *
*  -->  TABLE           table (database)                              *
*---------------------------------------------------------------------*
FORM fill_ranges_from_set
     TABLES r_table
     USING  set   LIKE c-tmsb-setnr
            table LIKE c-tmsb-table
            pdown LIKE c-tmsb-seqnr.

  DATA set_index LIKE c-tmsb-seqnr.

  FIELD-SYMBOLS: <sign>,
                 <option>,
                 <low>,
                 <high>.

*......................................................................

  REFRESH r_table.

  ASSIGN COMPONENT: 1 OF STRUCTURE r_table TO <sign>,
                    2 OF STRUCTURE r_table TO <option>,
                    3 OF STRUCTURE r_table TO <low>,
                    4 OF STRUCTURE r_table TO <high>.

  <sign> = 'I'.

  PERFORM e02_read_set_index(sapfgsb0) USING pdown.
  IF c-subrc      <> 0     OR
     c-tmsb-setnr <> set.
    MESSAGE x214 WITH sl_report 'FGRWFS01' 'FILL_RANGES_FROM_SET'.
  ENDIF.

  set_index = c-tmsb-seqnr.

  PERFORM e06_endrq_object(sapfgsb0) USING 3.
  PERFORM e03_get_object(sapfgsb0) USING set_index 3.
  WHILE c-subrc = 0.
    IF c-tval-from(1) <> '='.          "no formula.
      <low> = c-tval-from.
      IF c-tval-from = c-tval-to.
        CLEAR <high>.
        <option> = 'EQ'.
      ELSE.
        <high> = c-tval-to.
        <option> = 'BT'.
      ENDIF.
      APPEND r_table.
    ENDIF.
    PERFORM e03_get_object(sapfgsb0) USING set_index 3.
  ENDWHILE.

ENDFORM.
*---------------------------------------------------------------------*
*       FORM GET_VALID_VALUE_ENTRY                                    *
*---------------------------------------------------------------------*
*       get first value entry <> formula                              *
*       (used for form print)                                         *
*---------------------------------------------------------------------*
*  -->  CONTROL_BLOCK   control block for set mangage                 *
*  -->  SET_SEQNR       pointer to set                                *
*  <--  VALUE_ENTRY     first value entry <> formula                  *
*---------------------------------------------------------------------*
FORM get_valid_value_entry
     USING    control_block LIKE sy-tabix
              set_seqnr     LIKE c-tmsb-seqnr
     CHANGING value_entry.

  PERFORM e06_endrq_object(sapfgsb0) USING control_block.
  PERFORM e03_get_object(sapfgsb0) USING set_seqnr control_block.
  WHILE c-subrc = 0.
    IF c-tval-from(1) <> '='.                               "no formula
      value_entry = c-tval-from.
      EXIT.
    ENDIF.
    PERFORM e03_get_object(sapfgsb0) USING set_seqnr control_block.
  ENDWHILE.
* PERFORM E06_ENDRQ_OBJECT(SAPFGSB0) USING CONTROL_BLOCK.

ENDFORM.

*---------------------------------------------------------------------*
*       FORM STORE_ACTIVE_COLUMN                                      *
*---------------------------------------------------------------------*
*       store active column blocks for current row block              *
*---------------------------------------------------------------------*
*  <--  ACTIVE_COL                                                    *
*  -->  REPORT      current report (index)                            *
*  -->  ROW_SEQNR   current row block                                 *
*---------------------------------------------------------------------*
FORM store_active_column
     TABLES active_col
     USING  report    LIKE rc_coordinates-report
            row_seqnr LIKE rc_coordinates-row_seqnr.

  DATA: from_index LIKE sy-tabix.

  READ TABLE rc_coordinates WITH KEY report = report
                            row_seqnr = row_seqnr
                            BINARY SEARCH.
  CHECK sy-subrc EQ 0.

  from_index = sy-tabix.

  LOOP AT rc_coordinates FROM from_index.
    IF rc_coordinates-report NE report OR
      rc_coordinates-row_seqnr NE row_seqnr.
      EXIT.
    ENDIF.
    READ TABLE active_col
         WITH KEY rc_coordinates-col_seqnr BINARY SEARCH.
    IF sy-subrc <> 0.
      active_col = rc_coordinates-col_seqnr.
      INSERT active_col INDEX sy-tabix.
    ENDIF.
  ENDLOOP.

ENDFORM.
*eject
*---------------------------------------------------------------------*
*       FORM REFRESH_FIELD_LIST                                       *
*---------------------------------------------------------------------*
*       refresh table for current primary characteristics             *
*---------------------------------------------------------------------*
*  No Parameters                                                      *
*---------------------------------------------------------------------*
FORM refresh_field_list.

  REFRESH cur_primary_fields.
  LOOP AT primary_fields.
    cur_primary_fields = primary_fields.
    APPEND cur_primary_fields.
  ENDLOOP.
  CLEAR cur_primary_fields.

ENDFORM.
*eject
*---------------------------------------------------------------------*
*       FORM BUILD_FIELD_LIST                                         *
*---------------------------------------------------------------------*
*       build field list for select                                   *
*---------------------------------------------------------------------*
*  -->  DB_TABLE    database table                                    *
*  -->  AGGREGATION flag: aggregation requested                       *
*  <--  FIELD_LIST  fields for select clause                          *
*  <--  GROUP_LIST  fields for group by clause                        *
*---------------------------------------------------------------------*
FORM build_field_list TABLES field_list
                             group_list
                      USING  value(aggregation) LIKE t804e-gen_sql
                             db_table           LIKE dfies-tabname.

  DATA: from_index LIKE sy-tabix,
        pos        TYPE i,
        len        TYPE i,
        fieldname  LIKE dfies-fieldname,
        suffix_min LIKE dfies-fieldname,
        suffix_max LIKE dfies-fieldname,
        nametab    LIKE dntab    OCCURS 0 WITH HEADER LINE.

  DATA: rc_fields LIKE rgcdi OCCURS 0 WITH HEADER LINE.

  DATA: BEGIN OF rfields OCCURS 0,
        fieldname LIKE dntab-fieldname,
        position  LIKE dntab-position,
        group_by  TYPE c,
        END   OF rfields.


  FIELD-SYMBOLS: <suffix>, <suffix_min>, <suffix_max>.

  CALL FUNCTION 'NAMETAB_GET'
       EXPORTING
            tabname             = db_table
       TABLES
            nametab             = nametab
       EXCEPTIONS
            internal_error      = 1
            table_has_no_fields = 2
            table_not_activ     = 3
            no_texts_found      = 4
            OTHERS              = 5.

  SORT nametab BY tabname fieldname.

  LOOP AT cur_primary_fields.

    IF cur_primary_fields-fieldname = '.KEY'.

*...... all key fields ...............................................*

      rfields-group_by = 'X'.
      LOOP AT nametab WHERE keyflag = 'X'.
        nametab-keyflag = 'Y'.
        MODIFY nametab.
        MOVE-CORRESPONDING nametab TO rfields.
        COLLECT rfields.
      ENDLOOP.

    ELSEIF cur_primary_fields-suffix_len > 0.

*...... field group ..................................................*

      pos = cur_primary_fields-suffix_pos.
      len = cur_primary_fields-suffix_len.
      ASSIGN: nametab-fieldname+pos(len) TO <suffix>,
              suffix_min(len)            TO <suffix_min>,
              suffix_max(len)            TO <suffix_max>.
      IF cur_primary_fields-reqper CO '13'.
        CLEAR <suffix_min> WITH '0'.
      ELSE.
        UNPACK global_period_limits-min_group_index TO <suffix_min>.
      ENDIF.
      IF cur_primary_fields-reqper CO '23'.
        CLEAR <suffix_max> WITH '9'.
      ELSE.
        UNPACK global_period_limits-max_group_index TO <suffix_max>.
      ENDIF.
      fieldname = cur_primary_fields-fieldname.
      fieldname+pos = space.
      READ TABLE nametab WITH KEY tabname   = db_table
                                  fieldname = fieldname
                         BINARY SEARCH.
      from_index = sy-tabix.
      LOOP AT nametab FROM from_index.
        IF nametab-fieldname CP cur_primary_fields-fieldname.
          IF <suffix> CO '0123456789'.
            IF <suffix> >= <suffix_min> AND
               <suffix> <= <suffix_max>.
              MOVE-CORRESPONDING nametab TO rfields.
              IF nametab-keyflag IS INITIAL AND
                 nametab-inttype CA 'FIP'.  "float, integer, or packed
                CLEAR rfields-group_by.
              ELSE.
                rfields-group_by = 'X'.
              ENDIF.
              IF nametab-keyflag = 'X'.
                nametab-keyflag = 'Y'.
                MODIFY nametab.
              ENDIF.
              COLLECT rfields.
            ENDIF.
          ELSE.
            IF <suffix_min> CO '0'.
              MOVE-CORRESPONDING nametab TO rfields.
              IF nametab-keyflag IS INITIAL AND
                 nametab-inttype CA 'FIP'.  "float, integer, or packed
                CLEAR rfields-group_by.
              ELSE.
                rfields-group_by = 'X'.
              ENDIF.
              IF nametab-keyflag = 'X'.
                nametab-keyflag = 'Y'.
                MODIFY nametab.
              ENDIF.
              COLLECT rfields.
            ENDIF.
          ENDIF.
        ELSE.
          EXIT.
        ENDIF.
      ENDLOOP.

    ELSE.

*...... single field .................................................*

      READ TABLE nametab WITH KEY tabname = db_table
                                fieldname = cur_primary_fields-fieldname
                         BINARY SEARCH.
      IF sy-subrc = 0.
        IF nametab-keyflag = 'X'.
          nametab-keyflag = 'Y'.
          MODIFY nametab INDEX sy-tabix.
        ENDIF.
        MOVE-CORRESPONDING nametab TO rfields.
        IF nametab-keyflag IS INITIAL AND
           nametab-inttype CA 'FIP'.   "float, integer, or packed
          CLEAR rfields-group_by.
        ELSE.
          rfields-group_by = 'X'.
        ENDIF.
        COLLECT rfields.
      ENDIF.

    ENDIF.

  ENDLOOP.

  SORT rfields BY position.

* if all key fields except the client field are used
* aggregation makes no sense.
  LOOP AT nametab WHERE keyflag  EQ 'X'"unused key field
                    AND datatype NE 'CLNT'.    "no client field
    EXIT.
  ENDLOOP.
  IF sy-subrc <> 0.
    CLEAR aggregation.
  ENDIF.

  REFRESH: field_list, group_list.
  LOOP AT rfields.
    IF aggregation IS INITIAL OR NOT rfields-group_by IS INITIAL.
      field_list = rfields-fieldname.
      IF NOT aggregation IS INITIAL.
        group_list = rfields-fieldname.
        APPEND group_list.
      ENDIF.
    ELSE.
      CONCATENATE 'SUM(' rfields-fieldname ') AS' rfields-fieldname
                  INTO field_list SEPARATED BY space.
    ENDIF.
    APPEND field_list.
  ENDLOOP.
  IF NOT aggregation IS INITIAL.
    field_list = 'COUNT(*) AS _COUNTER'.  APPEND field_list.
  ENDIF.

  CLEAR: field_list, group_list.

ENDFORM.
*eject
*---------------------------------------------------------------------*
*       SUBROUTINE SORT_DATA_NEW                                      *
*---------------------------------------------------------------------*
*                                                                     *
*       generate row sums                                             *
*       generate variation sums                                       *
*       generate directory for extract                                *
*       store extract to INDX if requested                            *
*                                                                     *
*---------------------------------------------------------------------*
FORM sort_data_new.

  DATA: time_start LIKE cstat-time_row_sums.

  DESCRIBE TABLE outc LINES cstat-ext_out.   "number of detail entries

*---------------------------------------------------------------------*
*        generate row sums                                            *
*---------------------------------------------------------------------*

  GET TIME FIELD time_start.
  PERFORM gen_row_sums.
  GET TIME FIELD cstat-time_row_sums.
  SUBTRACT time_start FROM cstat-time_row_sums.

*---------------------------------------------------------------------*
*        generate variation sums                                      *
*---------------------------------------------------------------------*

  PERFORM gen_variation_sums.

*---------------------------------------------------------------------*
*        prepare selected data for export and export it               *
*---------------------------------------------------------------------*

  DESCRIBE TABLE outc LINES cstat-ext_sum.
  SUBTRACT cstat-ext_out FROM cstat-ext_sum. "number of summary entries

  PERFORM gen_out2_dir.                "generate extract directory

ENDFORM.
*eject
*---------------------------------------------------------------------*
*       SUBROUTINE GEN_VARIATION_SUMS                                 *
*---------------------------------------------------------------------*
*                                                                     *
*       generate higher sums for variation dimensions                 *
*                                                                     *
*---------------------------------------------------------------------*
* No parameters                                                       *
*---------------------------------------------------------------------*
FORM gen_variation_sums.

  DATA: count_variation LIKE sy-index,
        time_start      LIKE cstat-time_var_sums,
        vr_index        LIKE sy-tabix,
        seqnr           LIKE c-tmsb-seqnr,
        level           LIKE sy-index,
        vtype           TYPE c,
        from_level      LIKE sy-index,
        from_index      LIKE sy-tabix,
        to_index        LIKE sy-tabix,
        dummy_vtval     LIKE out2_ventries-vtval,
        dummy_vvalue    LIKE out2_ventries-vvalue,
        next_report     TYPE i.

  DATA: BEGIN OF outc_fields,
        vtmsb(16)  TYPE c VALUE 'OUTC_TMP-VTMSBnn',
        vtval(16)  TYPE c VALUE 'OUTC_TMP-VTVALnn',
        vvalue(17) TYPE c VALUE 'OUTC_TMP-VVALUEnn',
        END   OF outc_fields.

  DATA: BEGIN OF out_key_fields,
        vtmsb(21)  TYPE c VALUE 'OUT_KEY-VTMSBnn',
        vtval(21)  TYPE c VALUE 'OUT_KEY-VTVALnn',
        vvalue(21) TYPE c VALUE 'OUT_KEY-VVALUEnn',
        END   OF out_key_fields.

  DATA: last_vtmsb    TYPE rwpsetm,
        last_vtval    TYPE rwpsetm,
        last_vvalue   LIKE c-tval-from,
        last_vtype    TYPE c.

  DATA: BEGIN OF node_tab OCCURS 10,
        vtmsb         LIKE out2_ventries-vtmsb,
        vvalue        LIKE out2_ventries-vvalue,
        level         TYPE i,
        END OF node_tab.

  DATA: min_var_level TYPE i.

  DATA: outc_tmp LIKE LINE OF outc OCCURS 0 WITH HEADER LINE.

  FIELD-SYMBOLS: <vtmsb>, <vtval>, <vvalue>.


*.. Check if variation is active for at least 1 report of the group ..*

  DESCRIBE TABLE variation LINES count_variation.
  IF count_variation > 0.

    GET TIME FIELD time_start.

*   initialize table OUT2_VENTRIES with variation keys of all nodes
    PERFORM e20_init_out2_ventries_new(sapfgrws).

*...... process variation dimensions .................................*

    DO count_variation TIMES.
      READ TABLE variation WITH KEY vardimno = sy-index.

*     Do not sort table OUTC at this time because it may be extended
*     by following COLLECTs. Copy it and sort the copy.
      REFRESH outc_tmp.
*      LOOP AT outc.                                    "1329650
*        APPEND outc TO outc_tmp.                       "1329650
*      ENDLOOP.                                         "1329650
      APPEND lines of outc TO outc_tmp.                 "1329650

      REFRESH node_tab.

*...... sort outc by current variation dimension .....................*

      MOVE variation-vardimno TO: outc_fields-vtmsb+14(2),
                                outc_fields-vtval+14(2),
                                outc_fields-vvalue+15(2).
      MOVE variation-vardimno TO: out_key_fields-vtmsb+13(2),
                                out_key_fields-vtval+13(2),
                                out_key_fields-vvalue+14(2).
      ASSIGN: (outc_fields-vtmsb)  TO <vtmsb>,  "OUTC-VTMSBnn
              (outc_fields-vtval)  TO <vtval>,  "OUTC-VTVALnn
              (outc_fields-vvalue) TO <vvalue>. "OUTC-VVALUEnn
      IF sy-subrc <> 0.
        SORT outc_tmp BY report <vtmsb> <vtval>.
        ASSIGN dummy_vvalue TO <vvalue>.
      ELSE.
        SORT outc_tmp BY report <vtmsb> <vtval> <vvalue>.
        ASSIGN (out_key_fields-vvalue) TO <vvalue>. "OUT_KEY-VVALUEnn
      ENDIF.
      ASSIGN: (out_key_fields-vtmsb)  TO <vtmsb>,  "OUT_KEY-VTMSBnn
              (out_key_fields-vtval)  TO <vtval>.  "OUT_KEY-VTVALnn

*...... process reports ..............................................*

      to_index  = 0.
      DO count_r TIMES.
        index_r = sy-index.
        READ TABLE r INDEX index_r.

        from_index  = to_index + 1.
        next_report = index_r + 1.
        UNPACK next_report TO outc-report.
        READ TABLE outc_tmp INTO outc WITH KEY report = outc-report
                                      BINARY SEARCH.
        to_index = sy-tabix - 1.

*       Check if variation is active for current report and dimension
        READ TABLE variation_rep WITH KEY report = index_r
                                          vardimno = variation-vardimno
                                 BINARY SEARCH.
        IF sy-subrc = 0.
          vr_index = sy-tabix.
*         IF NOT INDXT IS INITIAL.  "can be removed, if FILL_MATRICES...
          variation_rep-roll_up = 'X'.
          MODIFY variation_rep INDEX vr_index.
*         ENDIF.                    "...is changed
          PERFORM init_row_variation USING vr_index.

          CLEAR: last_vtmsb, last_vtval, last_vvalue, last_vtype.
          LOOP AT outc_tmp INTO outc FROM from_index
                                     TO   to_index.
            READ TABLE: outa INDEX outc-p_outa,
                        outd INDEX outc-p_outd.
            MOVE-CORRESPONDING outc TO: out_key.
            MOVE-CORRESPONDING outa TO: out_attr.
            MOVE-CORRESPONDING outd TO: out_amounts,
                                        out_units.
            PERFORM get_min_var_level USING    out_key-lseqnr
                                      CHANGING min_var_level.

            IF <vvalue> <> last_vvalue OR
               <vtval>  <> last_vtval  OR
               <vtmsb>  <> last_vtmsb.

*...... new variation key for current field ..........................*

              PERFORM e20_collect_variation_entry_n(sapfgrws)
                USING variation_rep-report
                      variation_rep-vardimno
                      <vtmsb> <vtval> <vvalue> 1.

              IF <vtval> IS INITIAL.
                vtype = 'S'.
              ELSE.
                vtype = 'V'.
              ENDIF.

              IF <vtmsb> <> last_vtmsb.

                seqnr = <vtmsb>.
                PERFORM e02_read_set_index(sapfgsb0) USING seqnr.
                IF vtype = 'V'.
                  CLEAR: <vtval>, <vvalue>.
                  level = c-tmsb-level + 1.
                  IF variation_rep-from_level > 0.
                    from_level = variation_rep-from_level.
                  ELSE.
                    from_level = level + variation_rep-from_level + 2.
                  ENDIF.
                ELSE.
                  seqnr = c-tmsb-pup.
                  level = c-tmsb-level.
                  IF variation_rep-from_level > 0.
                    from_level = variation_rep-from_level.
                  ELSE.
                    from_level = 2147483647. "2**31 - 1 (max. integer)
                  ENDIF.
                ENDIF.

*...... generate variation keys for higher nodes in OUT2_VENTRIES ....*

                REFRESH node_tab.
                WHILE level >= 1.

                  UNPACK seqnr TO node_tab-vtmsb.
                  CLEAR node_tab-vvalue. "<-- prepared for repres. val.
                  node_tab-level = level.
                  APPEND node_tab.     "store entries in NODE_TAB

                  PERFORM e02_read_set_index(sapfgsb0) USING seqnr.
                  seqnr = c-tmsb-pup.
                  SUBTRACT 1 FROM level.

                ENDWHILE.

                last_vtmsb = <vtmsb>.
                last_vtype = vtype.

              ELSEIF vtype <> last_vtype.

                IF vtype = 'V'.
                  node_tab-vtmsb = <vtmsb>.
                  CLEAR node_tab-vvalue. "<-- prepared for repres. value
                  seqnr = <vtmsb>.
                  PERFORM e02_read_set_index(sapfgsb0) USING seqnr.
                  node_tab-level = c-tmsb-level + 1.
                  INSERT node_tab INDEX 1.
                ELSE.
                  DELETE node_tab INDEX 1.
                ENDIF.
                last_vtype = vtype.

              ENDIF.

              LOOP AT node_tab.
                PERFORM e20_collect_variation_entry_n(sapfgrws)
                  USING variation_rep-report
                        variation_rep-vardimno
                        node_tab-vtmsb dummy_vtval node_tab-vvalue 1.
              ENDLOOP.

              LOOP AT node_tab WHERE level < from_level.
                DELETE node_tab.
              ENDLOOP.

              last_vtval  = <vtval>.
              last_vvalue = <vvalue>.

            ENDIF.

            IF NOT variation_rep-roll_up IS INITIAL.


*...... build higher sums .............................................*

              IF min_var_level <> -1.
                CLEAR <vtval>.
                LOOP AT node_tab WHERE level >= min_var_level.
                  <vtmsb>  = node_tab-vtmsb. "SUM-VTMSBnn
                  <vvalue> = node_tab-vvalue."SUM-VTVALnn
                  PERFORM collect_outc USING out_key
                                             out_attr
                                             out_amounts
                                             out_units
                                             0.
                  IF min_var_level = -2.
                    EXIT.
                  ENDIF.
                ENDLOOP.
              ENDIF.

            ENDIF. "IF NOT VARIATION_REP-ROLL_UP IS INITIAL ...

          ENDLOOP.

        ENDIF.

      ENDDO.

    ENDDO.

*...... Postprocessing for table OUT2_VENTRIES .......................*

    PERFORM e20_set_variations_new(sapfgrws).

    GET TIME FIELD cstat-time_var_sums.
    SUBTRACT time_start FROM cstat-time_var_sums.

  ELSE.

    CLEAR cstat-time_var_sums.

  ENDIF.

ENDFORM.                               "GEN-VARIATION-SUMS
*eject
*----------------------------------------------------------------------*
*       SUBROUTINE: GEN_OUT2_DIR                                       *
*----------------------------------------------------------------------*
*       Generate directory for table OUT2                              *
*----------------------------------------------------------------------*
* No parameters                                                        *
*----------------------------------------------------------------------*
FORM gen_out2_dir.

  DATA: count_variation LIKE sy-index,
        v_index         LIKE sy-tabix,
        vr_index        LIKE sy-tabix,
        from_index      LIKE sy-tabix,
        to_index        LIKE sy-tabix,
        p_out2_key      LIKE sy-tabix,
        next_report     LIKE var_entries-report,
        vvalue          LIKE var_entries-vvalue,
        ventry(6)       TYPE c,
        comp_index      TYPE i.

  DATA: last_report    LIKE outc-report,
        last_vtmsb     TYPE rwpsetm,
        last_vtval     TYPE rwpsetm,
        last_vvalue    LIKE c-tval-from,
        last_ventry(6) TYPE c.

  DATA: BEGIN OF var_fields,
        vtmsb(17)  TYPE c VALUE 'OUT2_VAR-VTMSBnn ',
        vtval(17)  TYPE c VALUE 'OUT2_VAR-VTVALnn ',
        vvalue(17) TYPE c VALUE 'OUT2_VAR-VVALUEnn',
        ventry(17) TYPE c VALUE 'OUT2_VAR-VENTRYnn',
        END   OF var_fields.

  DATA: BEGIN OF out2_var OCCURS 0.
          INCLUDE STRUCTURE out2_dir_key.
          INCLUDE STRUCTURE var_sort_key.
  DATA: p_out2_key  LIKE sy-tabix,     "pointer into OUT2_KEY
        c_out2_key  LIKE sy-tabix,     "counter into OUT2_KEY
        END   OF out2_var.


  FIELD-SYMBOLS: <vtmsb>, <vtval>, <vvalue>, <ventry>.

  SORT outc.

  REFRESH out2_var.
  CLEAR out2_var.
  out2_var-c_out2_key = 1.
  LOOP AT outc.
    MOVE-CORRESPONDING outc TO out2_var.
    COLLECT out2_var.
  ENDLOOP.

  SORT out2_var.
  p_out2_key = 1.
  LOOP AT out2_var.
    out2_var-p_out2_key = p_out2_key.
    ADD out2_var-c_out2_key TO p_out2_key.
    MODIFY out2_var.
  ENDLOOP.

  DESCRIBE TABLE variation LINES count_variation.
  DO count_variation TIMES.
    v_index = sy-index.
    READ TABLE variation WITH KEY vardimno = v_index.

*...... sort out2 by current variation dimension .....................*

    MOVE variation-vardimno TO: var_fields-vtmsb+14(2),
                              var_fields-vtval+14(2),
                              var_fields-vvalue+15(2),
                              var_fields-ventry+15(2).
    ASSIGN: (var_fields-ventry) TO <ventry>, "OUT2_VAR-VENTRYnn
            (var_fields-vtmsb)  TO <vtmsb>,  "OUT2_VAR-VTMSBnn
            (var_fields-vtval)  TO <vtval>,  "OUT2_VAR-VTVALnn
            (var_fields-vvalue) TO <vvalue>. "OUT2_VAR-VVALUEnn
    IF sy-subrc <> 0.
      IF v_index > 1.
        SORT out2_var BY report <vtmsb> <vtval>.
      ENDIF.
      ASSIGN vvalue TO <vvalue>.
    ELSEIF v_index > 1.
      SORT out2_var BY report <vtmsb> <vtval> <vvalue>.
    ENDIF.

    to_index = 0.
    DO count_r TIMES.
      index_r = sy-index.
      READ TABLE r INDEX index_r.

      from_index  = to_index + 1.
      next_report = index_r + 1.
      READ TABLE out2_var WITH KEY report = next_report
                          BINARY SEARCH.
      to_index = sy-tabix - 1.

      READ TABLE variation_rep WITH KEY report = index_r
                                        vardimno = variation-vardimno
                               BINARY SEARCH.
      IF sy-subrc = 0.
        vr_index = sy-tabix.

        CLEAR: last_vtmsb, last_vtval, last_vvalue.
        LOOP AT out2_var FROM from_index
                         TO   to_index.

          IF <vvalue> <> last_vvalue OR
             <vtval>  <> last_vtval  OR
             <vtmsb>  <> last_vtmsb.

            IF <vtval> IS INITIAL.
              READ TABLE var_entries WITH KEY
                                          report = variation_rep-report
                                      vardimno = variation_rep-vardimno
                                          vtmsb  = <vtmsb>
                                          vtval  = <vtval>
                         BINARY SEARCH TRANSPORTING NO FIELDS.
            ELSE.
              READ TABLE var_entries WITH KEY
                                          report = variation_rep-report
                                      vardimno = variation_rep-vardimno
                                          vtmsb  = <vtmsb>
                                          vtval  = <vtval>
                                          vvalue = <vvalue>
                         BINARY SEARCH TRANSPORTING NO FIELDS.
            ENDIF.
            IF sy-subrc <> 0.
              MESSAGE x214 WITH sl_report 'FGRWFS01' 'GEN_OUT2_DIR'.
            ENDIF.
            UNPACK sy-tabix TO ventry.

            last_vtmsb  = <vtmsb>.
            last_vtval  = <vtval>.
            last_vvalue = <vvalue>.

          ENDIF.

          <ventry> = ventry.
          MODIFY out2_var.

        ENDLOOP.

      ENDIF.

    ENDDO.

  ENDDO.

  IF count_variation > 1.
    SORT out2_var.
  ENDIF.

  REFRESH out2_dir.

  LOOP AT out2_var.
    IF out2_var-report <> last_report.
      CLEAR out2_dir.
      last_report = out2_var-report.
      LOOP AT variation_rep WHERE report = out2_var-report.
        comp_index = variation_rep-vardimno + 1.
        ASSIGN COMPONENT comp_index OF STRUCTURE out2_var TO <ventry>.
        variation_rep-ve_index = <ventry>.
        MODIFY variation_rep.
      ENDLOOP.
    ENDIF.
    MOVE-CORRESPONDING out2_var TO out2_dir.
    ADD 1 TO out2_dir-varind.
    out2_dir-p_out2 = out2_var-p_out2_key.
    out2_dir-c_out2 = out2_var-c_out2_key.
    APPEND out2_dir.
  ENDLOOP.

  DESCRIBE TABLE out2_dir LINES cstat-sum_blocks.

ENDFORM.                               "GEN-OUT2_DIR
*eject
*---------------------------------------------------------------------*
*       SUBROUTINE EXPORT_OUT2                                        *
*---------------------------------------------------------------------*
* Parameters:                                                         *
*  -->  GREP_FLAG    flag: store extract into GREP                    *
*  -->  GREP_KEY     adress in GREP                                   *
*  -->  GREP_KEY     adress in GREP                                   *
*---------------------------------------------------------------------*
FORM export_out2 USING grep_flag     TYPE c
                           grep_key      LIKE grep_key
                           x_keep_out_ed LIKE rw_flag.

  DATA: from_index    LIKE sy-tabix,
        to_index      LIKE sy-tabix,
        n_records     TYPE i,
        record_length     TYPE i,      "length of OUT2 record
        max_n_records     TYPE i,      "max. number of OUT2 records
        n_grep_blocks     TYPE i.      "number of GREP blocks

  DATA: out_ed_block LIKE out_ed OCCURS 0 WITH HEADER LINE.


*....... determine number of records per GREP block ..................*

  DESCRIBE FIELD out_ed LENGTH record_length IN BYTE MODE.
  max_n_records = grep_block_size / record_length.

*....... delete old selection data from GREP .........................*

  n_grep_blocks = 0.

*....... determine number of records per GREP block ..................*

  DESCRIBE FIELD out_ed LENGTH record_length IN BYTE MODE.
  max_n_records = grep_block_size / record_length.

  LOOP AT out2_dir WHERE c_out2 > 0.

    from_index = out2_dir-p_out2.
    to_index   = out2_dir-p_out2 + out2_dir-c_out2 - 1.
    LOOP AT outc FROM from_index TO to_index.

      READ TABLE: outa INDEX outc-p_outa,
                  outd INDEX outc-p_outd.

      MOVE-CORRESPONDING: out2_dir TO out_ed_block,
                          outc     TO out_ed_block,
                          outa     TO out_ed_block,
                          outd     TO out_ed_block.

      APPEND out_ed_block.
      ADD 1 TO cstat-out.              "statistics counter
      ADD 1 TO n_records.              "GREP block counter

      IF n_records >= max_n_records.                        "full block
*       write block to GREP
        ADD 1 TO n_grep_blocks.
        IF n_grep_blocks > max_n_grep_blocks.
          MESSAGE a215 WITH max_n_grep_blocks.
        ENDIF.
        IF NOT grep_flag IS INITIAL.
          UNPACK n_grep_blocks TO grep_key-block.
          EXPORT out2 FROM out_ed_block
              TO DATABASE grep(gl) ID grep_key.
        ENDIF.
        IF NOT x_keep_out_ed IS INITIAL.
          APPEND LINES OF out_ed_block TO out_ed.
        ENDIF.
        CLEAR out_ed_block[].
        CLEAR n_records.
      ENDIF.

    ENDLOOP.                                                "AT OUT2

  ENDLOOP.                             "AT OUT2_DIR

  FREE: outc, outa, outd.

  IF n_records >= 0.                                        "last block
*   write block to GREP
    ADD 1 TO n_grep_blocks.
    IF n_grep_blocks > max_n_grep_blocks.
      MESSAGE a215 WITH max_n_grep_blocks.
    ENDIF.
    IF NOT grep_flag IS INITIAL.
      UNPACK n_grep_blocks TO grep_key-block.
      EXPORT out2 FROM out_ed_block
             TO DATABASE grep(gl) ID grep_key.
    ENDIF.
    IF NOT x_keep_out_ed IS INITIAL.
      APPEND LINES OF out_ed_block TO out_ed.
    ENDIF.
    CLEAR n_records.
  ENDIF.
  FREE out_ed_block.

*....... store size and number of OUT2 blocks ........................*

  out2_blocks-lines = max_n_records.
  out2_blocks-count = n_grep_blocks.

*....... delete furhter  block .......................................*

  IF NOT grep_flag IS INITIAL.

    CLEAR sy-subrc.
    WHILE sy-subrc IS INITIAL.
      ADD 1 TO n_grep_blocks.
      UNPACK n_grep_blocks TO grep_key-block.
      DELETE FROM grep WHERE relid   = 'GL'             AND
                             hash    = grep_key-hash    AND
                             counter = grep_key-counter AND
                             rgjnr   = grep_key-rgjnr   AND
                             crnam   = grep_key-crnam   AND
                             crdat   = grep_key-crdat   AND
                             crtime  = grep_key-crtime  AND
                             type    = grep_key-type    AND
                             block   = grep_key-block.
    ENDWHILE.

  ENDIF.

*....... reset grep_key block ........................................*

  CLEAR grep_key-block.

  cstat-out_blocks = n_grep_blocks.

ENDFORM.                               "EXPORT_OUT2_NEW

DATA: x_row_variation.

DATA: BEGIN OF rr_var OCCURS 0,
      lseqnr    LIKE out_key-lseqnr,
      dim_no(3) TYPE c,
      tot_level TYPE i,
      END   OF rr_var.

DATA: BEGIN OF gvs_level_field,
      prefix(1) TYPE c VALUE 'L',
      dim_no(3) TYPE c,
      suffix(2) TYPE c VALUE '_L',
      END   OF gvs_level_field.

FIELD-SYMBOLS: <gvs_level>.

*----------------------------------------------------------------------*
*       FORM INIT_ROW_VARIATION                                        *
*----------------------------------------------------------------------*
*       Initialization of row variation                                *
*       Check if a varied set variable of the common selection         *
*       is also used in the row definition.                            *
*       If this is true gather the necessary information for           *
*       special variation processing.                                  *
*----------------------------------------------------------------------*
*  -->  VR_INDEX  index into table VARIATION_REP                       *
*                 (report dependent attributes for variation)          *
*----------------------------------------------------------------------*
FORM init_row_variation USING vr_index LIKE sy-tabix.

  DATA: rrd_findex   TYPE i,
        rrd_tindex   TYPE i,
        rr_findex    TYPE i,
        rr_tindex    TYPE i,
        dim_no       TYPE i.

  DATA: r_wa             LIKE LINE OF r,
        rsd_wa           LIKE LINE OF rsd,
        rrd_wa           LIKE LINE OF rrd,
        rr_wa            LIKE LINE OF rr,
        variation_rep_wa LIKE LINE OF variation_rep.

  CLEAR x_row_variation.
  REFRESH rr_var.  CLEAR rr_var.

  CHECK multi_char_on CA 'V'.

  READ TABLE variation_rep INTO variation_rep_wa INDEX vr_index.
  READ TABLE: r   INTO r_wa   INDEX variation_rep_wa-p_r,
              rsd INTO rsd_wa INDEX variation_rep_wa-p_rsd.

  CHECK r-multi_char EQ 'X'.

*...... check first if at set variable is varied .....................*

  IF NOT rsd_wa-x_row_variation IS INITIAL.

*...... Is the same set variable is used in a row block ..............*

    rrd_findex = r_wa-p_rowd.
    rrd_tindex = r_wa-p_rowd + r_wa-c_rowd - 1.
    LOOP AT rrd INTO rrd_wa FROM rrd_findex
                            TO   rrd_tindex.

      rr_findex = rrd_wa-p_rr.
      rr_tindex = rrd_wa-p_rr + rrd_wa-c_rr - 1.
      LOOP AT rr INTO rr_wa FROM  rr_findex
                            TO    rr_tindex
                            WHERE vr_index      > 0 AND
                                  var_tot_level > 0.

        rr_var-lseqnr    = rrd_wa-seqnr.
        dim_no           = sy-tabix - rr_findex + 1.
        rr_var-tot_level = rr_wa-var_tot_level.
        UNPACK dim_no TO rr_var-dim_no.
        APPEND rr_var.

        x_row_variation = 'X'.

      ENDLOOP.

    ENDLOOP.

    SORT rr_var.

    CLEAR rr_var.

  ENDIF.

ENDFORM.
*----------------------------------------------------------------------*
*       FORM GET_MIN_VAR_LEVEL                                         *
*----------------------------------------------------------------------*
*       get minimum variation level from row dimension level           *
*----------------------------------------------------------------------*
*  -->  LSEQNR         Sequence number of row block                    *
*  <--  MIN_VAR_LEVEL  Minimum variation level (stop aggregation       *
*                      at this level)                                  *
*----------------------------------------------------------------------*
FORM get_min_var_level USING    lseqnr        LIKE out_key-lseqnr
                       CHANGING min_var_level TYPE i.

  IF x_row_variation IS INITIAL.
    min_var_level = 0.
  ELSE.
    IF lseqnr <> rr_var-lseqnr.
      CLEAR rr_var.
      READ TABLE rr_var WITH KEY lseqnr = lseqnr
                        BINARY SEARCH.
      IF sy-subrc <> 0.
        rr_var-lseqnr = lseqnr.
      ENDIF.
    ENDIF.
    IF NOT rr_var-dim_no IS INITIAL.
      IF gvs_level_field-dim_no <> rr_var-dim_no.
        gvs_level_field-dim_no = rr_var-dim_no.
        ASSIGN COMPONENT gvs_level_field
               OF STRUCTURE out_key TO <gvs_level>.
      ENDIF.
      IF rr_var-tot_level > 0.
*       if r-tfrow is initial.
        IF g_c_tfrow IS INITIAL.
          min_var_level = 999 - <gvs_level> - rr_var-tot_level.
        ELSE.
          min_var_level = <gvs_level> - rr_var-tot_level + 1.
        ENDIF.
        IF min_var_level < 0.
          min_var_level = 0.
        ENDIF.
      ELSE.
        min_var_level = rr_var-tot_level.
      ENDIF.
    ELSE.
      min_var_level = 0.
    ENDIF.
  ENDIF.

ENDFORM.

*.........end of include FGRWFS01......................................*

* eject
*----------------------------------------------------------------------*
*.........copy of include FGRWFS02.....................................*
*----------------------------------------------------------------------*

*eject
*---------------------------------------------------------------------*
*       SUBROUTINE BUILD_HIGHER_TOTALS_NEW                            *
*---------------------------------------------------------------------*
*                                                                     *
*       builds higher row totals of a dimension                       *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*       Parameter:                                                    *
*  -->  DIMENSION       number of current dimension                   *
*  -->  TFROW           position of totals (X="first totals")         *
*  -->  HIGHEST_SET     index of highest set in dimension             *
*  -->  TOTAL_LEVEL     total level of dimension                      *
*  -->  KEEP_LEVEL      keep level of dimension                       *
*  -->  KEEP_DIMENSION  number of kept dimension                      *
*  -->  DIM_SUPPRESS1   suppress of current dimension (X=suppress)    *
*  -->  DIM_SUPPRESS2   suppress of higher dimension (X=suppress)     *
*  <->  SUM_SI          sort index                                    *
*  <->  SUM_R           row of entry (in TVAL)                        *
*  <->  SUM_S           value of TVAL-entry                           *
*  <->  SUM_L           level of entry                                *
*  <->  SUM_I           index in TMSB/TVAL                            *
*  <->  SUM_T           type of entry (V=value,S=set)                 *
*  <->  SUM_KEEP_DIM                                                  *
*  <->  SUM_DIM_F                                                     *
*  <->  SUM_SUPPRESS                                                  *
*  <->  KEPT_SI         sort index of kept dimension                  *
*  <->  KEPT_R          row of entry (in TVAL) of kept dimension      *
*  <->  KEPT_S          value of TVAL-entry of kept dimension         *
*  <->  KEPT_I          index in TMSB/TVAL of kept dimension          *
*  <->  KEPT_T          type of entry (V=value,S=set) of kept dim.    *
*                                                                     *
*---------------------------------------------------------------------*
FORM BUILD_HIGHER_TOTALS_NEW
     USING    DIMENSION      TYPE I
              TFROW          LIKE R-TFROW
              HIGHEST_SET    TYPE I
              TOTAL_LEVEL    TYPE I
              KEEP_LEVEL     TYPE I
              KEEP_DIMENSION TYPE I
              DIM_SUPPRESS1  LIKE RR-SUPPRESS
              DIM_SUPPRESS2  LIKE RR-SUPPRESS
              SUM_DIM_F      LIKE OUT_ATTR-DIM_F
     CHANGING SUM_SI         LIKE OUT_KEY-L001_SI
              SUM_R          LIKE OUT_KEY-L001_R
              SUM_S          TYPE C
              SUM_L          LIKE OUT_KEY-L001_L
              SUM_I          LIKE OUT_ATTR-L001_I
              SUM_T          LIKE OUT_ATTR-L001_T
              SUM_IBV_LEVEL  LIKE OUT_KEY-L001_IBV_LEVEL
              SUM_KEEP_DIM   LIKE OUT_ATTR-KEEP_DIM
              SUM_SUPPRESS   LIKE OUT_ATTR-SUPPRESS
              KEPT_SI        LIKE OUT_KEY-L001_SI
              KEPT_R         LIKE OUT_KEY-L001_R
              KEPT_S         TYPE C
              KEPT_I         LIKE OUT_ATTR-L001_I
              KEPT_T         LIKE OUT_ATTR-L001_T.

  DATA: CUR_DIM LIKE OUT_ATTR-DIM_F.                         "K11K077564

  DATA: OLD_SUM_T(1) TYPE C,           "temporary field for SUM_T
        IBV_LEVEL    TYPE I.   "temp. integer version of sum_ibv_level

  IF TFROW <> G_C_TFROW. MESSAGE X214. ENDIF.

*....... is current entry highest set? (then work is already done) ...*

  IF SUM_T = 'S'          AND
     SUM_I = HIGHEST_SET.
    EXIT.
  ENDIF.

  UNPACK DIMENSION TO CUR_DIM.                               "K11K077564

*....... check keep level of current entry ...........................*

  IF KEEP_LEVEL  <> 0              AND
     DIMENSION   =  KEEP_DIMENSION AND
     KEEP-STATUS =  ' '.
    PERFORM CHECK_KEEP_LEVEL_NEW USING DIMENSION
                                       TFROW
                                       KEEP_LEVEL
                                       SUM_SI
                                       SUM_R
                                       SUM_S
                                       SUM_L
                                       SUM_I
                                       SUM_T.
  ENDIF.

  CASE TOTAL_LEVEL.

*---------------------------------------------------------------------*
*        total level 1-                                               *
*---------------------------------------------------------------------*

    WHEN -1.

*....... go up to next valid entry ...................................*

      PERFORM GO_UP_TO_VALID_ENTRY_NEW USING    DIMENSION
                                                TFROW
                                                HIGHEST_SET
                                                KEEP_LEVEL
                                                KEEP_DIMENSION
                                                DIM_SUPPRESS1
                                                DIM_SUPPRESS2
                                                SUM_DIM_F
                                       CHANGING SUM_SI
                                                SUM_R
                                                SUM_S
                                                SUM_L
                                                SUM_I
                                                SUM_T
                                                SUM_KEEP_DIM
                                                SUM_SUPPRESS
                                                KEPT_SI
                                                KEPT_R
                                                KEPT_S
                                                KEPT_I
                                                KEPT_T.


*....... build higher totals not in first dimension ..................*

      IF DIMENSION > 1.

*....... check IBV level of highest dimension set ....................*

        PERFORM E02_READ_SET_INDEX(SAPFGSB0) USING HIGHEST_SET.
        IBV_LEVEL = SUM_IBV_LEVEL.     "conversion to integer
        IF C-TMSB-LEVEL <= IBV_LEVEL.
          CLEAR: OUT_AMOUNTS, OUT_UNITS.  "clear all sums
        ENDIF.
        PERFORM STORE_HIGHEST_SET_NEW USING    CUR_DIM
                                               TFROW
                                               HIGHEST_SET
                                               DIM_SUPPRESS2
                                               SUM_DIM_F
                                      CHANGING SUM_SI
                                               SUM_R
                                               SUM_S
                                               SUM_L
                                               SUM_I
                                               SUM_T
                                               SUM_SUPPRESS.
        IF KEEP-STATUS <> ' '.
          PERFORM COLLECT_KEPT_ENTRY_NEW CHANGING KEPT_SI
                                                  KEPT_R
                                                  KEPT_S
                                                  KEPT_I
                                                  KEPT_T
                                                  SUM_KEEP_DIM
                                                  SUM_SUPPRESS.
        ENDIF.
      ENDIF.

*---------------------------------------------------------------------*
*        total level 2-                                               *
*---------------------------------------------------------------------*

    WHEN -2.

*....... go up to next valid entry ...................................*

      OLD_SUM_T = SUM_T.
      PERFORM GO_UP_TO_VALID_ENTRY_NEW USING    DIMENSION
                                                TFROW
                                                HIGHEST_SET
                                                KEEP_LEVEL
                                                KEEP_DIMENSION
                                                DIM_SUPPRESS1
                                                DIM_SUPPRESS2
                                                SUM_DIM_F
                                       CHANGING SUM_SI
                                                SUM_R
                                                SUM_S
                                                SUM_L
                                                SUM_I
                                                SUM_T
                                                SUM_KEEP_DIM
                                                SUM_SUPPRESS
                                                KEPT_SI
                                                KEPT_R
                                                KEPT_S
                                                KEPT_I
                                                KEPT_T.

      IF OLD_SUM_T = 'V'.

*....... read set of next higher level ...............................*

        PERFORM E08_READ_OBJECT_INDEX(SAPFGSB0) USING SUM_I.
        PERFORM E02_READ_SET_INDEX(SAPFGSB0) USING C-TVAL-PUP.

*....... check IBV level of current entry ............................*

        IBV_LEVEL = SUM_IBV_LEVEL.     "conversion to integer
        IF C-TMSB-LEVEL <= IBV_LEVEL.
          CLEAR: OUT_AMOUNTS, OUT_UNITS.  "clear all sums
        ENDIF.

*....... store entry to dimension table DYYY .........................*

        PERFORM STORE_CURRENT_TOTAL_NEW USING    CUR_DIM
                                                 TFROW
                                                 'X'
                                                 HIGHEST_SET
                                                 DIM_SUPPRESS1
                                                 DIM_SUPPRESS2
                                                 SUM_DIM_F
                                        CHANGING SUM_SI
                                                 SUM_R
                                                 SUM_S
                                                 SUM_L
                                                 SUM_I
                                                 SUM_T
                                                 SUM_SUPPRESS.

        IF KEEP_LEVEL  <> 0              AND
           DIMENSION   =  KEEP_DIMENSION AND
           KEEP-STATUS =  ' '.
          PERFORM CHECK_KEEP_LEVEL_NEW USING DIMENSION
                                             TFROW
                                             KEEP_LEVEL
                                             SUM_SI
                                             SUM_R
                                             SUM_S
                                             SUM_L
                                             SUM_I
                                             SUM_T.
        ENDIF.
        IF KEEP-STATUS <> ' '.
          PERFORM COLLECT_KEPT_ENTRY_NEW CHANGING KEPT_SI
                                                  KEPT_R
                                                  KEPT_S
                                                  KEPT_I
                                                  KEPT_T
                                                  SUM_KEEP_DIM
                                                  SUM_SUPPRESS.
        ENDIF.
      ENDIF.

*....... store highest set ...........................................*

      IF DIMENSION    >  1   AND
         C-TMSB-SEQNR <> HIGHEST_SET.
        PERFORM STORE_HIGHEST_SET_NEW USING    CUR_DIM
                                               TFROW
                                               HIGHEST_SET
                                               DIM_SUPPRESS2
                                               SUM_DIM_F
                                      CHANGING SUM_SI
                                               SUM_R
                                               SUM_S
                                               SUM_L
                                               SUM_I
                                               SUM_T
                                               SUM_SUPPRESS.
        IF KEEP-STATUS <> ' '.
          PERFORM COLLECT_KEPT_ENTRY_NEW CHANGING KEPT_SI
                                                  KEPT_R
                                                  KEPT_S
                                                  KEPT_I
                                                  KEPT_T
                                                  SUM_KEEP_DIM
                                                  SUM_SUPPRESS.
        ENDIF.
      ENDIF.

*---------------------------------------------------------------------*
*        total level >= 0                                             *
*---------------------------------------------------------------------*

    WHEN OTHERS.
      IF SUM_T = 'V'.
        PERFORM E08_READ_OBJECT_INDEX(SAPFGSB0) USING SUM_I.
        C-TMSB-PUP   = C-TVAL-PUP.
        C-TMSB-SEQNR = 0.
        SUM_T        = 'S'.
      ELSE.
        PERFORM E02_READ_SET_INDEX(SAPFGSB0) USING SUM_I.
      ENDIF.

      WHILE C-TMSB-SEQNR <> HIGHEST_SET.
        PERFORM E02_READ_SET_INDEX(SAPFGSB0) USING C-TMSB-PUP.

*....... check IBV level of current entry ............................*

        IBV_LEVEL = SUM_IBV_LEVEL.     "conversion to integer
        IF C-TMSB-LEVEL <= IBV_LEVEL.
          CLEAR: OUT_AMOUNTS, OUT_UNITS.  "clear all sums
        ENDIF.

        PERFORM STORE_CURRENT_TOTAL_NEW USING    CUR_DIM
                                                 TFROW
                                                 'X'
                                                 HIGHEST_SET
                                                 DIM_SUPPRESS1
                                                 DIM_SUPPRESS2
                                                 SUM_DIM_F
                                        CHANGING SUM_SI
                                                 SUM_R
                                                 SUM_S
                                                 SUM_L
                                                 SUM_I
                                                 SUM_T
                                                 SUM_SUPPRESS.

        IF KEEP_LEVEL  <> 0              AND
           DIMENSION   =  KEEP_DIMENSION AND
           KEEP-STATUS =  ' '.
          PERFORM CHECK_KEEP_LEVEL_NEW USING DIMENSION
                                             TFROW
                                             KEEP_LEVEL
                                             SUM_SI
                                             SUM_R
                                             SUM_S
                                             SUM_L
                                             SUM_I
                                             SUM_T.
        ENDIF.

*       IF KEEP-STATUS <> ' '.                              "P30K096134
        IF ( KEEP-STATUS    =  '1'           ) OR           "P30K096134
           ( KEEP-STATUS    =  '2'       AND                "P30K096134
             KEEP-DIMENSION <> DIMENSION     ).             "P30K096134
          PERFORM COLLECT_KEPT_ENTRY_NEW CHANGING KEPT_SI
                                                  KEPT_R
                                                  KEPT_S
                                                  KEPT_I
                                                  KEPT_T
                                                  SUM_KEEP_DIM
                                                  SUM_SUPPRESS.
        ENDIF.

      ENDWHILE.


  ENDCASE.
ENDFORM.
*eject
*---------------------------------------------------------------------*
*       SUBROUTINE STORE_HIGHEST_SET                                  *
*---------------------------------------------------------------------*
*                                                                     *
*       goes up to highest set of dimension and stores entry in       *
*       table of totals SUM                                           *
*                                                                     *
*---------------------------------------------------------------------*
* Parameters:                                                         *
*  -->  CUR_DIM      current dimension                                *
*  -->  TFROW        position of totals (X="first totals")            *
*  -->  HIGHEST_SET  index of highest set in dimension                *
*  -->  DIM_SUPPRESS suppress of current entry (X=suppress)           *
*  -->  SUM_DIM_F                                                     *
*       SUM_SI       sort index                                       *
*       SUM_R        row of entry (in TVAL)                           *
*       SUM_S        value of TVAL-entry                              *
*       SUM_L        level of entry                                   *
*       SUM_I        index in TMSB/TVAL                               *
*       SUM_T        type of entry (V=value,S=set)                    *
*       SUM_SUPPRESS                                                  *
*---------------------------------------------------------------------*
FORM STORE_HIGHEST_SET_NEW
     USING    CUR_DIM      LIKE OUT_ATTR-DIM_F
              TFROW        LIKE R-TFROW
              HIGHEST_SET  TYPE I
              DIM_SUPPRESS
              SUM_DIM_F    LIKE OUT_ATTR-DIM_F
     CHANGING SUM_SI       LIKE OUT_KEY-L001_SI
              SUM_R        LIKE OUT_KEY-L001_R
              SUM_S        TYPE C
              SUM_L        LIKE OUT_KEY-L001_L
              SUM_I        LIKE OUT_ATTR-L001_I
              SUM_T        LIKE OUT_ATTR-L001_T
              SUM_SUPPRESS LIKE OUT_ATTR-SUPPRESS.

  IF TFROW <> G_C_TFROW. MESSAGE X214. ENDIF.

  SUM_I = HIGHEST_SET.
  SUM_T = 'S'.
  SUM_SUPPRESS = DIM_SUPPRESS.
  IF TFROW = 'X'.
    SUM_L  = '002'.
    UNPACK SUM_I TO SUM_SI.
    CLEAR: SUM_R,
           SUM_S.
  ELSE.
    PERFORM E21_LAST_OBJECT(SAPFGSB0) USING HIGHEST_SET.
    UNPACK C-TVAL-SEQNR TO SUM_SI.
    SUM_L  = '997'.
*   SUM_R  = HEXFF.
    clear_cfield_with_maxchar sum_r.
*   SUM_S  = HEXFF.
    clear_cfield_with_maxchar sum_s.
  ENDIF.

  CHECK SUM_DIM_F IS INITIAL OR   "no row formula
        SUM_DIM_F LT CUR_DIM.     "row formula in succ. dim.

  PERFORM COLLECT_OUTC USING OUT_KEY
                             OUT_ATTR
                             OUT_AMOUNTS
                             OUT_UNITS
                             0.

ENDFORM.
*eject
*---------------------------------------------------------------------*
*       SUBROUTINE STORE_CURRENT_TOTAL_NEW                            *
*---------------------------------------------------------------------*
*                                                                     *
*       stores current set entry to total table                       *
*                                                                     *
*---------------------------------------------------------------------*
* Parameter:                                                          *
*  -->  CUR_DIM         number of current dimension                   *
*  -->  TFROW           position of totals (X="first totals")         *
*  -->  CHANGE_LEVEL    flag to change level field (SUM_L)            *
*  -->  HIGHEST_SET     index of highest set in dimension             *
*  -->  DIM_SUPPRESS1   suppress of current dimension (X=suppress)    *
*  -->  DIM_SUPPRESS2   suppress of higher dimension (X=suppress)     *
*  <->  SUM_SI          sort index                                    *
*  <->  SUM_R           row of entry (in TVAL)                        *
*  <->  SUM_S           value of TVAL-entry                           *
*  <->  SUM_L           level of entry                                *
*  <->  SUM_I           index in TMSB/TVAL                            *
*  <->  SUM_T           type of entry (V=value,S=set)                 *
*  <->  SUM_SUPPRESS                                                  *
*---------------------------------------------------------------------*
FORM STORE_CURRENT_TOTAL_NEW
     USING    CUR_DIM       LIKE OUT_ATTR-DIM_F
              TFROW         LIKE R-TFROW
              CHANGE_LEVEL  TYPE FLAG
              HIGHEST_SET   TYPE I
              DIM_SUPPRESS1 LIKE RR-SUPPRESS
              DIM_SUPPRESS2 LIKE RR-SUPPRESS
              SUM_DIM_F     LIKE OUT_ATTR-DIM_F
     CHANGING SUM_SI        LIKE OUT_KEY-L001_SI
              SUM_R         LIKE OUT_KEY-L001_R
              SUM_S         TYPE C
              SUM_L         LIKE OUT_KEY-L001_L
              SUM_I         LIKE OUT_ATTR-L001_I
              SUM_T         LIKE OUT_ATTR-L001_T
              SUM_SUPPRESS  LIKE OUT_ATTR-SUPPRESS.

  IF TFROW <> G_C_TFROW. MESSAGE X214. ENDIF.

  SUM_I = C-TMSB-SEQNR.
  SUM_T = 'S'.
  IF C-TMSB-SEQNR = HIGHEST_SET.
    SUM_SUPPRESS = DIM_SUPPRESS2.
  ELSE.
    SUM_SUPPRESS = DIM_SUPPRESS1.
  ENDIF.

  IF TFROW = 'X'.
    IF CHANGE_LEVEL = 'X'.
      XCOUNT1 = SUM_L - 1.
      UNPACK XCOUNT1 TO SUM_L.
    ENDIF.
    UNPACK SUM_I TO SUM_SI.
    CLEAR: SUM_R,
           SUM_S.
  ELSE.
    PERFORM E21_LAST_OBJECT(SAPFGSB0) USING C-TMSB-SEQNR.
    UNPACK C-TVAL-SEQNR TO SUM_SI.
    IF CHANGE_LEVEL = 'X'.
      XCOUNT1 = SUM_L + 1.
      UNPACK XCOUNT1 TO SUM_L.
    ENDIF.
*   SUM_R  = HEXFF.
    clear_cfield_with_maxchar sum_r.
*   SUM_S  = HEXFF.
    clear_cfield_with_maxchar sum_s.
  ENDIF.

  CHECK SUM_DIM_F IS INITIAL OR   "no row formula
        SUM_DIM_F LT CUR_DIM.     "row formula in succ. dim.

  PERFORM COLLECT_OUTC USING OUT_KEY
                             OUT_ATTR
                             OUT_AMOUNTS
                             OUT_UNITS
                             0.

ENDFORM.
*eject
*----------------------------------------------------------------------*
*       SUBROUTINE: COLLECT_KEPT_ENTRY_NEW                             *
*----------------------------------------------------------------------*
*                                                                     *
*       stores current set entry to total table                       *
*                                                                     *
*---------------------------------------------------------------------*
* Parameters:                                                          *
*   <-> SUM_SI       sort index of kept dimension                      *
*   <-> SUM_R        row of entry (in TVAL) of kept dimension          *
*   <-> SUM_S        value of TVAL-entry of kept dimension             *
*   <-> SUM_I        index in TMSB/TVAL of kept dimension              *
*   <-> SUM_T        type of entry (V=value,S=set) of kept dimension   *
*   <-> SUM_KEEP_DIM                                                   *
*   <-> SUM_SUPPRESS                                                   *
*----------------------------------------------------------------------*
FORM COLLECT_KEPT_ENTRY_NEW
     CHANGING SUM_SI       LIKE OUT_KEY-L001_SI
              SUM_R        LIKE OUT_KEY-L001_R
              SUM_S        TYPE C
              SUM_I        LIKE OUT_ATTR-L001_I
              SUM_T        LIKE OUT_ATTR-L001_T
              SUM_KEEP_DIM LIKE OUT_ATTR-KEEP_DIM
              SUM_SUPPRESS LIKE OUT_ATTR-SUPPRESS.

  DATA: SAVE_SUPPRESS LIKE OUT_ATTR-SUPPRESS.

  IF KEEP-STATUS = '2'.
    BACKUP-SI    = SUM_SI.
    BACKUP-R     = SUM_R.
    BACKUP-S     = SUM_S.
    BACKUP-I     = SUM_I.
    BACKUP-T     = SUM_T.
    SUM_SI       = KEEP-SI.
    SUM_R        = KEEP-R.
    SUM_S        = KEEP-S.
    SUM_I        = KEEP-I.
    SUM_T        = KEEP-T.
    SUM_KEEP_DIM = KEEP-DIMENSION.
    SAVE_SUPPRESS = SUM_SUPPRESS.
    CLEAR SUM_SUPPRESS.

    PERFORM COLLECT_OUTC USING OUT_KEY
                               OUT_ATTR
                               OUT_AMOUNTS
                               OUT_UNITS
                               0.

    SUM_SUPPRESS = SAVE_SUPPRESS.
    CLEAR SUM_KEEP_DIM.
    SUM_SI       = BACKUP-SI.
    SUM_R        = BACKUP-R.
    SUM_S        = BACKUP-S.
    SUM_I        = BACKUP-I.
    SUM_T        = BACKUP-T.
  ELSE.
    KEEP-STATUS = '2'.
  ENDIF.

ENDFORM.
*eject
*---------------------------------------------------------------------*
*       SUBROUTINE CHECK_KEEP_LEVEL_NEW                               *
*---------------------------------------------------------------------*
*                                                                     *
*       checks current entry against keep level and fills KEEP        *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*       Parameter:                                                    *
*  --> TFROW        position of totals (X="first totals")             *
*  --> KEEP_LEVEL   keep level                                        *
*  --> SUM_SI       sort index                                        *
*  --> SUM_R        row of entry (in TVAL)                            *
*  --> SUM_S        value of TVAL-entry                               *
*  --> SUM_L        level                                             *
*  --> SUM_I        index in TMSB/TVAL                                *
*  --> SUM_T        type of entry (V=value,S=set)                     *
*                                                                     *
*---------------------------------------------------------------------*
FORM CHECK_KEEP_LEVEL_NEW USING DIMENSION  TYPE I
                                TFROW      LIKE R-TFROW
                                KEEP_LEVEL TYPE I
                                SUM_SI     LIKE OUT_KEY-L001_SI
                                SUM_R      LIKE OUT_KEY-L001_R
                                SUM_S      TYPE C
                                SUM_L      LIKE OUT_KEY-L001_L
                                SUM_I      LIKE OUT_ATTR-L001_I
                                SUM_T      LIKE OUT_ATTR-L001_T.

  data:
    l_subrc type sysubrc.

  IF TFROW <> G_C_TFROW. MESSAGE X214. ENDIF.

  CASE KEEP_LEVEL.
    WHEN -1.
      IF SUM_T = 'S'.
        PERFORM E02_READ_SET_INDEX(SAPFGSB0) USING SUM_I.
      ELSE.
        C-TMSB-FLAG = ' '.
      ENDIF.
      IF SUM_T       = 'V'  OR
         C-TMSB-FLAG = 'X'.
        KEEP-STATUS    = '1'.
        KEEP-DIMENSION = DIMENSION.
        KEEP-SI        = SUM_SI.
        KEEP-R         = SUM_R.
        KEEP-S         = SUM_S.
        KEEP-I         = SUM_I.
        KEEP-T         = SUM_T.
      ENDIF.
    WHEN -2.
      IF SUM_T    = 'S'.
        PERFORM E02_READ_SET_INDEX(SAPFGSB0) USING SUM_I.
        IF C-TMSB-TYPE = 'B' OR
           C-TMSB-FLAG = 'X'.
          KEEP-STATUS    = '1'.
          KEEP-DIMENSION = DIMENSION.
          KEEP-SI        = SUM_SI.
          KEEP-R         = SUM_R.
          KEEP-S         = SUM_S.
          KEEP-I         = SUM_I.
          KEEP-T         = SUM_T.
        ENDIF.
      ENDIF.
    WHEN OTHERS.
      IF TFROW = 'X'.
        XCOUNT1 = KEEP_LEVEL + 1.
      ELSE.
        XCOUNT1 = 999 - KEEP_LEVEL - 1.
      ENDIF.
      IF XCOUNT1 = SUM_L.
        KEEP-STATUS    = '1'.
        KEEP-DIMENSION = DIMENSION.
        KEEP-SI        = SUM_SI.
        KEEP-R         = SUM_R.
*       KEEP-S         = SUM_S.                             "P30K096133
*DATA:   FIRST_CHAR TYPE C.                                  "P30K096133
*        FIRST_CHAR = SUM_S.                                 "P30K096133
        check_cfield1_eq_maxchar SUM_S l_subrc.
*       IF TFROW <> 'X' AND FIRST_CHAR = HEXFF(1).          "P30K096133
        IF TFROW <> 'X' AND l_subrc = 0.
*         KEEP-S       = HEXFF(1).                          "P30K096133
          clear_cfield_with_maxchar keep-s.
        ELSE.                                               "P30K096133
          KEEP-S       = SUM_S.                             "P30K096133
        ENDIF.                                              "P30K096133
        KEEP-I         = SUM_I.
        KEEP-T         = SUM_T.
      ENDIF.
  ENDCASE.

ENDFORM.

*eject
*---------------------------------------------------------------------*
*       SUBROUTINE GO_UP_TO_VALID_ENTRY_NEW                           *
*---------------------------------------------------------------------*
*                                                                     *
*       goes up to the next valid entry (if TOTAL_LEVEL is negativ):  *
*       - suppress flag of entry is 'X'                               *
*       - sign flag hasn't been set                                   *
*                                                                     *
*---------------------------------------------------------------------*
* Parameters:                                                         *
*  -->  DIMENSION       number of current dimension                   *
*  -->  TFROW           position of totals (X="first totals")         *
*  -->  HIGHEST_SET     index of highest set in dimension             *
*  -->  KEEP_LEVEL      keep level of dimension                       *
*  -->  KEEP_DIMENSION  number of kept dimension                      *
*  -->  DIM_SUPPRESS1   suppress of current dimension (X=suppress)    *
*  -->  DIM_SUPPRESS2   suppress of higher dimension (X=suppress)     *
*  -->  SUM_DIM_F                                                     *
*  <->  SUM_SI          sort index                                    *
*  <->  SUM_R           row of entry (in TVAL)                        *
*  <->  SUM_S           value of TVAL-entry                           *
*  <->  SUM_L           level of entry                                *
*  <->  SUM_I           index in TMSB/TVAL                            *
*  <->  SUM_T           type of entry (V=value,S=set)                 *
*  <->  SUM_KEEP_DIM                                                  *
*  <->  SUM_SUPPRESS                                                  *
*  <->  KEPT_SI         sort index of kept dimension                  *
*  <->  KEPT_R          row of entry (in TVAL) of kept dimension      *
*  <->  KEPT_S          value of TVAL-entry of kept dimension         *
*  <->  KEPT_I          index in TMSB/TVAL of kept dimension          *
*  <->  KEPT_T          type of entry (V=value,S=set) of kept dim.    *
*                                                                     *
*---------------------------------------------------------------------*
FORM GO_UP_TO_VALID_ENTRY_NEW
     USING    DIMENSION      TYPE I
              TFROW          LIKE R-TFROW
              HIGHEST_SET    TYPE I
              KEEP_LEVEL     TYPE I
              KEEP_DIMENSION TYPE I
              DIM_SUPPRESS1  LIKE RR-SUPPRESS
              DIM_SUPPRESS2  LIKE RR-SUPPRESS
              SUM_DIM_F      LIKE OUT_ATTR-DIM_F
     CHANGING SUM_SI         LIKE OUT_KEY-L001_SI
              SUM_R          LIKE OUT_KEY-L001_R
              SUM_S          TYPE C
              SUM_L          LIKE OUT_KEY-L001_L
              SUM_I          LIKE OUT_ATTR-L001_I
              SUM_T          LIKE OUT_ATTR-L001_T
              SUM_KEEP_DIM   LIKE OUT_ATTR-KEEP_DIM
              SUM_SUPPRESS   LIKE OUT_ATTR-SUPPRESS
              KEPT_SI        LIKE OUT_KEY-L001_SI
              KEPT_R         LIKE OUT_KEY-L001_R
              KEPT_S         TYPE C
              KEPT_I         LIKE OUT_ATTR-L001_I
              KEPT_T         LIKE OUT_ATTR-L001_T.

  DATA: CUR_DIM LIKE OUT_ATTR-DIM_F.

  IF TFROW <> G_C_TFROW. MESSAGE X214. ENDIF.

  UNPACK DIMENSION TO CUR_DIM.

*....... set start values for LOOP ...................................*

  IF SUM_T = 'V'.
    PERFORM E08_READ_OBJECT_INDEX(SAPFGSB0) USING SUM_I.
    C-TMSB-PUP    = C-TVAL-PUP.
    C-TMSB-SEQNR  = 0.
    C-TMSB-FLAG   = C-TVAL-FLAG.
    C-TMSB-PMFLAG = C-TVAL-PMFLAG.
    SUM_T         = 'S'.
  ELSE.
    PERFORM E02_READ_SET_INDEX(SAPFGSB0) USING SUM_I.
  ENDIF.

*....... store invalid entries (with sign flag is set) ...............*

  WHILE C-TMSB-SEQNR  <> HIGHEST_SET   AND
        C-TMSB-FLAG   =  'Y'.

    PERFORM E02_READ_SET_INDEX(SAPFGSB0) USING C-TMSB-PUP.

    IF C-TMSB-PMFLAG <> ' ' OR
       C-TMSB-FLAG   =  'X'.
      PERFORM STORE_CURRENT_TOTAL_NEW USING    CUR_DIM
                                               TFROW
                                               ' '
                                               HIGHEST_SET
                                               DIM_SUPPRESS1
                                               DIM_SUPPRESS2
                                               SUM_DIM_F
                                      CHANGING SUM_SI
                                               SUM_R
                                               SUM_S
                                               SUM_L
                                               SUM_I
                                               SUM_T
                                               SUM_SUPPRESS.
      IF KEEP_LEVEL  <> 0              AND
         DIMENSION   =  KEEP_DIMENSION AND
         KEEP-STATUS =  ' '.
        PERFORM CHECK_KEEP_LEVEL_NEW USING DIMENSION
                                           TFROW
                                           KEEP_LEVEL
                                           SUM_SI
                                           SUM_R
                                           SUM_S
                                           SUM_L
                                           SUM_I
                                           SUM_T.
      ENDIF.

      IF KEEP-STATUS <> ' '.
        PERFORM COLLECT_KEPT_ENTRY_NEW CHANGING KEPT_SI
                                                KEPT_R
                                                KEPT_S
                                                KEPT_I
                                                KEPT_T
                                                SUM_KEEP_DIM
                                                SUM_SUPPRESS.
      ENDIF.
    ENDIF.

  ENDWHILE.
ENDFORM.

*.........end of include FGRWFS02......................................*

* eject
*----------------------------------------------------------------------*
*.........copy of include FGRWFS03.....................................*
*----------------------------------------------------------------------*

* eject
*---------------------------------------------------------------------*
*       FORM RC_SET_VALID_ADDFIELDS                                   *
*---------------------------------------------------------------------*
*       Activate additional fields which are required for the         *
*       report-cluster interface                                      *
*---------------------------------------------------------------------*
* No parameters                                                       *
*---------------------------------------------------------------------*
FORM RC_SET_VALID_ADDFIELDS.

  DATA: RC_FIELDS  LIKE RGCDI OCCURS 0 WITH HEADER LINE,
        L_T_FIELDS TYPE GRDDT_T_FIELDS.

* >>>>> begin delete note 523748 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
*  FIELD-SYMBOLS: <FLAG>.
* <<<<< end delete/begin insert note 523748 >>>>>>>>>>>>>>>>>>>>>>>>>>>
  DATA: wa_afstat TYPE afstat.

  FIELD-SYMBOLS: <FLAG>.
  FIELD-SYMBOLS: <fs_afstat> LIKE RGCDI.
* <<<<< end insert note 523748 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  CALL FUNCTION 'G_REPORT_GET_DIMENSIONS'
       EXPORTING
            DIM_TYPE                     = 'A'              "all
       TABLES
            DIM_DATA_TAB                 = RC_FIELDS
       EXCEPTIONS
            RC_INTERFACE_NOT_INITIALIZED = 1
            RC_INVALID_DIM_TYPE          = 2
            OTHERS                       = 99.

  SORT PRIMARY_FIELDS BY FIELDNAME.
  LOOP AT RC_FIELDS.
* >>>>>Begin insert note 523748 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    ASSIGN rc_fields TO <fs_afstat>.
      MOVE-CORRESPONDING <fs_afstat> TO wa_afstat.
      APPEND wa_afstat TO itafstat.
* <<<<<End insert note 523748 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    ASSIGN COMPONENT RC_FIELDS-F_NAME OF STRUCTURE VALID_ADDFIELDS
           TO <FLAG>.
    IF SY-SUBRC = 0.
*     Field belongs to additional table and is valid for current library
      IF <FLAG> IS INITIAL.
*       Mark field as used and collect it
        <FLAG> = 'X'.
        APPEND RC_FIELDS-F_NAME TO L_T_FIELDS.
      ENDIF.
    ELSE.
      READ TABLE PRIMARY_FIELDS
           WITH KEY FIELDNAME = RC_FIELDS-F_NAME
           BINARY SEARCH.
      IF SY-SUBRC NE 0.
        CLEAR PRIMARY_FIELDS.
        PRIMARY_FIELDS-FIELDNAME = RC_FIELDS-F_NAME.
        INSERT PRIMARY_FIELDS INDEX SY-TABIX.
      ENDIF.
    ENDIF.
  ENDLOOP.

  IF NOT L_T_FIELDS IS INITIAL.
*   Find primary fields for used additional fields
    CALL FUNCTION 'G_RW_DDIF_GET_PRIMARY_FIELDS'
         EXPORTING
              I_REPORTING_TABLE  = T804A-TAB
              I_T_FIELDS         = L_T_FIELDS
         CHANGING
              C_T_PRIMARY_FIELDS = PRIMARY_FIELDS[].
  ENDIF.

ENDFORM.
* eject
*---------------------------------------------------------------------*
*       FORM RC_CHECK_RECORD                                          *
*---------------------------------------------------------------------*
*       checks data of one record against sender-data of              *
*       report-cluster interface                                      *
*---------------------------------------------------------------------*
*  <--  SUBRC     return-code (0=OK, 4=record invalid)                *
*---------------------------------------------------------------------*
FORM RC_CHECK_RECORD USING SUBRC LIKE SY-SUBRC.

  DATA: CUR_CB    LIKE RGCCT-DIM_CB,   "control-block of cur. dimension
        NAME(22)  TYPE C.              "field-name in CUR-TAB

  DATA: POSID_CONV_CHECK TYPE BOOLEAN.                      "nte2069319

*....... reset check-table ...........................................*

  REFRESH RC_CHECK_TABLE.

*....... check if dimension data table is already filled ............*

  IF COUNT_RC_DIM_DATA_TAB = 0.

*   fill dimension data table
    CALL FUNCTION 'G_REPORT_GET_DIMENSIONS'
         EXPORTING
              DIM_TYPE     = 'A'
         IMPORTING
              TAB_COUNT    = COUNT_RC_DIM_DATA_TAB
         TABLES
              DIM_DATA_TAB = RC_DIM_DATA_TAB.

  ENDIF.

*....... loop at dimensions ..........................................*

  LOOP AT RC_DIM_DATA_TAB.

    CUR_CB = SY-TABIX.

*....... check if field is not a period-field ........................*

    IF RC_DIM_DATA_TAB-PERIOD <> 'X'.

*....... build field-name for CUR-TAB ................................*

      SY-SUBRC = 4.
      IF KEY_CONVERSION = 'X'.
        READ TABLE KEY_CONV WITH KEY RC_DIM_DATA_TAB-F_NAME.
        IF SY-SUBRC = 0.
          CONCATENATE ADDITIONAL_TABLE RC_DIM_DATA_TAB-F_NAME
                      INTO NAME SEPARATED BY '-'.
          ASSIGN TABLE FIELD (NAME) TO <RC_DIM_VALUE>.
        ENDIF.
      ELSEIF ALIAS_FLAG = 'X'.
        READ TABLE ALIAS_FIELDS WITH KEY TABLE = CUR-TAB
                                       FIELD = RC_DIM_DATA_TAB-F_NAME.
        IF SY-SUBRC = 0.
          ASSIGN TABLE FIELD (ALIAS_FIELDS-ASSIGN_FIELD)
                 TO <RC_DIM_VALUE>.
        ENDIF.
      ENDIF.

      IF SY-SUBRC <> 0.
        CONCATENATE CUR-TAB '-' RC_DIM_DATA_TAB-F_NAME INTO NAME.
        ASSIGN TABLE FIELD (NAME) TO <RC_DIM_VALUE>.
*       check if field is in original table
        IF SY-SUBRC <> 0.
          CONCATENATE ADDITIONAL_TABLE RC_DIM_DATA_TAB-F_NAME
                      INTO NAME SEPARATED BY '-'.
          ASSIGN TABLE FIELD (NAME) TO <RC_DIM_VALUE>.
        ENDIF.
      ENDIF.

*....... fill check-table ............................................*

      IF SY-SUBRC = 0.

        RC_CHECK_TABLE-DIM_CB    = CUR_CB.
        RC_CHECK_TABLE-DIM_VALUE = <RC_DIM_VALUE>.
        if rep_table eq 'CCSS' or rep_table eq 'RWCOOM'.   "note417005
          check rc_dim_data_tab-F_NAME ne 'VERSN'.         "note417005
        endif.                                             "note417005
        APPEND RC_CHECK_TABLE.

      ENDIF.

    ENDIF.

  ENDLOOP.

  IF REP_TABLE = 'CCSS'.                                    "nte2069319
    POSID_CONV_CHECK = 'X'.                                 "nte2069319
  ENDIF.

*....... check record ................................................*

  CALL FUNCTION 'G_REPORT_CHECK_VALUES'
       EXPORTING                                            "nte2069319
            POSID_CONV_CHECK = POSID_CONV_CHECK             "nte2069319
       IMPORTING
            SUBRC     = SUBRC
       TABLES
            DIM_TABLE = RC_CHECK_TABLE.

ENDFORM.
* eject
*----------------------------------------------------------------------*
*       FORM CHECK_EXISTENCE_OF_SET                                    *
*----------------------------------------------------------------------*
*       checks if set input on report start screen is valid            *
*----------------------------------------------------------------------*
*  -->  TABLE     table of set                                         *
*  -->  SET       setname                                              *
*  -->  FIELD     field for set                                        *
*----------------------------------------------------------------------*
FORM CHECK_EXISTENCE_OF_SET
     USING TABLE LIKE T804A-TAB
           SET   LIKE C-TMSB-SETNR
           FIELD LIKE C-TMSB-FIELD.

  DATA: SETID     LIKE  SETHIER-SETID,
        NEW_SETID LIKE  SETHIER-SETID,
        TABNAME   LIKE  SETHIER-TABNAME,
        FIELDNAME LIKE  SETHIER-FIELDNAME.

*......................................................................

  SETID     = SET.
  TABNAME   = TABLE.
  FIELDNAME = FIELD.

  CALL FUNCTION 'G_RW_CHECK_EXISTENCE_OF_SET'
       EXPORTING
            SETID     = SETID
            TABNAME   = TABNAME
            FIELDNAME = FIELDNAME
       IMPORTING
            NEW_SETID = NEW_SETID.

  SET = NEW_SETID.

ENDFORM.

*---------------------------------------------------------------------*
*       FORM INITIALIZE_VARIABLES                                     *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM INITIALIZE_VARIABLES.

  DATA: VAR_NAME       LIKE VARIABLES-NAME,
        RANGE_NAME(10) TYPE C,
        SET_CLASS(2)   TYPE C.

  FIELD-SYMBOLS: <VAR_VALUE>,
                 <VAR_RANGE> TYPE TABLE.

  LOOP AT VARIABLES.

*   assign field symbol to variable value
    VAR_NAME = VARIABLES-NAME.
    VAR_NAME(1) = GRWT_INT_PAR_PREF.
    ASSIGN (VAR_NAME) TO <VAR_VALUE>.

*   assign field symbol to value range
    IF VARIABLES-GTYPE = 'S'.          "set variable
      CONCATENATE VARIABLES-ABAP_NAME_SO '[]' INTO RANGE_NAME.
      ASSIGN (RANGE_NAME) TO <VAR_RANGE>.
    ENDIF.

    IF VARIABLES-PARAMID = SPACE.      "no memory id specified

*     get default value
      PERFORM E39_GET_GLOBAL_DEFAULT(SAPFGSB0)
              USING VARIABLES-NAME <VAR_VALUE>.
      IF VARIABLES-GTYPE <> 'S'.       "not set variable
        IF C-SUBRC <> 0.
          PERFORM FORMULA_VARIABLE_ERROR
                  USING SPACE C-SUBRC 'W'.
        ENDIF.
      ENDIF.                           "IF VARIABLES-GTYPE <> 'S'.

    ENDIF.                             "IF VARIABLES-PARAMID = SPACE...

*   get defaults of variables from sender report
    IF RC_CALL = 0.                    "report is receiver
      IF VARIABLES-PARAMID <> SPACE.   "no memory id specified
        GET PARAMETER ID VARIABLES-PARAMID FIELD <VAR_VALUE>.
        IF <VAR_VALUE> IS INITIAL.

          PERFORM E39_GET_GLOBAL_DEFAULT(SAPFGSB0)
                  USING VARIABLES-NAME <VAR_VALUE>.
          IF VARIABLES-GTYPE <> 'S'.   "not set variable
            IF C-SUBRC <> 0.
              PERFORM FORMULA_VARIABLE_ERROR
                      USING SPACE C-SUBRC 'W'.
            ENDIF.
          ENDIF.                       "IF VARIABLES-GTYPE <> 'S'.
        ENDIF.                         "IF <VAR_VALUE> IS INITIAL.
      ENDIF.                           "IF VARIABLES-PARAMID <> SPACE.

      CALL FUNCTION 'G_REPORT_GET_GLOBAL_VALUE'
           EXPORTING
                GLOBAL_NAME    = VARIABLES-NAME
                GLOBAL_DEFAULT = <VAR_VALUE>
                GLOBAL_TYPE    = VARIABLES-GTYPE
                GLOBAL_USAGE   = VARIABLES-USAGE
                GLOBAL_FIELD   = VARIABLES-FIELD
           IMPORTING
                GLOBAL_VALUE   = <VAR_VALUE>
                SUBRC          = SUBRC.

      IF VARIABLES-GTYPE = 'S'.        "set variable

*       remove prefix 0H from sets
        SET_CLASS = <VAR_VALUE>.
*       if set_class = '0H'.
*         shift <var_value> by 2 places.
*       endif.

        IF SUBRC <> 0.
          CALL FUNCTION 'G_REPORT_GET_DIMENSION_RANGES'
               EXPORTING
                    DIM_FIELD             = VARIABLES-FIELD
               TABLES
                    RANGES_TAB            = <VAR_RANGE>
               EXCEPTIONS
                    RC_EMPTY_RANGES_TABLE = 00
                    OTHERS                = 04.
          IF SY-SUBRC = 0.
            CLEAR <VAR_VALUE>.
          ENDIF.
        ENDIF.

      ELSE.                            "IF VARIABLES-GTYPE = 'S'.

        IF SUBRC <> 0.
          RC_SUBRC = 4.
        ENDIF.
      ENDIF.                           "IF VARIABLES-GTYPE = 'S'.

    ENDIF.                             "IF RC_CALL = 0.

*....... clear names of temporary sets ................................*

    IF VARIABLES-GTYPE = 'S' AND
       RC_CALL <> 0 AND
       R-TEST <> 'X'.                  "layout control not active
      GET PARAMETER ID VARIABLES-PARAMID FIELD <VAR_VALUE>.
      IF SET_CLASS(1) = '$'.           "temporary set
        CLEAR <VAR_VALUE>.
        SET PARAMETER ID VARIABLES-PARAMID FIELD <VAR_VALUE>.
*     elseif set_class = '0H'.         "group
*       shift <var_value> by 2 places.
*       set parameter id variables-paramid field <var_value>.
      ENDIF.                           "IF SET_CLASS(1) = '$'.
    ENDIF.

  ENDLOOP.                             "AT VARIABLES

ENDFORM.

*.........end of include FGRWFS03......................................*

* eject
*----------------------------------------------------------------------*
*.........copy of include FGRWFS04.....................................*
*----------------------------------------------------------------------*

* eject
*----------------------------------------------------------------------*
*       FORM FORMULA_VARIABLE_ERROR                                    *
*----------------------------------------------------------------------*
*       sends messages of given message type for formula variables     *
*----------------------------------------------------------------------*
*  -->  OBJECT    object of error                                      *
*  -->  SUBRC     return code of formula variable function             *
*  -->  MSG_TYPE  message type 'E' 'I'                                 *
*----------------------------------------------------------------------*
FORM formula_variable_error
     USING value(object)
           value(subrc)    LIKE sy-subrc
           value(msg_type) LIKE sy-msgty.

  DATA: e_global   LIKE t802g-global,  "global of eval. fail
        e_subrc    LIKE sy-subrc,      "Evaluation failed
        e_formula  LIKE t802g-fkt.     "formula where eval_failed

  PERFORM e44_get_evaluation_errors(sapfgsb0) USING e_global
                                                    e_subrc
                                                    e_formula.
  IF object <> space.
    e_global = object.
  ENDIF.
  CASE subrc.
    WHEN 0.
*     do nothing
    WHEN 2.
*     database read error
      MESSAGE ID 'GR' TYPE msg_type NUMBER 951.
    WHEN 4.
*     result to long for field
      MESSAGE ID 'GS' TYPE msg_type NUMBER 765 WITH e_global.
    WHEN 8.
*     conversion of result failed
      MESSAGE ID 'GS' TYPE msg_type NUMBER 762 WITH e_global.
    WHEN 12.
      CASE e_subrc.
        WHEN 0.
*         do nothing.
        WHEN 8.
          MESSAGE ID 'GS' TYPE msg_type NUMBER 761 WITH e_formula.
        WHEN 11.
          MESSAGE ID 'GS' TYPE msg_type NUMBER 751 WITH e_formula.
        WHEN 12.
          MESSAGE ID 'GS' TYPE msg_type NUMBER 752 WITH e_formula.
        WHEN 13.
          MESSAGE ID 'GS' TYPE msg_type NUMBER 753 WITH e_formula.
        WHEN 14.
          MESSAGE ID 'GS' TYPE msg_type NUMBER 754 WITH e_formula.
        WHEN 15.
          MESSAGE ID 'GS' TYPE msg_type NUMBER 755 WITH e_formula.
        WHEN 16.
          MESSAGE ID 'GS' TYPE msg_type NUMBER 756 WITH e_formula.
        WHEN 17.
          MESSAGE ID 'GS' TYPE msg_type NUMBER 757 WITH e_formula.
        WHEN OTHERS.
          MESSAGE ID 'GS' TYPE msg_type NUMBER 763 WITH e_formula.
      ENDCASE.
    WHEN 16.
*     variable not found in T802G
      MESSAGE ID 'GS' TYPE msg_type NUMBER 766 WITH e_global.
    WHEN 20.
*     generation of formula-tree failed
      MESSAGE ID 'GS' TYPE msg_type NUMBER 767 WITH e_global.

    WHEN OTHERS.
      MESSAGE ID 'GR' TYPE msg_type NUMBER 952 WITH e_global.

  ENDCASE.

ENDFORM.
*---------------------------------------------------------------------*
*       FORM GET_VALUE_LIST                                           *
*---------------------------------------------------------------------*
*       get table with values for form print (row dimension values)   *
*       - only values needed for current total level, suppress flags  *
*---------------------------------------------------------------------*
*  <--  VALUE_TAB        table with values                            *
*  -->  TOP_INDEX        index of row dimension set                   *
*  -->  TOTAL_LEVEL      total level                                  *
*---------------------------------------------------------------------*
FORM get_value_list
     TABLES value_tab
     USING top_index   LIKE c-tmsb-seqnr
           total_level TYPE i.

  DATA: tmp_pup         LIKE c-tval-pup,
        loc_total_level TYPE i,
        level           LIKE c-tval-level,
        pup             LIKE c-tval-pup,
        seqnr           LIKE c-tmsb-seqnr,
        test_char(1)    TYPE c,
        count           TYPE i,
        l_subrc         type sysubrc.

  IF total_level <= 0.                 "total level <= 0

    PERFORM e06_endrq_object(sapfgsb0) USING 11.
    PERFORM e03_get_object(sapfgsb0) USING top_index 11.
    WHILE c-subrc = 0.
      tmp_pup = c-tval-pup.
      IF c-tval-from(1) NE '='.
        test_char = value_tab = c-tval-from.
*       IF test_char EQ hex00(1).
        check_cfield1_eq_minchar test_char l_subrc.
        if l_subrc = 0.
          CLEAR value_tab.
        ENDIF.
        APPEND value_tab.
      ENDIF.
      IF c-tval-flag = 'Y'.            "entries suppressed from above
*       read higher set until not suppressed
*       ...
*       ...
        PERFORM e03_get_object(sapfgsb0) USING top_index 11.
        WHILE c-tval-pup = tmp_pup.    "get first entry of next set
          PERFORM e03_get_object(sapfgsb0) USING top_index 11.
        ENDWHILE.
      ELSE.
        PERFORM e03_get_object(sapfgsb0) USING top_index 11.
      ENDIF.
    ENDWHILE.
    PERFORM e06_endrq_object(sapfgsb0) USING 11.

  ELSE.                                "total level <> 0

    PERFORM e02_read_set_index(sapfgsb0) USING top_index.
    IF c-tmsb-pup = 0.                 "no multi-set above
      loc_total_level = total_level - 1.
    ELSE.                              "multi-set above
      loc_total_level = total_level.
    ENDIF.

    WHILE c-subrc = 0.
      PERFORM get_valid_value_entry    "get first value entry for set
              USING    11 c-tmsb-seqnr
              CHANGING value_tab.
      CHECK c-tval-pup GT 0.           "<<<< insert - note 132440

      level = c-tval-level.
      pup = c-tval-pup.
      IF level <= loc_total_level.     "entries of basic set(s)

        PERFORM get_value_list
                TABLES value_tab
                USING pup 0.
        seqnr = pup.

      ELSE.

        WHILE level > loc_total_level.
          PERFORM e02_read_set_index(sapfgsb0) USING pup.
          level = c-tmsb-level.
          pup = c-tmsb-pup.
        ENDWHILE.
        seqnr = c-tmsb-seqnr.

        PERFORM get_valid_value_entry
                USING    12 seqnr
                CHANGING value_tab.
        test_char = value_tab.
*       IF test_char EQ hex00(1).
        check_cfield1_eq_minchar test_char l_subrc.
        if l_subrc = 0.
          CLEAR value_tab.
        ENDIF.
        APPEND value_tab.

      ENDIF.

*     get next set on same hierarchy level

      IF seqnr = top_index.
        c-subrc = 4.
        EXIT.
      ENDIF.

      count = 1.
      PERFORM e10_next_set(sapfgsb0) USING seqnr count 0.
      WHILE c-subrc <> 0 AND
            seqnr <> top_index.
        PERFORM e02_read_set_index(sapfgsb0) USING seqnr.
        seqnr = c-tmsb-pup.
        IF seqnr = top_index.
          c-subrc = 4.
          EXIT.
        ENDIF.
        count = 1.
        PERFORM e10_next_set(sapfgsb0) USING seqnr count 0.
      ENDWHILE.

    ENDWHILE.

  ENDIF.

ENDFORM.



*---------------------------------------------------------------------*
*       FORM GIVE_CHARACTERISTICS                                     *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  FIELDLIST                                                     *
*---------------------------------------------------------------------*
FORM give_characteristics TABLES fieldlist.

  LOOP AT common_fields.
    fieldlist = common_fields-name.
    APPEND fieldlist.
  ENDLOOP.


ENDFORM.

*---------------------------------------------------------------------*
*       FORM SET_E_SELTAB                                             *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  P_T_S_SELTAB                                                  *
*  -->  P_T_SELTAB                                                    *
*  -->  P_T_E_SELTAB                                                  *
*  -->  P_PROGNAME                                                    *
*---------------------------------------------------------------------*
FORM set_e_seltab USING    i_progname  TYPE syrepid
                           is_grep_key TYPE grep_key
*                          i_indxpwd   TYPE indxpwd
                           it_s_seltab TYPE grw_t_params
                  CHANGING et_e_seltab TYPE grw_t_params.

  DATA: lt_seltab      TYPE grw_t_params,
        lt_seltab_rest TYPE grw_t_params,
        l_n_p_ve       TYPE grw_s_params-selname VALUE 'P_VErrnn'.

*....... initializations ..............................................
  REFRESH lt_seltab.

*....... append grep_key and password .................................
  PERFORM f02_append_component(sapfgrwt)
          USING: is_grep_key 'HASH'    'IHASH'    CHANGING lt_seltab,
                 is_grep_key 'COUNTER' 'ICOUNT'   CHANGING lt_seltab,
                 is_grep_key 'CRNAM'   'ICRNAM'   CHANGING lt_seltab,
                 is_grep_key 'CRDAT'   'ICRDAT'   CHANGING lt_seltab,
                 is_grep_key 'CRTIME'  'ICRTIME'  CHANGING lt_seltab.
*                i_indxpwd   0         'INDXPWDI' changing lt_seltab.

*....... append additional variation parameters .......................
  LOOP AT variation_rep.
    UNPACK variation_rep-report   TO l_n_p_ve+4(2).
    UNPACK variation_rep-vardimno TO l_n_p_ve+6(2).
    PERFORM f02_append_component(sapfgrwt)
            USING    variation_rep 'VE_FROM' l_n_p_ve
            CHANGING lt_seltab.
  ENDLOOP.

*....... create selection table for E-report ..........................
  PERFORM f02_set_seltab(sapfgrwt)
          USING    i_progname
                   it_s_seltab
                   lt_seltab
          CHANGING et_e_seltab.

ENDFORM.

*---------------------------------------------------------------------*
*       FORM CHECK_X_SELTAB                                           *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  it_Sparams                                                    *
*  -->  ct_Xparams                                                    *
*  -->  ct_VARS                                                       *
*---------------------------------------------------------------------*
FORM check_x_seltab
     USING    it_sparams  TYPE grw_t_params
     CHANGING ct_xparams  TYPE grw_t_params
              ct_vars     TYPE grw_t_vars.

  DATA: ls_xparams TYPE grw_s_params,
        l_setid    TYPE setid.

  FIELD-SYMBOLS: <ls_sparams> TYPE grw_s_params,
                 <ls_vars>    TYPE rgrw_vars.

  CHECK ct_xparams IS INITIAL.

  ct_xparams = it_sparams.

*....... value variables ..............................................
  LOOP AT ct_vars ASSIGNING <ls_vars> WHERE gtype = 'V'.
    READ TABLE it_sparams ASSIGNING <ls_sparams>
         WITH KEY selname = <ls_vars>-abap_name
                  kind    = 'P'.
    CHECK sy-subrc = 0.
    READ TABLE ct_xparams TRANSPORTING NO FIELDS
         WITH KEY selname = <ls_vars>-dynpro_name
                  kind    = 'P'.
    IF sy-subrc <> 0.
      CLEAR ls_xparams.
      ls_xparams-selname = <ls_vars>-dynpro_name.
      ls_xparams-kind    = 'P'.
      ls_xparams-low     = <ls_sparams>-low.
      APPEND ls_xparams TO x_seltab.
    ENDIF.
    IF <ls_vars>-current_value IS INITIAL.
      <ls_vars>-current_value = <ls_sparams>-low.
    ENDIF.
  ENDLOOP.

*....... set variables ................................................
  LOOP AT ct_vars ASSIGNING <ls_vars> WHERE gtype = 'S'.
    READ TABLE it_sparams ASSIGNING <ls_sparams>
         WITH KEY selname = <ls_vars>-abap_name
                  kind    = 'P'.
    CHECK sy-subrc = 0.
    l_setid = <ls_sparams>-low.
    READ TABLE ct_xparams TRANSPORTING NO FIELDS
         WITH KEY selname = <ls_vars>-dynpro_name
                  kind    = 'P'.
    IF sy-subrc <> 0.
      CLEAR ls_xparams.
      ls_xparams-selname = <ls_vars>-dynpro_name.
      ls_xparams-kind    = 'P'.
      CALL FUNCTION 'G_SET_DECRYPT_SETID'
           EXPORTING
                setid     = l_setid
           IMPORTING
                shortname = ls_xparams-low.
      APPEND ls_xparams TO x_seltab.
    ENDIF.
    IF <ls_vars>-current_value IS INITIAL.
      <ls_vars>-current_value = <ls_sparams>-low.
    ENDIF.
  ENDLOOP.

ENDFORM.

*.........end of include FGRWFS04......................................*

* eject
*----------------------------------------------------------------------*
*.........copy of include FGRWFS05.....................................*
*----------------------------------------------------------------------*


*---------------------------------------------------------------------*
*       FORM ev_end_of_selection                                      *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
  FORM ev_end_of_selection.

    DATA: l_msgty        TYPE smesg-msgty,
          l_count        TYPE i,
          l_x_active     TYPE flag,
          l_time0        TYPE f,
          l_time1        TYPE f.

*.........prepare out2.................................................
    PERFORM sort_data_new.

*.........set timer....................................................
    GET TIME FIELD time_sel_1.

    DESCRIBE FIELD out2 LENGTH cstat-out2_length IN BYTE MODE.

    cstat-time_selection = time_sel_1 - time_sel_0.
    cstat-time_extract   = 0.
    cstat-versn          = program_version.

*.........close messages, update statistics ...........................
    PERFORM message_auth_failures(sapfgrws) TABLES fstat.

    PERFORM msg_get(sapfgrwt)
            CHANGING g_t_smesg
                     l_msgty
                     l_count
                     l_x_active.

    PERFORM update_stat(sapfgrws)
            USING report_group
            CHANGING cstat-num_exec.

*....... export to GREP ...............................................
    PERFORM f01_fill_grep_tables(sapfgrwx)
            TABLES x_seltab
                   variables
                   parms
                   rsd
                   i_grix_selp
                   i_grix_rsd
            USING  report_group.

    CLEAR: grep_key, extract_key.

    IF indxt = 'X'.

*.... write GRIX entries
      GET TIME FIELD l_time0.
      CALL FUNCTION 'G_WRITE_GRIX_ENTRIES'
           EXPORTING
                rgjnr           = report_group
                program_version = program_version
                mt_date         = mt-date
                description     = indxn
                status_au       = statusau
                valdate         = valdate
                valperio        = valperio
                cb_program_name = sl_report
           IMPORTING
                grep_key        = grep_key
           TABLES
                table_of_vars   = i_grix_selp
                variation       = variation
                variation_rep   = variation_rep
                var_entries     = var_entries
                i_grix_rsd      = i_grix_rsd
           CHANGING
                subrc           = subrc
           EXCEPTIONS
                OTHERS          = 1.
      GET TIME FIELD l_time1.

      cstat-time_extract = l_time1 - l_time0.

*.... set EXTRACT_KEY
      MOVE-CORRESPONDING grep_key TO extract_key.

      IF Grep_Key-Hash IS INITIAL.       "no data is selected   "433958
        PERFORM export_out2 USING ' ' grep_key edition.         "433958
      ELSE.                                                     "433958

*.....fill and export OUT2
      grep_key-type  = 'S'.
      grep_key-block = '001'.
      PERFORM export_out2 USING 'X' grep_key edition.

*.... export selection tables
      grep_key-type  = 'E'.
      grep_key-block = '001'.
      PERFORM export_selection_to_grep USING grep_key.

*..... export password
      grep_key-type  = 'P'.
      grep_key-block = '001'.
      EXPORT indxpwd TO DATABASE grep(gl) ID grep_key.

*.... export sets
      grep_key-type  = 'E'.
      grep_key-block = 'STS'.
      PERFORM e18_export_to_grep(sapfgsb0) USING grep_key.

      ENDIF.                                                    "433958

    ELSE.

*.... fill OUT2
      PERFORM export_out2 USING ' ' grep_key edition.

    ENDIF.

*....... export to memory .............................................
    PERFORM export_selection_to_memory.

*.........call edition.................................................*
    CASE edition.

      WHEN ' '.
*...... do not submit edition
        IF stats = 'X'.
          IF sy-batch = space AND sy-pdest = space.
            NEW-PAGE LINE-COUNT 0.
          ENDIF.
          PERFORM export_import_sel_stats(sapfgrws) USING 'E'.
          CALL FUNCTION 'G_STATISTIC_PRINT'
               EXPORTING
                    job       = report_group
                    indx_name = indxn
                    no_dialog = sy-batch.
        ENDIF.
        IF cstat-out = 0.
          MESSAGE s601 WITH report_group ''.
        ELSE.
          MESSAGE s595.
        ENDIF.

      WHEN 'X'.
*...... submit edition
        CALL FUNCTION 'DB_COMMIT'.
        PERFORM set_e_seltab
                USING    ed_report
                         grep_key s_seltab
                CHANGING e_seltab.
        rw_break 1 'ev E-O-S (... submit edition)'.         "#EC NOTEXT
        PERFORM f90_export_rw_diagnosis(sapfgrwx)
                USING report_group.
        PERFORM main IN PROGRAM (ed_report)
                USING e_seltab.

      WHEN OTHERS.
*....... should not occur
        MESSAGE x214.

    ENDCASE.

  ENDFORM.

*.........end of include FGRWFS05......................................*

* eject
*----------------------------------------------------------------------*
*.........copy of include FGRWFC01.....................................*
*----------------------------------------------------------------------*

*---------------------------------------------------------------------*
*       FORM params_Get                                               *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  seltab                                                        *
*---------------------------------------------------------------------*
FORM params_get CHANGING seltab TYPE grw_t_params.

  DATA: prog_name      LIKE sy-repid,
        table_name(10) TYPE c,
        seltab_0       TYPE grw_t_params,
        l_s_seltab_0   TYPE grw_s_params,
        l_s_seltab     TYPE grw_s_params.

  DATA: processed TYPE SORTED TABLE OF grw_s_params-selname
                       WITH UNIQUE KEY TABLE LINE.

  FIELD-SYMBOLS: <field>,
                 <table> TYPE table,
                 <wa>,
                 <sign>, <option>, <low>, <high>.

*.. get input parameters ..............................................
  prog_name = sy-repid.
  PERFORM f02_get_input_parameters(sapfgrwt)
          USING    prog_name
          CHANGING seltab_0.

  REFRESH: processed, seltab.

*.. process parameters and select options .............................
  LOOP AT seltab_0 INTO l_s_seltab_0.
*.... check if parameter/select option has already been processed
    READ TABLE processed TRANSPORTING NO FIELDS
         WITH KEY = l_s_seltab_0-selname.
    CHECK sy-subrc <> 0.
    INSERT l_s_seltab_0-selname INTO TABLE processed.
    CASE l_s_seltab_0-kind.
      WHEN 'P'.
*........ process parameter
        ASSIGN (l_s_seltab_0-selname) TO <field>.
        CLEAR l_s_seltab.
        l_s_seltab-selname = l_s_seltab_0-selname.
        l_s_seltab-kind    = l_s_seltab_0-kind.
        l_s_seltab-low     = <field>.
        APPEND l_s_seltab TO seltab.
      WHEN 'S'.
*........ process select option
        CONCATENATE l_s_seltab_0-selname '[]' INTO table_name.
        ASSIGN (table_name) TO <table>.
        ASSIGN (l_s_seltab_0-selname) TO <wa>.
        ASSIGN COMPONENT 1 OF STRUCTURE <wa> TO <sign>.
        ASSIGN COMPONENT 2 OF STRUCTURE <wa> TO <option>.
        ASSIGN COMPONENT 3 OF STRUCTURE <wa> TO <low>.
        ASSIGN COMPONENT 4 OF STRUCTURE <wa> TO <high>.
        LOOP AT <table> INTO <wa>.
          CLEAR l_s_seltab.
          l_s_seltab-selname = l_s_seltab_0-selname.
          l_s_seltab-kind    = l_s_seltab_0-kind.
          l_s_seltab-sign    = <sign>.
          l_s_seltab-option  = <option>.
          l_s_seltab-low     = <low>.
          l_s_seltab-high    = <high>.
          APPEND l_s_seltab TO seltab.
        ENDLOOP.

        READ TABLE <table> INDEX 1 INTO <wa>.               "INS 419231

        IF sy-subrc <> 0.
          CLEAR l_s_seltab.
          l_s_seltab-selname = l_s_seltab_0-selname.
          l_s_seltab-kind    = l_s_seltab_0-kind.
          APPEND l_s_seltab TO seltab.
        ENDIF.
      WHEN OTHERS.
        MESSAGE x214.
    ENDCASE.
  ENDLOOP.

* SORT seltab BY selname kind.                              "DEL 427738
  SORT seltab STABLE BY selname kind.                       "INS 427738

ENDFORM.

*---------------------------------------------------------------------*
*       FORM params_set                                               *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  seltab                                                        *
*---------------------------------------------------------------------*
FORM params_set USING seltab TYPE grw_t_params.

  DATA: l_s_seltab     TYPE grw_s_params,
        wa             TYPE grw_s_params,
        table_name(10) TYPE c.

  DATA: processed TYPE SORTED TABLE OF grw_s_params-selname
                       WITH UNIQUE KEY TABLE LINE.

  FIELD-SYMBOLS: <field>,
                 <table> TYPE table,
                 <wa>,
                 <sign>, <option>, <low>, <high>.

*.. initializations ...................................................
  REFRESH: processed.

* process parameters and select options ...............................
  LOOP AT seltab INTO l_s_seltab.
*.... check if parameter/select option has already been processed
    READ TABLE processed TRANSPORTING NO FIELDS
         WITH KEY = l_s_seltab-selname.
    CHECK sy-subrc <> 0.
    INSERT l_s_seltab-selname INTO TABLE processed.
    CASE l_s_seltab-kind.
      WHEN 'P'.
*...... process parameter
        ASSIGN (l_s_seltab-selname) TO <field>.
        CHECK sy-subrc EQ 0.
        <field> = l_s_seltab-low.
      WHEN 'S'.
*...... process select option
        CONCATENATE l_s_seltab-selname '[]' INTO table_name.
        ASSIGN (table_name) TO <table>.
        CHECK sy-subrc EQ 0.
        ASSIGN (l_s_seltab-selname) TO <wa>.
        ASSIGN COMPONENT 1 OF STRUCTURE <wa> TO <sign>.
        ASSIGN COMPONENT 2 OF STRUCTURE <wa> TO <option>.
        ASSIGN COMPONENT 3 OF STRUCTURE <wa> TO <low>.
        ASSIGN COMPONENT 4 OF STRUCTURE <wa> TO <high>.
        REFRESH <table>.
        LOOP AT seltab INTO wa
             WHERE selname = l_s_seltab-selname
               AND kind    = l_s_seltab-kind.
          CHECK: NOT wa-sign IS INITIAL AND NOT wa-option IS INITIAL.
          CLEAR <wa>.
          <sign>   = wa-sign.
          <option> = wa-option.
          <low>    = wa-low.
          <high>   = wa-high.
          APPEND <wa> TO <table>.
        ENDLOOP.
      WHEN OTHERS.
        MESSAGE x214.
    ENDCASE.
  ENDLOOP.

ENDFORM.

*---------------------------------------------------------------------*
*       FORM screen_get                                               *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  et_screen                                                     *
*---------------------------------------------------------------------*
FORM screen_get CHANGING et_screen TYPE grw_t_screen.

  DATA: ls_screen TYPE grw_s_screen.

  REFRESH et_screen.

  LOOP AT SCREEN.
    MOVE-CORRESPONDING screen TO ls_screen.
    APPEND ls_screen TO et_screen.
  ENDLOOP.

ENDFORM.

*---------------------------------------------------------------------*
*       FORM screen_set                                               *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  it_Screen                                                     *
*---------------------------------------------------------------------*
FORM screen_set USING it_screen TYPE grw_t_screen.

  FIELD-SYMBOLS: <ls_screen> TYPE grw_s_screen.

  LOOP AT SCREEN.
    READ TABLE it_screen ASSIGNING <ls_screen>
         WITH KEY name = screen-name.
    CHECK sy-subrc = 0.
    MOVE-CORRESPONDING <ls_screen> TO screen.
    MODIFY SCREEN.
  ENDLOOP.

ENDFORM.

*------------------- BEGIN OF INSERT 449163 ---------------------------*
*-------------Implementation for Schedule Manager----------------------*
*&---------------------------------------------------------------------*
*&      Form  moni_close
*&---------------------------------------------------------------------*
*      - close connection to schedman monitor
*      - will be executed only in X-ABAP
*----------------------------------------------------------------------*
*
*
*----------------------------------------------------------------------*
FORM moni_close USING
                 p_scmawitem LIKE scma_witem
                 p_wf_okey LIKE SWOTOBJID-OBJKEY
                 p_key LIKE schedman_key.

data: l_gd_aplstat like smmain-aplstat,
      l_gd_handle     type balloghndl,
      l_gs_scma_event like scma_event.

constants: c_status_aborted       value 'A'.
constants: c_status_error         value '4'.
constants: c_status_ok            value '0'.
constants: c_status_undefined     value '2'.
constants: yes                    value 'X'.

include schedman_events.

* application status
  l_gd_aplstat = c_status_ok.
*----  put a global(!) variable like l_gd_aplstat in X-ABAP and change
*----  it like shown below at error occurence,
*----  if an errorhandling will be demanded by any customer.
*----  Then the Schedman will become aware of the error occurence.
*----  Now no error handling is implemented (all times status 'ok')
* gd_aplstat = c_status_undefined.
* gd_aplstat = c_status_error.
* gd_aplstat = c_status_aborted.

* If the report ended with error -> stop whole workflow. Otherwise
* start the next job

  if l_gd_aplstat = '4' or l_gd_aplstat = 'A'.
    l_gs_scma_event-wf_event = cs_wf_events-error.
  else.
    l_gs_scma_event-wf_event = cs_wf_events-finished.
  endif.

* the variables wf_witem and wf_okey
* are from include RKASMAWF and are filled AUTOMATICALLY
* fill them into strcuture ls_scma_event

  l_gs_scma_event-WF_WITEM = p_scmawitem-wf_witem.
  l_gs_scma_event-WF_OKEY  = p_wf_okey.

* take messages for application log
*  gs_message-log_handle = gd_handle.
  CALL FUNCTION 'KPEP_MONI_CLOSE_RECORD'
       EXPORTING
            LS_KEY        = p_key
*            LS_MESSAGE    = gs_message
*            LD_OBJECTS    = 27
*           LS_EXT        =
*           LS_RL         =
            LS_SCMA_EVENT = l_gs_scma_event
*      TABLES
*         LT_SPOOL      =
       CHANGING
            ld_aplstat    = l_gd_aplstat
       EXCEPTIONS
            NO_ID_GIVEN   = 1
            OTHERS        = 2.
  commit work.
ENDFORM.                    " moni_close
*------------------- END OF INSERT 449163 ---------------------------*

*.........end of include FGRWFC01......................................*

**********End-of-Report GP006NZKH45RLMZ0DDBKQFQ6SMP220******************

*.. The following subroutine is for internal (FuGr RSSG) use only! ..*


FORM _RSSG_PROGRAM_LOADCHECK
     CHANGING E_S_PDIR TYPE RSSGTPDIR
              E_FOUND  TYPE FLAG. "#EC CALLED
CONSTANTS:
BEGIN OF _RSSG_C_PCLA,
  PROGCLASS TYPE  RSSGTPCLA-PROGCLASS
    VALUE 'RW_SELECTION',
  CLIDEP TYPE  RSSGTPCLA-CLIDEP
    VALUE 'X',
  GENFLAG TYPE  RSSGTPCLA-GENFLAG
    VALUE 'T',
  SUBC TYPE  RSSGTPCLA-SUBC
    VALUE '1',
  TEMPLATE TYPE  RSSGTPCLA-TEMPLATE
    VALUE ' ',
END   OF _RSSG_C_PCLA,

BEGIN OF _RSSG_C_PDIR,
  UNI_IDC25 TYPE  RSSGTPDIR-UNI_IDC25
    VALUE '006NZKH45RLMZ0DDBKQFQ6SMP',
  CLIENT TYPE  RSSGTPDIR-CLIENT
    VALUE '220',
  PROGCLASS TYPE  RSSGTPDIR-PROGCLASS
    VALUE 'RW_SELECTION',
  PROGNAME TYPE  RSSGTPDIR-PROGNAME
    VALUE 'GP006NZKH45RLMZ0DDBKQFQ6SMP220',
  CREUSER TYPE  RSSGTPDIR-CREUSER
    VALUE 'DAVILA',
  CRETSTMP TYPE  RSSGTPDIR-CRETSTMP
    VALUE 20171023151118,
  GENUSER TYPE  RSSGTPDIR-GENUSER
    VALUE 'VPADILLAA',
  GENTSTMP TYPE  RSSGTPDIR-GENTSTMP
    VALUE 20190619224616,
  GENRELEASE TYPE  RSSGTPDIR-GENRELEASE
    VALUE '740',
  GENSTATUS TYPE  RSSGTPDIR-GENSTATUS
    VALUE '00',
  TEMPLATE TYPE  RSSGTPDIR-TEMPLATE
    VALUE ' ',
  UPDUSERTPL TYPE  RSSGTPDIR-UPDUSERTPL
    VALUE ' ',
  UPDDATETPL TYPE  RSSGTPDIR-UPDDATETPL
    VALUE '00000000',
  UPDTIMETPL TYPE  RSSGTPDIR-UPDTIMETPL
    VALUE '000000',
  SUBC TYPE  RSSGTPDIR-SUBC
    VALUE '1',
  WITH_SUBTEMPL TYPE  RSSGTPDIR-WITH_SUBTEMPL
    VALUE ' ',
END   OF _RSSG_C_PDIR.

  MOVE-CORRESPONDING _RSSG_C_PDIR TO E_S_PDIR.
  E_FOUND = 'X'.
ENDFORM.
